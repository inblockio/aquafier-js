datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model Users {
  address       String                     @id
  ens_name      String?
  email         String?
  Latest        Latest[]
  Settings      Settings?
  UserAddresses UserAttestationAddresses[]

  @@map("users")
}

model AquaTemplate {
  id          String               @id
  owner       String
  title       String
  name        String
  created_at  String
  public      Boolean
  form_fields AquaTemplateFields[]

  @@map("aqua_templates")
}

model AquaTemplateFields {
  id           String  @id @default(uuid())
  aqua_form_id String
  name         String
  label        String
  type         String
  required     Boolean
  is_array     Boolean @default(false)
  is_hidden   Boolean @default(false)
  is_editable Boolean @default(true)
  description String?
  placeholder String?
  support_text String?
  default_value String?

  AquaForm AquaTemplate @relation(fields: [aqua_form_id], references: [id])

  @@map("aqua_templates_fields")
}

model UserAttestationAddresses {
  id          String @id @default(uuid())
  owner       String
  address     String
  trust_level Int
  User        Users  @relation(fields: [owner], references: [address])

  @@map("user_attestation_addresses")
}

model SiweSession {
  id             Int       @id @default(autoincrement())
  address        String
  nonce          String    @unique // âœ… Make nonce unique
  issuedAt       DateTime  @default(now())
  expirationTime DateTime?

  @@map("siwe_session")
}

model Contract {
  hash            String   @id
  genesis_hash    String?
  latest          String? //Json?
  sender          String?
  receiver        String?
  option          String?
  reference_count Int?
  file_name       String?
  created_at      DateTime @default(now())
  // User             User?         @relation(fields: [hash], references: [user])
  // Revision         Revision?     @relation(fields: [hash], references: [pubkey_hash])

  @@map("contract")
}

model Latest {
  hash        String  @id
  user        String
  template_id String?
  is_workflow Boolean @default(false)
  User        Users   @relation(fields: [user], references: [address])
  // Revision         Revision[]

  @@map("latest")
}

model Revision {
  pubkey_hash     String   @id
  nonce           String?
  file_hash       String?
  shared          String[]
  contract        String[]
  previous        String?
  children        String?
  local_timestamp String?
  revision_type   String?
  has_content     Boolean  @default(false)

  verification_leaves String[]
  // Latest           Latest        @relation(fields: [pubkey_hash], references: [hash])
  // File             File[]
  Signature           Signature[]
  Witness             Witness[]
  Link                Link[]
  // Contract         Contract?
  // FileIndex        FileIndex[]
  AquaForms           AquaForms[]

  @@map("revision")
}

model File {
  file_hash     String @id
  file_location String

  @@map("file")
}

model FileIndex {
  file_hash   String   @id
  pubkey_hash String[]

  @@map("file_index")
}

model FileName {
  pubkey_hash String @id
  file_name   String

  @@map("file_name")
}

model Link {
  hash                              String   @id
  link_type                         String?
  link_require_indepth_verification Boolean?
  link_verification_hashes          String[]
  reference_count                   Int?
  link_file_hashes                  String[]
  Revision                          Revision @relation(fields: [hash], references: [pubkey_hash])
  // FileIndex                           FileIndex?    @relation(fields: [hash], references: [hash])

  @@map("link")
}

model Signature {
  hash                     String   @id
  signature_digest         String?
  signature_wallet_address String?
  signature_public_key     String?
  signature_type           String?
  reference_count          Int?
  Revision                 Revision @relation(fields: [hash], references: [pubkey_hash])

  @@map("signature")
}

model Witness {
  hash                String        @id
  Witness_merkle_root String?
  reference_count     Int?
  Revision            Revision      @relation(fields: [hash], references: [pubkey_hash])
  WitnessEvent        WitnessEvent? @relation(fields: [Witness_merkle_root], references: [Witness_merkle_root])
  // MerkleNodes               MerkleNodes[]

  @@map("witness")
}

model WitnessEvent {
  Witness_merkle_root            String    @id
  Witness_timestamp              String?
  Witness_network                String?
  Witness_smart_contract_address String?
  Witness_transaction_hash       String?
  Witness_sender_account_address String?
  Witness                        Witness[]
  // MerkleNodes                        MerkleNodes[]

  @@map("witness_event")
}

model AquaForms {
  id              String   @id @default(uuid())
  hash            String
  key             String?
  value           Json?
  type            String?
  reference_count Int?
  Revision        Revision @relation(fields: [hash], references: [pubkey_hash])

  @@map("aqua_forms")
}

model MerkleNodes {
  node_hash        String   @id
  parent_hash      String?
  height           Int?
  is_leaf          Boolean?
  left_child_hash  String?
  right_child_hash String?
  // Witness              Witness?      @relation(fields: [node_hash], references: [hash])
  // WitnessEvent         WitnessEvent? @relation(fields: [node_hash], references: [Witness_merkle_root])
  // ParentNode           MerkleNodes?  @relation("MerkleNodesRelation", fields: [parent_hash], references: [node_hash])
  // LeftChildNode        MerkleNodes?  @relation("MerkleNodesLeftChildRelation", fields: [left_child_hash], references: [node_hash])
  // RightChildNode       MerkleNodes?  @relation("MerkleNodesRightChildRelation", fields: [right_child_hash], references: [node_hash])

  @@map("merkle_nodes")
}

model Settings {
  user_pub_key             String  @id
  cli_pub_key              String?
  cli_priv_key             String?
  alchemy_key              String  @default("ZaQtnup49WhU7fxrujVpkFdRz4JaFRtZ")
  witness_network          String?
  witness_contract_address String?
  theme                    String?
  User                     Users   @relation(fields: [user_pub_key], references: [address])

  @@map("settings")
}

model Notifications {
  id String @id @default(uuid())

  sender   String
  receiver String
  content  String
  is_read  Boolean @default(false)

  created_on DateTime @default(now())

  navigate_to String?

  @@map("notifications")
}
