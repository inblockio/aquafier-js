{
  "result": [
    {
      "scriptId": "316",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/server.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 11198,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "buildServer",
          "ranges": [
            {
              "startOffset": 901,
              "endOffset": 3181,
              "count": 1
            },
            {
              "startOffset": 1255,
              "endOffset": 1317,
              "count": 0
            },
            {
              "startOffset": 1601,
              "endOffset": 1996,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1576,
              "endOffset": 1599,
              "count": 10
            }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "318",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/user.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 82736,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "userController",
          "ranges": [
            {
              "startOffset": 268,
              "endOffset": 24887,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 347,
              "endOffset": 1221,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1297,
              "endOffset": 3335,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3378,
              "endOffset": 4022,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4066,
              "endOffset": 5812,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5855,
              "endOffset": 6648,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 6694,
              "endOffset": 7311,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7390,
              "endOffset": 9783,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 9837,
              "endOffset": 11418,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 11481,
              "endOffset": 24883,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "319",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/auth.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 19947,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "authController",
          "ranges": [
            {
              "startOffset": 164,
              "endOffset": 5962,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 260,
              "endOffset": 1433,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1480,
              "endOffset": 2073,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 2118,
              "endOffset": 5958,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "320",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/index.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 1191,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "indexController",
          "ranges": [
            {
              "startOffset": 15,
              "endOffset": 170,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 100,
              "endOffset": 166,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "321",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/version.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 2570,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "versionController",
          "ranges": [
            {
              "startOffset": 15,
              "endOffset": 573,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 87,
              "endOffset": 569,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "322",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/files.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 29660,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "filesController",
          "ranges": [
            {
              "startOffset": 188,
              "endOffset": 8263,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 298,
              "endOffset": 3037,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3073,
              "endOffset": 4884,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4920,
              "endOffset": 8259,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "323",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/explorer.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 163001,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "explorerController",
          "ranges": [
            {
              "startOffset": 647,
              "endOffset": 50372,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 731,
              "endOffset": 10216,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 10266,
              "endOffset": 19506,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 19576,
              "endOffset": 21075,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 21114,
              "endOffset": 32046,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 32091,
              "endOffset": 50368,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "324",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/verify.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 21983,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "verifyController",
          "ranges": [
            {
              "startOffset": 105,
              "endOffset": 6106,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 255,
              "endOffset": 1365,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 1401,
              "endOffset": 3508,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3623,
              "endOffset": 6102,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "325",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/file_utils.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 13246,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getFileUploadDirectory",
          "ranges": [
            {
              "startOffset": 93,
              "endOffset": 332,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "streamToBuffer",
          "ranges": [
            {
              "startOffset": 357,
              "endOffset": 613,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "extensions",
          "ranges": [
            {
              "startOffset": 634,
              "endOffset": 2018,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "isTextFile",
          "ranges": [
            {
              "startOffset": 2107,
              "endOffset": 2217,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "isTextFileProbability",
          "ranges": [
            {
              "startOffset": 2249,
              "endOffset": 3334,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "326",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/revisions.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 70993,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "revisionsController",
          "ranges": [
            {
              "startOffset": 427,
              "endOffset": 21940,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 548,
              "endOffset": 2757,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 2808,
              "endOffset": 12133,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 12164,
              "endOffset": 21936,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "327",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/share.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 43911,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "shareController",
          "ranges": [
            {
              "startOffset": 333,
              "endOffset": 11958,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 483,
              "endOffset": 3791,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 3826,
              "endOffset": 5760,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 5799,
              "endOffset": 7508,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 7555,
              "endOffset": 8548,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 8590,
              "endOffset": 10662,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 10787,
              "endOffset": 11954,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "328",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/test_routes/fetch-chain.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 9075,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "testRoutes",
          "ranges": [
            {
              "startOffset": 123,
              "endOffset": 2522,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 265,
              "endOffset": 2490,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "330",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/database/db.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 817,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "331",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/api_utils.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 3210,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getHost",
          "ranges": [
            {
              "startOffset": 49,
              "endOffset": 102,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getPort",
          "ranges": [
            {
              "startOffset": 120,
              "endOffset": 174,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "fetchEnsName",
          "ranges": [
            {
              "startOffset": 197,
              "endOffset": 689,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "332",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/middleware/auth_middleware.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 5088,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "authenticate",
          "ranges": [
            {
              "startOffset": 48,
              "endOffset": 703,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "authMiddleware",
          "ranges": [
            {
              "startOffset": 751,
              "endOffset": 1227,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "333",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/auth_utils.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 4200,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "verifySiweMessage",
          "ranges": [
            {
              "startOffset": 43,
              "endOffset": 1131,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "338",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/revisions_utils.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 119607,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "fetchAquatreeFoUser",
          "ranges": [
            {
              "startOffset": 154,
              "endOffset": 777,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "saveAquaTree",
          "ranges": [
            {
              "startOffset": 785,
              "endOffset": 11121,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "fetchAquaTreeWithForwardRevisions",
          "ranges": [
            {
              "startOffset": 11129,
              "endOffset": 12114,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "estimateStringFileSize",
          "ranges": [
            {
              "startOffset": 12376,
              "endOffset": 12958,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "createAquaTreeFromRevisions",
          "ranges": [
            {
              "startOffset": 12966,
              "endOffset": 24133,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "findAquaTreeRevision",
          "ranges": [
            {
              "startOffset": 24141,
              "endOffset": 24982,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "FetchRevisionInfo",
          "ranges": [
            {
              "startOffset": 24990,
              "endOffset": 26267,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "readFileContent",
          "ranges": [
            {
              "startOffset": 26299,
              "endOffset": 26647,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "isTextFile",
          "ranges": [
            {
              "startOffset": 26739,
              "endOffset": 28312,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "getGenesisHash",
          "ranges": [
            {
              "startOffset": 28321,
              "endOffset": 28869,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateAquaTree",
          "ranges": [
            {
              "startOffset": 29075,
              "endOffset": 34570,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "readFileAsText",
          "ranges": [
            {
              "startOffset": 34723,
              "endOffset": 35207,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "readFileAsArrayBuffer",
          "ranges": [
            {
              "startOffset": 35372,
              "endOffset": 35870,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "361",
      "url": "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/quick_utils.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 61688,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "_findAquaTreeRevision",
          "ranges": [
            {
              "startOffset": 311,
              "endOffset": 2592,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "_FetchRevisionInfo",
          "ranges": [
            {
              "startOffset": 2877,
              "endOffset": 3987,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "_estimateStringFileSize",
          "ranges": [
            {
              "startOffset": 4242,
              "endOffset": 4387,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "fetchCompleteRevisionChain",
          "ranges": [
            {
              "startOffset": 5024,
              "endOffset": 19104,
              "count": 0
            }
          ],
          "isBlockCoverage": false
        }
      ]
    }
  ],
  "timestamp": 25803.367323,
  "source-map-cache": {
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/server.ts": {
      "lineLengths": [
        17,
        30,
        33,
        33,
        48,
        50,
        44,
        25,
        21,
        48,
        48,
        50,
        54,
        50,
        56,
        55,
        60,
        58,
        50,
        51,
        24,
        33,
        20,
        52,
        30,
        115,
        37,
        37,
        54,
        5,
        32,
        46,
        31,
        28,
        33,
        111,
        36,
        36,
        36,
        36,
        36,
        36,
        42,
        41,
        37,
        36,
        42,
        61,
        53,
        86,
        7,
        21,
        37,
        25,
        74,
        7,
        77,
        50,
        26,
        40,
        17,
        95,
        9,
        7,
        27,
        37,
        37,
        38,
        40,
        38,
        41,
        39,
        42,
        38,
        33,
        19,
        1,
        27,
        7988
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/server.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/server.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "\n// Import Fastify\nimport Fastify from 'fastify';\nimport cors from '@fastify/cors';\nimport * as dotenv from 'dotenv';\n// Install first: npm install @fastify/multipart\nimport fastifyMultipart from '@fastify/multipart';\nimport fastifyStatic from '@fastify/static';\nimport * as fs from \"fs\"\n\n// Import controllers\nimport userController from './controllers/user';\nimport authController from './controllers/auth';\nimport indexController from './controllers/index';\nimport versionController from './controllers/version';\nimport filesController from './controllers/files';\nimport explorerController from './controllers/explorer';\nimport verifyController from './controllers/verify.js';\nimport { getFileUploadDirectory } from './utils/file_utils';\nimport revisionsController from './controllers/revisions';\nimport shareController from './controllers/share';\nimport testRoutes from './test_routes/fetch-chain';\n\n\nfunction buildServer() {\n    // Load environment variables\n    dotenv.config();\n\n    // Get the equivalent of __dirname in ES modules\n\n    // Define upload directory\n    const UPLOAD_DIR = getFileUploadDirectory();  //process.env.UPLOAD_DIR ||  path.join(__dirname, '../../media/');\n\n    // Ensure upload directory exists\n    if (!fs.existsSync(UPLOAD_DIR)) {\n        fs.mkdirSync(UPLOAD_DIR, { recursive: true });\n    }\n\n    // Create a Fastify instance\n    const fastify = Fastify({ logger: true });\n\n\n    // Register the CORS plugin\n    fastify.register(cors, {\n        // Configure CORS options\n        origin: process.env.ALLOWED_CORS ? process.env.ALLOWED_CORS.split(',').map(origin => origin.trim()) : [\n            'http://localhost:5173',\n            'http://127.0.0.1:5173',\n            'http://localhost:3000',\n            'http://127.0.0.1:3000',\n            'http://localhost:3600',\n            'http://127.0.0.1:3600',\n            'https://aquafier.inblock.io',\n            'http://aquafier.inblock.io',\n            'https://dev.inblock.io',\n            'http://dev.inblock.io',\n        ], // Allow your React app origins\n        methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n        credentials: true, // Allow cookies if needed\n        allowedHeaders: ['Content-Type', 'Authorization', 'nonce', 'metamask_address']\n    });\n\n    // Static handler\n    fastify.register(fastifyStatic, {\n        root: UPLOAD_DIR,\n        prefix: '/uploads/' // This will be the URL prefix to access files\n    });\n\n    // Make sure you have the formbody parser plugin installed and registered\n    fastify.register(import('@fastify/formbody'));\n\n    // Register the plugin\n    fastify.register(fastifyMultipart, {\n        limits: {\n            fileSize: 200 * 1024 * 1024 // 200MB - Adding this here as well for early rejection\n        }\n    });\n\n\n\n    // Register controllers\n    fastify.register(authController);\n    fastify.register(userController);\n    fastify.register(indexController);\n    fastify.register(versionController);\n    fastify.register(filesController);\n    fastify.register(explorerController);\n    fastify.register(verifyController);\n    fastify.register(revisionsController);\n    fastify.register(shareController);\n    fastify.register(testRoutes);\n\n    return fastify\n\n}\n\n\nexport default buildServer;"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/user.ts": {
      "lineLengths": [
        38,
        40,
        59,
        50,
        61,
        55,
        65,
        43,
        28,
        47,
        73,
        98,
        9,
        61,
        35,
        11,
        30,
        91,
        9,
        34,
        35,
        20,
        33,
        14,
        19,
        35,
        13,
        11,
        70,
        7,
        34,
        65,
        43,
        28,
        47,
        73,
        98,
        9,
        61,
        35,
        11,
        30,
        91,
        9,
        33,
        39,
        55,
        20,
        26,
        36,
        39,
        17,
        13,
        11,
        81,
        23,
        36,
        45,
        34,
        42,
        19,
        13,
        9,
        48,
        67,
        27,
        30,
        67,
        9,
        22,
        39,
        24,
        37,
        18,
        23,
        37,
        17,
        15,
        41,
        30,
        28,
        15,
        9,
        37,
        121,
        27,
        24,
        11,
        7,
        67,
        32,
        52,
        92,
        9,
        34,
        13,
        65,
        24,
        40,
        17,
        15,
        80,
        9,
        19,
        85,
        9,
        7,
        68,
        32,
        52,
        92,
        9,
        34,
        61,
        62,
        67,
        60,
        66,
        66,
        77,
        73,
        29,
        81,
        61,
        13,
        77,
        55,
        13,
        127,
        9,
        13,
        52,
        23,
        69,
        77,
        41,
        33,
        17,
        15,
        9,
        19,
        85,
        9,
        7,
        67,
        32,
        52,
        92,
        9,
        34,
        54,
        13,
        52,
        24,
        51,
        18,
        23,
        62,
        70,
        17,
        15,
        9,
        19,
        85,
        9,
        7,
        70,
        32,
        52,
        92,
        9,
        34,
        54,
        13,
        52,
        24,
        51,
        18,
        15,
        9,
        19,
        85,
        9,
        7,
        26,
        76,
        47,
        73,
        98,
        9,
        13,
        65,
        32,
        15,
        27,
        94,
        13,
        42,
        64,
        92,
        13,
        64,
        24,
        49,
        17,
        15,
        39,
        35,
        50,
        33,
        36,
        37,
        47,
        35,
        91,
        18,
        46,
        37,
        19,
        24,
        34,
        37,
        18,
        13,
        18,
        33,
        37,
        63,
        28,
        49,
        21,
        19,
        31,
        54,
        17,
        24,
        34,
        27,
        40,
        41,
        21,
        18,
        13,
        9,
        23,
        60,
        94,
        9,
        7,
        78,
        47,
        73,
        98,
        9,
        13,
        45,
        58,
        65,
        32,
        15,
        27,
        94,
        13,
        42,
        64,
        92,
        13,
        42,
        24,
        49,
        18,
        23,
        32,
        49,
        17,
        15,
        26,
        39,
        24,
        44,
        18,
        23,
        38,
        17,
        15,
        9,
        23,
        60,
        94,
        9,
        7,
        26,
        60,
        47,
        73,
        116,
        9,
        13,
        49,
        65,
        32,
        15,
        27,
        94,
        13,
        42,
        64,
        92,
        13,
        48,
        84,
        53,
        71,
        74,
        66,
        28,
        38,
        54,
        47,
        25,
        22,
        29,
        41,
        21,
        19,
        81,
        83,
        107,
        74,
        44,
        48,
        19,
        54,
        61,
        48,
        51,
        32,
        35,
        50,
        29,
        25,
        23,
        54,
        17,
        67,
        93,
        48,
        49,
        32,
        35,
        50,
        29,
        25,
        23,
        59,
        17,
        64,
        48,
        46,
        32,
        35,
        50,
        29,
        25,
        23,
        56,
        17,
        69,
        48,
        51,
        32,
        35,
        50,
        29,
        25,
        23,
        61,
        17,
        61,
        70,
        65,
        31,
        34,
        57,
        79,
        28,
        25,
        32,
        37,
        24,
        22,
        80,
        101,
        67,
        28,
        31,
        102,
        25,
        22,
        29,
        32,
        21,
        19,
        105,
        49,
        83,
        109,
        65,
        61,
        50,
        38,
        60,
        87,
        25,
        22,
        89,
        48,
        54,
        92,
        17,
        42,
        70,
        72,
        44,
        76,
        72,
        32,
        33,
        46,
        29,
        26,
        33,
        37,
        44,
        49,
        25,
        23,
        107,
        77,
        51,
        51,
        57,
        57,
        75,
        61,
        67,
        65,
        83,
        67,
        54,
        76,
        29,
        25,
        49,
        99,
        76,
        67,
        102,
        54,
        76,
        79,
        29,
        25,
        51,
        75,
        70,
        57,
        79,
        32,
        28,
        21,
        107,
        107,
        83,
        57,
        69,
        55,
        36,
        37,
        59,
        33,
        30,
        35,
        50,
        48,
        33,
        29,
        27,
        68,
        58,
        54,
        40,
        48,
        74,
        37,
        34,
        39,
        54,
        52,
        37,
        33,
        31,
        25,
        21,
        126,
        57,
        128,
        50,
        55,
        36,
        37,
        59,
        33,
        29,
        27,
        57,
        58,
        100,
        111,
        54,
        40,
        48,
        60,
        37,
        33,
        31,
        25,
        21,
        17,
        101,
        48,
        50,
        32,
        42,
        50,
        29,
        25,
        23,
        60,
        17,
        63,
        83,
        73,
        15,
        61,
        45,
        32,
        15,
        41,
        30,
        70,
        15,
        9,
        23,
        62,
        41,
        31,
        74,
        77,
        15,
        9,
        7,
        1,
        57848
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/user.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/user.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "import { FastifyInstance, FastifyReply, FastifyRequest } from 'fastify';\n// import { SiweMessage } from 'siwe';\nimport { prisma } from '../database/db';\n// import { Settings } from '@prisma/client';\nimport { SettingsRequest, UserAttestationAddressesRequest } from '../models/request_models';\n// import { verifySiweMessage } from '../utils/auth_utils';\nimport { fetchEnsName } from '../utils/api_utils';\nimport { authenticate, AuthenticatedRequest } from '../middleware/auth_middleware';\nimport { UserAttestationAddresses } from '@prisma/client';\n\nexport default async function userController(fastify: FastifyInstance) {\n\n    fastify.put('/user_ens/:address', async (request, reply) => {\n\n        const { address } = request.params as { address: string };\n\n        // Add authorization\n        const nonce = request.headers['nonce'];\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce: nonce }\n        });\n        if (session == null) {\n            return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n        }\n\n        const addr = request.body as { name: string };\n\n\n        await prisma.users.update({\n            where: {\n                address: address,\n            },\n            data: {\n                ens_name: addr.name\n            }\n        });\n\n        return reply.code(200).send({ success: true, message: \"ok\" });\n\n\n    })\n    // fetch ens name if it exist \n    fastify.get('/user_ens/:address', async (request, reply) => {\n        const { address } = request.params as { address: string };\n\n        // Add authorization\n        const nonce = request.headers['nonce'];\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce: nonce }\n        });\n        if (session == null) {\n            return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n        }\n\n        // check in out db first \n        // check if user exist in users\n        const userData = await prisma.users.findFirst({\n            where: {\n                address: {\n                    equals: address,\n                    mode: 'insensitive'\n                }\n            }\n        });\n\n        console.log(`=> address ${address} \\n Data ${JSON.stringify(userData)}`)\n        if (userData) {\n            if (userData.ens_name) {\n                return reply.code(200).send({\n                    success: true,\n                    ens: userData.ens_name\n                });\n            }\n        }\n\n        // Check if we should attempt ENS lookup\n        const infuraProjectId = process.env.VITE_INFURA_PROJECT_ID;\n\n        let ensName = null\n        if (infuraProjectId) {\n            ensName = await fetchEnsName(address, infuraProjectId)\n        }\n        if (ensName) {\n            await prisma.users.update({\n                where: {\n                    address: address,\n                },\n                data: {\n                    ens_name: ensName\n                }\n            });\n\n            return reply.code(200).send({\n                success: true,\n                ens: ensName\n            });\n        }\n\n\n        return reply.code(200).send({\n            message: `ens not in system and ${infuraProjectId ? 'fetch ens failed ' : 'infura key not found in system'}`,\n            success: false,\n            ens: address\n        });\n    });\n\n    fastify.get('/attestation_address', async (request: FastifyRequest, reply: FastifyReply) => {\n\n        // Authenticate the user\n        if (!(await authenticate(request, reply))) {\n            return; // The authenticate function already sent the appropriate error response\n        }\n\n        const user = (request as AuthenticatedRequest).user;\n\n        try {\n            let data = prisma.userAttestationAddresses.findMany({\n                where: {\n                    owner: user?.address!!\n                }\n            })\n            return reply.code(200).send({ success: true, message: \"ok\", data });\n\n        } catch (e: any) {\n            return reply.code(500).send({ success: true, message: `error : ${e}`, });\n\n        }\n\n\n    })    \n\n    fastify.post('/attestation_address', async (request, reply) => {\n        // Authenticate the user\n        if (!(await authenticate(request, reply))) {\n            return; // The authenticate function already sent the appropriate error response\n        }\n\n        const user = (request as AuthenticatedRequest).user;\n\n        const userAttestationAddressesRequest = request.body as UserAttestationAddressesRequest;\n\n        if (\n            userAttestationAddressesRequest.address == null ||\n            userAttestationAddressesRequest.address == undefined ||\n            userAttestationAddressesRequest.address == \"\" ||\n            userAttestationAddressesRequest.trust_level == null ||\n            userAttestationAddressesRequest.trust_level == null ||\n            typeof userAttestationAddressesRequest.trust_level != \"number\" ||\n            typeof userAttestationAddressesRequest.address != \"string\"\n        ) {\n            let errMssg = \"\"\n            if (typeof userAttestationAddressesRequest.trust_level != \"number\") {\n                errMssg = \"trust_level shuld be an integer.\"\n            }\n            if (typeof userAttestationAddressesRequest.address != \"string\") {\n                errMssg = \"address shuld be a string.\"\n            }\n            return reply.code(412).send({ success: true, message: `error  address and trust level are required ${errMssg}`, });\n\n        }\n        try {\n\n            prisma.userAttestationAddresses.create({\n                data: {\n                    address: userAttestationAddressesRequest.address,\n                    trust_level: userAttestationAddressesRequest.trust_level,\n                    owner: user?.address!!,\n                    id: undefined\n                }\n            })\n        } catch (e: any) {\n            return reply.code(500).send({ success: true, message: `error : ${e}`, });\n\n        }\n\n\n    })\n\n    fastify.put('/attestation_address', async (request, reply) => {\n        // Authenticate the user\n        if (!(await authenticate(request, reply))) {\n            return; // The authenticate function already sent the appropriate error response\n        }\n\n        const user = (request as AuthenticatedRequest).user;\n\n        const userAttestationAddresses = request.body as UserAttestationAddresses;\n\n        try {\n\n            prisma.userAttestationAddresses.update({\n                where: {\n                    id: userAttestationAddresses.id\n                },\n                data: {\n                    address: userAttestationAddresses.address,\n                    trust_level: userAttestationAddresses.trust_level,\n                }\n            })\n        } catch (e: any) {\n            return reply.code(500).send({ success: true, message: `error : ${e}`, });\n\n        }\n\n    })\n\n    fastify.delete('/attestation_address', async (request, reply) => {\n        // Authenticate the user\n        if (!(await authenticate(request, reply))) {\n            return; // The authenticate function already sent the appropriate error response\n        }\n\n        const user = (request as AuthenticatedRequest).user;\n\n        const userAttestationAddresses = request.body as UserAttestationAddresses;\n\n        try {\n\n            prisma.userAttestationAddresses.delete({\n                where: {\n                    id: userAttestationAddresses.id\n                },\n            })\n        } catch (e: any) {\n            return reply.code(500).send({ success: true, message: `error : ${e}`, });\n\n        }\n\n\n\n    })\n\n\n    // get current session\n    fastify.get('/explorer_fetch_user_settings', async (request, reply) => {\n        const nonce = request.headers['nonce'];\n\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        try {\n\n\n            const session = await prisma.siweSession.findUnique({\n                where: { nonce }\n            });\n\n            if (!session) {\n                return reply.code(404).send({ success: false, message: \"Session not found\" });\n            }\n\n            // Check if session is expired\n            if (new Date(session.expirationTime!!) < new Date()) {\n                return reply.code(401).send({ success: false, message: \"Session expired\" });\n            }\n\n            let settingsData = await prisma.settings.findFirst({\n                where: {\n                    user_pub_key: session.address\n                }\n            })\n\n            if (settingsData == null) {\n                let defaultData = {\n                    user_pub_key: session.address,\n                    ens_name: \"\",\n                    cli_pub_key: \"\",\n                    cli_priv_key: \"\",\n                    witness_network: \"sepolia\",\n                    theme: \"light\",\n                    witness_contract_address: '0x45f59310ADD88E6d23ca58A0Fa7A55BEE6d2a611',\n                }\n                await prisma.settings.create({\n                    data: defaultData\n                })\n                return {\n                    success: true,\n                    data: defaultData\n                };\n\n            } else {\n                let ensName = \"\"\n                // get ens from user \n                const userData = await prisma.users.findFirst({\n                    where: {\n                        address: session.address,\n                    }\n                })\n                if (userData) {\n                    ensName = userData.ens_name ?? \"\"\n                }\n                return {\n                    success: true,\n                    data: {\n                        ...settingsData,\n                        ens_name: ensName\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"Error fetching session:\", error);\n            return reply.code(500).send({ success: false, message: \"Internal server error\" });\n        }\n\n    });\n\n    fastify.post('/explorer_update_user_settings', async (request, reply) => {\n\n        const nonce = request.headers['nonce'];\n\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        try {\n            const settingsPar = request.body as SettingsRequest;\n\n            const { ens_name, ...settings } = settingsPar;\n\n            const session = await prisma.siweSession.findUnique({\n                where: { nonce }\n            });\n\n            if (!session) {\n                return reply.code(404).send({ success: false, message: \"Session not found\" });\n            }\n\n            // Check if session is expired\n            if (new Date(session.expirationTime!!) < new Date()) {\n                return reply.code(401).send({ success: false, message: \"Session expired\" });\n            }\n\n            await prisma.settings.update({\n                where: {\n                    user_pub_key: session.address\n                },\n                data: {\n                    ...settings,\n                    user_pub_key: session.address\n                }\n            })\n\n            // update ens \n            await prisma.users.update({\n                where: {\n                    address: session.address\n                },\n                data: {\n                    ens_name: ens_name\n                }\n            })\n\n        } catch (error) {\n            console.error(\"Error fetching session:\", error);\n            return reply.code(500).send({ success: false, message: \"Internal server error\" });\n        }\n    });\n\n    // Clear all user data\n    fastify.delete('/user_data', async (request, reply) => {\n        const nonce = request.headers['nonce'];\n\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ success: false, message: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        try {\n            // Verify session exists and is valid\n            const session = await prisma.siweSession.findUnique({\n                where: { nonce }\n            });\n\n            if (!session) {\n                return reply.code(404).send({ success: false, message: 'Session not found' });\n            }\n\n            // Check if session is expired\n            if (new Date(session.expirationTime!!) < new Date()) {\n                return reply.code(401).send({ success: false, message: 'Session expired' });\n            }\n\n            const userAddress = session.address;\n\n            // Start a transaction to ensure all operations succeed or fail together\n            await prisma.$transaction(async (tx) => {\n                console.log('Starting user data deletion transaction');\n\n                // First, identify all revisions associated with this user\n                const userRevisions = await tx.revision.findMany({\n                    where: {\n                        pubkey_hash: {\n                            contains: session.address,\n                            mode: 'insensitive'\n                        }\n                    },\n                    select: {\n                        pubkey_hash: true\n                    }\n                });\n\n                const revisionHashes = userRevisions.map(rev => rev.pubkey_hash);\n                console.log(`Found ${revisionHashes.length} revisions to process`);\n\n                // Step 1: Delete dependent records in the correct order to respect foreign key constraints\n\n                // 1a. Delete latest entries (no foreign key dependencies)\n                await tx.latest.deleteMany({\n                    where: { user: userAddress }\n                });\n                console.log('Deleted latest entries');\n\n                // 1b. Delete AquaForms (depends on Revision)\n                if (revisionHashes.length > 0) {\n                    await tx.aquaForms.deleteMany({\n                        where: {\n                            hash: {\n                                in: revisionHashes\n                            }\n                        }\n                    });\n                    console.log('Deleted aqua forms');\n                }\n\n                // 1c. Delete Witness records (depends on Revision)\n                // We need to handle this first because Witness has a foreign key to Revision\n                if (revisionHashes.length > 0) {\n                    await tx.witness.deleteMany({\n                        where: {\n                            hash: {\n                                in: revisionHashes\n                            }\n                        }\n                    });\n                    console.log('Deleted witness records');\n                }\n\n                // 1d. Delete Link records (depends on Revision)\n                if (revisionHashes.length > 0) {\n                    await tx.link.deleteMany({\n                        where: {\n                            hash: {\n                                in: revisionHashes\n                            }\n                        }\n                    });\n                    console.log('Deleted link records');\n                }\n\n                // 1e. Delete Signature records (depends on Revision)\n                if (revisionHashes.length > 0) {\n                    await tx.signature.deleteMany({\n                        where: {\n                            hash: {\n                                in: revisionHashes\n                            }\n                        }\n                    });\n                    console.log('Deleted signature records');\n                }\n\n                // First, get the list of files to be deleted\n                // This works only if the file is uploaded by the user\n                // const filesToDelete = await tx.file.findMany({\n                //     where: {\n                //         hash: {\n                //             contains: session.address,\n                //             mode: 'insensitive' // Case-insensitive matching\n                //         }\n                //     },\n                //     select: {\n                //         hash: true\n                //     }\n                // });\n\n                // Start from file index to find files associated with this user\n                // The hash array in FileIndex contains strings that might include the user's address\n                const filesToDelete = await tx.fileIndex.findMany({\n                    where: {\n                        hash: {\n                            hasSome: [session.address] // Look for exact match of address in the array\n                        }\n                    },\n                    select: {\n                        id: true\n                    }\n                });\n\n                // If no exact matches, try a more flexible search with case-insensitive partial matching\n                if (filesToDelete.length === 0) {\n                    console.log('No exact matches found, trying partial matching');\n                    // This is a more complex query to find any FileIndex where any element in the hash array\n                    // contains the user's address as a substring\n                    const rawQuery = await prisma.$queryRaw`\n                        SELECT id FROM file_index \n                        WHERE EXISTS (\n                            SELECT 1 FROM unnest(hash) AS h \n                            WHERE LOWER(h) LIKE LOWER('%' || ${session.address} || '%')\n                        )\n                    `;\n\n                    // Convert raw query results to the same format as our previous query\n                    const rawResults = rawQuery as { id: string }[];\n                    filesToDelete.push(...rawResults);\n                    console.log(`Found ${rawResults.length} matches with partial matching`);\n                }\n\n                // Extract the file hashes\n                const fileHashes = filesToDelete.map(file => file.id);\n\n                // Delete file indexes associated with the deleted files\n                if (fileHashes.length > 0) {\n\n                    // First, get all file indexes that need to be processed\n                    const allFileIndexes = await tx.fileIndex.findMany({\n                        where: {\n                            id: {\n                                in: fileHashes\n                            }\n                        },\n                        select: {\n                            id: true,\n                            file_hash: true,\n                            reference_count: true\n                        }\n                    });\n\n                    console.log(`All file indexes to process: ${JSON.stringify(allFileIndexes, null, 4)}`);\n\n                    // Track which file indexes to delete and which to update\n                    const fileIndexesToDelete = [];\n                    const fileIndexesToUpdate = [];\n                    const fileHashesToUpdate = new Set();\n                    const fileHashesToDelete = new Set();\n\n                    // Process each file index based on its reference count\n                    for (const fileIndex of allFileIndexes) {\n                        const refCount = fileIndex.reference_count;\n\n                        if (refCount === null || refCount <= 1) {\n                            // If reference count is null or ≤ 1, mark for deletion\n                            fileIndexesToDelete.push(fileIndex.id);\n                            if (fileIndex.file_hash) {\n                                fileHashesToDelete.add(fileIndex.file_hash);\n                            }\n                        } else if (refCount >= 2) {\n                            // If reference count is exactly 2, it will become 1 after decrementing\n                            // So we'll mark it for both update AND deletion\n                            fileIndexesToUpdate.push(fileIndex.id);\n                            // fileIndexesToDelete.push(fileIndex.id); // Will be deleted after update\n                            if (fileIndex.file_hash) {\n                                fileHashesToUpdate.add(fileIndex.file_hash);\n                                // fileHashesToDelete.add(fileIndex.file_hash);\n                            }\n                        }\n                        // else if (refCount > 2) {\n                        //     // If reference count > 2, just decrement it\n                        //     fileIndexesToUpdate.push(fileIndex.id);\n                        //     if (fileIndex.file_hash) {\n                        //         fileHashesToUpdate.add(fileIndex.file_hash);\n                        //     }\n                        // }\n                    }\n\n                    console.log(`File indexes to update: ${JSON.stringify(fileIndexesToUpdate, null, 4)}`);\n                    console.log(`File indexes to delete: ${JSON.stringify(fileIndexesToDelete, null, 4)}`);\n\n                    // Step 1: Update reference counts for files that need updating\n                    if (fileIndexesToUpdate.length > 0) {\n                        // Decrement reference count for file indexes\n                        await tx.fileIndex.updateMany({\n                            where: {\n                                id: {\n                                    in: fileIndexesToUpdate\n                                }\n                            },\n                            data: {\n                                reference_count: {\n                                    decrement: 1\n                                }\n                            }\n                        });\n\n                        // Update files linked to these file indexes\n                        if (fileHashesToUpdate.size > 0) {\n                            await tx.file.updateMany({\n                                where: {\n                                    file_hash: {\n                                        in: Array.from(fileHashesToUpdate) as string[]\n                                    }\n                                },\n                                data: {\n                                    reference_count: {\n                                        decrement: 1\n                                    }\n                                }\n                            });\n                        }\n                    }\n\n                    // Step 2: Delete file indexes with reference count <= 1 (including those we just decremented from 2 to 1)\n                    if (fileIndexesToDelete.length > 0) {\n                        console.log(`File indexes to delete after processing: ${JSON.stringify(fileIndexesToDelete, null, 4)}`);\n\n                        // Delete the file indexes\n                        await tx.fileIndex.deleteMany({\n                            where: {\n                                id: {\n                                    in: fileIndexesToDelete\n                                }\n                            }\n                        });\n\n                        // Delete the files if they exist\n                        if (fileHashesToDelete.size > 0) {\n                            const uniqueFileHashes = Array.from(fileHashesToDelete).filter(Boolean);\n                            console.log(`File hashes to delete: ${JSON.stringify(uniqueFileHashes, null, 4)}`);\n\n                            await tx.file.deleteMany({\n                                where: {\n                                    file_hash: {\n                                        in: uniqueFileHashes as string[]\n                                    }\n                                }\n                            });\n                        }\n                    }\n\n                }\n                // 1f. Now that all dependent records are deleted, we can delete the Revision records\n                if (revisionHashes.length > 0) {\n                    await tx.revision.deleteMany({\n                        where: {\n                            pubkey_hash: {\n                                in: revisionHashes\n                            }\n                        }\n                    });\n                    console.log('Deleted revision records');\n                }\n\n                // Keep the user record but delete related data\n                // This is to maintain the user's account while clearing their data\n                console.log('User data deletion completed successfully');\n            });\n\n            // Delete the session as well (similar to logout)\n            await prisma.siweSession.delete({\n                where: { nonce }\n            });\n\n            return reply.code(200).send({\n                success: true,\n                message: 'All user data has been cleared successfully'\n            });\n        } catch (error) {\n            console.error('Error clearing user data:', error);\n            return reply.code(500).send({\n                success: false,\n                message: 'Internal server error while clearing user data',\n                error: error instanceof Error ? error.message : String(error)\n            });\n        }\n    });\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/auth.ts": {
      "lineLengths": [
        40,
        56,
        50,
        55,
        26,
        55,
        48,
        21,
        68,
        9,
        13,
        65,
        32,
        15,
        27,
        94,
        13,
        42,
        64,
        92,
        13,
        20,
        30,
        26,
        45,
        41,
        48,
        59,
        17,
        14,
        9,
        23,
        60,
        94,
        9,
        7,
        12,
        58,
        48,
        21,
        90,
        9,
        13,
        45,
        32,
        15,
        78,
        9,
        23,
        60,
        94,
        9,
        7,
        12,
        56,
        52,
        22,
        55,
        54,
        13,
        52,
        65,
        73,
        66,
        62,
        53,
        42,
        45,
        34,
        24,
        19,
        13,
        47,
        61,
        23,
        46,
        42,
        41,
        100,
        59,
        18,
        15,
        43,
        59,
        24,
        46,
        17,
        15,
        52,
        71,
        35,
        35,
        38,
        84,
        17,
        43,
        27,
        50,
        41,
        21,
        19,
        13,
        18,
        60,
        109,
        42,
        94,
        51,
        36,
        58,
        30,
        35,
        49,
        29,
        27,
        21,
        17,
        13,
        64,
        24,
        50,
        17,
        15,
        39,
        35,
        51,
        36,
        37,
        47,
        35,
        91,
        18,
        46,
        37,
        19,
        13,
        41,
        30,
        21,
        24,
        15,
        9,
        23,
        55,
        37,
        41,
        31,
        21,
        30,
        15,
        9,
        7,
        1,
        13984
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/auth.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/auth.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "import { FastifyInstance, FastifyRequest } from 'fastify';\nimport { prisma } from '../database/db';\nimport { SessionQuery, SiweRequest } from '../models/request_models';\nimport { verifySiweMessage } from '../utils/auth_utils';\nimport { fetchEnsName } from '../utils/api_utils';\n\nexport default async function authController(fastify: FastifyInstance) {\n  // get current session\n  fastify.get('/session', async (request: FastifyRequest<{ Querystring: SessionQuery }>, reply) => {\n    const nonce = request.query.nonce ?? \"\";\n\n    if (!nonce) {\n      return { success: false, message: \"Nonce is required\" };\n    }\n\n    try {\n\n\n      const session = await prisma.siweSession.findUnique({\n        where: { nonce }\n      });\n\n      if (!session) {\n        return reply.code(404).send({ success: false, message: \"Session not found\" });\n      }\n\n      // Check if session is expired\n      if (new Date(session.expirationTime!!) < new Date()) {\n        return reply.code(401).send({ success: false, message: \"Session expired\" });\n      }\n\n      return {\n        success: true,\n        session: {\n          address: session.address,\n          nonce: session.nonce,\n          issued_at: session.issuedAt,\n          expiration_time: session.expirationTime\n        }\n      };\n    } catch (error) {\n      console.error(\"Error fetching session:\", error);\n      return reply.code(500).send({ success: false, message: \"Internal server error\" });\n    }\n  });\n  //logout\n  fastify.delete('/session', async (request: FastifyRequest<{ Querystring: SessionQuery }>, reply) => {\n    const nonce = request.query.nonce ?? \"\";\n\n    if (!nonce) {\n      return reply.code(400).send({ success: false, message: \"Nonce is required\" });\n    }\n\n    try {\n      await prisma.siweSession.delete({\n        where: { nonce }\n      });\n\n      return { success: true, message: \"Session deleted successfully\" };\n    } catch (error) {\n      console.error(\"Error deleting session:\", error);\n      return reply.code(500).send({ success: false, message: \"Internal server error\" });\n    }\n  });\n  // login\n  fastify.post('/session', async (request, reply) => {\n\n    const { message, signature } = request.body as SiweRequest;\n\n    let logs: string[] = [];\n    logs.push(`Received SIWE message: ${message}`);\n    logs.push(`Received signature: ${signature}`);\n\n    try {\n      // Extract Ethereum address from message\n      // const address = verifyMessage(message, signature);\n      const siweData = await verifySiweMessage(message, signature);\n      // logs.push(`Verified Ethereum address: ${address}`);\n\n      if (siweData === undefined || !siweData.isValid) {\n        logs.push(\"Invalid sign in message\")\n        logs.push(siweData.error)\n        return reply.code(400).send({\n          success: true,\n          logs\n        });\n      }\n\n      // Insert session into the database\n      const session = await prisma.siweSession.create({\n        data: {\n          address: siweData.address!!,\n          nonce: siweData.nonce!!,\n          issuedAt: new Date(),\n          // expirationTime: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24-hour expiry\n          expirationTime: siweData.expirationTime\n        },\n      });\n\n\n      // check if user exist in users\n      const userData = await prisma.users.findFirst({\n        where: {\n          address: siweData.address,\n        }\n      })\n\n      // Check if we should attempt ENS lookup\n      const infuraProjectId = process.env.VITE_INFURA_PROJECT_ID;\n\n      if (userData == null) {\n        let ensName = null\n\n        if (infuraProjectId) {\n          ensName = await fetchEnsName(siweData.address!!, infuraProjectId)\n        }\n        await prisma.users.create({\n          data: {\n            address: siweData.address!!,\n            ens_name: ensName\n          }\n        });\n\n      } else {\n        console.log(\"User address exist in system\")\n\n        if (userData.ens_name == null || userData.ens_name == undefined || userData.ens_name == \"\") {\n          if (infuraProjectId) {\n            const ensName = await fetchEnsName(siweData.address!!, infuraProjectId)\n\n            await prisma.users.update({\n              where: {\n                address: siweData.address,\n              },\n              data: {\n                ens_name: ensName\n              }\n            });\n          }\n        }\n      }\n\n\n      let settingsData = await prisma.settings.findFirst({\n        where: {\n          user_pub_key: siweData.address!!\n        }\n      })\n\n      if (settingsData == null) {\n        let defaultData = {\n          user_pub_key: siweData.address!!,\n          cli_pub_key: \"\",\n          cli_priv_key: \"\",\n          witness_network: \"sepolia\",\n          theme: \"light\",\n          witness_contract_address: '0x45f59310ADD88E6d23ca58A0Fa7A55BEE6d2a611',\n        }\n        await prisma.settings.create({\n          data: defaultData\n        })\n      }\n\n\n\n      return reply.code(201).send({\n        success: true,\n        logs,\n        session,\n      });\n    } catch (error) {\n      logs.push(`SIWE sign-in failed: ${error}`);\n      fastify.log.error(error);\n\n      return reply.code(400).send({\n        success: false,\n        logs,\n        session: null,\n      });\n    }\n  });\n\n}\n\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/index.ts": {
      "lineLengths": [
        56,
        21,
        48,
        32,
        7,
        1,
        1020
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/index.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/index.ts"
        ],
        "names": [],
        "mappings": "AAEA,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,eAAe,CAAC,OAAwB;IAElE,iBAAiB;IACjB,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACtC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;AACP,CAAC",
        "sourcesContent": [
          "import { FastifyInstance } from \"fastify\";\n\nexport default async function indexController(fastify: FastifyInstance) {\n\n    // Define a route\n    fastify.get('/', async (request, reply) => {\n        return { status: 'ok' };\n    });\n}"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/version.ts": {
      "lineLengths": [
        58,
        55,
        59,
        65,
        63,
        65,
        65,
        27,
        20,
        21,
        21,
        21,
        11,
        7,
        1,
        1996
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/version.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/version.ts"
        ],
        "names": [],
        "mappings": "AAEA,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,iBAAiB,CAAC,OAAwB;IAGpE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QAC7C,mDAAmD;QACnD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,OAAO,CAAC;QACzD,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,OAAO,CAAC;QACvD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,OAAO,CAAC;QACzD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,OAAO,CAAC;QAEzD,OAAO,KAAK,CAAC,IAAI,CAAC;YACd,OAAO;YACP,QAAQ;YACR,QAAQ;YACR,QAAQ;SACX,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AAIP,CAAC",
        "sourcesContent": [
          "import { FastifyInstance } from \"fastify\";\n\nexport default async function versionController(fastify: FastifyInstance) {\n\n\n    fastify.get(\"/version\", async (request, reply) => {\n        // Read environment variables or use default values\n        const frontend = process.env.FRONTEND_VERSION || \"3.2.0\";\n        const backend = process.env.BACKEND_VERSION || \"3.2.0\";\n        const aquifier = process.env.AQUIFIER_VERSION || \"3.2.0\";\n        const protocol = process.env.PROTOCOL_VERSION || \"3.2.0\";\n\n        return reply.send({\n            backend,\n            frontend,\n            aquifier,\n            protocol,\n        });\n    });\n\n\n\n}"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/files.ts": {
      "lineLengths": [
        40,
        56,
        48,
        25,
        56,
        31,
        63,
        44,
        58,
        31,
        27,
        50,
        82,
        9,
        79,
        47,
        73,
        98,
        9,
        61,
        28,
        11,
        23,
        91,
        9,
        48,
        20,
        35,
        13,
        11,
        27,
        95,
        9,
        58,
        20,
        35,
        13,
        11,
        32,
        99,
        9,
        39,
        50,
        20,
        21,
        47,
        21,
        97,
        38,
        46,
        25,
        21,
        17,
        13,
        11,
        56,
        24,
        133,
        9,
        13,
        28,
        60,
        38,
        69,
        91,
        50,
        43,
        9,
        23,
        56,
        99,
        9,
        7,
        60,
        38,
        13,
        38,
        72,
        44,
        47,
        42,
        75,
        13,
        90,
        108,
        13,
        30,
        30,
        37,
        13,
        38,
        37,
        51,
        13,
        37,
        36,
        49,
        13,
        108,
        30,
        31,
        59,
        42,
        19,
        45,
        34,
        19,
        13,
        44,
        38,
        41,
        34,
        15,
        9,
        23,
        37,
        73,
        9,
        33,
        7,
        60,
        54,
        56,
        38,
        44,
        50,
        27,
        83,
        9,
        13,
        41,
        46,
        63,
        75,
        13,
        63,
        49,
        52,
        100,
        13,
        54,
        55,
        31,
        38,
        37,
        56,
        37,
        71,
        55,
        41,
        54,
        13,
        37,
        44,
        69,
        68,
        13,
        37,
        43,
        67,
        66,
        13,
        47,
        51,
        63,
        67,
        64,
        59,
        57,
        61,
        30,
        41,
        40,
        27,
        14,
        108,
        30,
        31,
        59,
        42,
        19,
        45,
        34,
        19,
        13,
        44,
        38,
        41,
        34,
        15,
        9,
        23,
        37,
        73,
        9,
        7,
        1,
        21396
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/files.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/files.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "import { prisma } from '../database/db';\nimport { isTextFile, isTextFileProbability, streamToBuffer } from '../utils/file_utils.js';\nimport Aquafier, { AquaTree, FileObject, LogType } from 'aqua-js-sdk';\nimport { FastifyInstance } from 'fastify';\nimport path from 'path';\n\nimport * as fs from \"fs\"\n\nexport default async function filesController(fastify: FastifyInstance) {\n    // get file using file hash\n    fastify.get('/files/:fileHash', async (request, reply) => {\n        const { fileHash } = request.params as { fileHash: string };\n       //  console.log(`Received fileHash: ${fileHash}`);\n        // file content from db\n        // return as a blob\n        if (!fileHash || fileHash.trim() === '') {\n            return reply.code(401).send({ error: ' Missing or empty file hash' });\n        }\n\n        const nonce = request.headers['nonce']; // Headers are case-insensitive\n\n        // Check if `nonce` is missing or empty\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce }\n        });\n\n        if (!session) {\n            return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n        }\n\n        let file = await prisma.file.findFirst({\n            where: {\n                file_hash: fileHash\n            }\n        })\n\n        if (file == null) {\n            return reply.code(500).send({ success: false, message: `Error file  not found ` });\n        }\n\n        let fileIndex = await prisma.fileIndex.findFirst({\n            where: {\n                file_hash: fileHash\n            }\n        })\n\n        if (fileIndex == null) {\n            return reply.code(500).send({ success: false, message: `Error file uri  not found ` });\n        }\n\n\n        // check ownership of the file \n        let revision = prisma.revision.findFirst({\n            where: {\n                OR: [\n                    { pubkey_hash: file.hash },\n                    {\n                        // Check if any of the fileIndex hashes are in the revision's pubkey_hash\n                        pubkey_hash: {\n                            in: fileIndex.hash\n                        }\n                    }\n                ]\n            }\n        })\n\n        // If no matching revision is found, deny access\n        if (!revision) {\n            return reply.code(403).send({ success: false, message: \"Access denied: You don't have permission to access this file\" });\n        }\n\n        try {\n            // Read the file\n            let fileContent = fs.readFileSync(file.content!!);\n\n            // Set appropriate headers\n            reply.header('Content-Type', 'application/octet-stream');\n            reply.header('Content-Disposition', `attachment; filename=\"${fileIndex.uri}\"`);\n\n            // Send the file content as a response\n            return reply.send(fileContent);\n        } catch (error) {\n            console.error('Error reading file:', error);\n            return reply.code(500).send({ success: false, message: 'Error reading file content' });\n        }\n    });\n\n    fastify.post('/file/object', async (request, reply) => {\n        let aquafier = new Aquafier();\n\n        try {\n            const data: any = request.body\n\n\n           //  console.log(`--- data ${JSON.stringify(data, null, 4)}`)\n            // Type assertion and validation\n            const fileObject = data.fileObject as FileObject;\n\n            if (fileObject == undefined) {\n                return reply.code(400).send({ error: 'No file uploaded' });\n            }\n            if (fileObject.fileName == undefined || fileObject.fileContent == undefined) {\n                return reply.code(400).send({ error: 'File name and content are required in file object' });\n            }\n\n            let isForm = true;\n            if (data.isForm) {\n                isForm = data.isForm as boolean;\n\n            }\n            let enableContent = false;\n            if (data.enableContent) {\n                enableContent = data.enableContent as boolean;\n\n            }\n            let enableScalar = false;\n            if (data.enableScalar) {\n                enableScalar = data.enableScalar as boolean;\n\n            }\n\n            let res = await aquafier.createGenesisRevision(\n                fileObject,\n                isForm,\n                enableContent,\n                enableScalar\n            )\n\n            if (res.isErr()) {\n\n                res.data.push({\n                    log: `Error creating genesis revision`,\n                    logType: LogType.ERROR\n                })\n                return reply.code(500).send({\n                    logs: res.data\n                })\n\n            }\n\n            let resData: AquaTree = res.data.aquaTree!!;\n\n            // Return success response\n            return reply.code(200).send({\n                aquaTree: resData,\n            });\n        } catch (error) {\n            request.log.error(error);\n            return reply.code(500).send({ error: 'File upload failed' });\n        }\n\n\n\n        return { success: true };\n    });\n\n\n    fastify.post('/file/upload', async (request, reply) => {\n\n       //  console.log(\"Request body\", request.body);\n       //  console.log(\"Request files\", request.files);\n\n        let aquafier = new Aquafier();\n\n        // Check if the request is multipart\n        const isMultipart = request.isMultipart();\n\n        if (!isMultipart) {\n            return reply.code(400).send({ error: 'Expected multipart form data' });\n        }\n\n        try {\n            // Process the multipart data\n            const data = await request.file();\n\n            if (data == undefined || data.file === undefined) {\n                return reply.code(400).send({ error: 'No file uploaded' });\n            }\n            // Verify file size (20MB = 20 * 1024 * 1024 bytes)\n            const maxFileSize = 20 * 1024 * 1024;\n            if (data.file.bytesRead > maxFileSize) {\n                return reply.code(413).send({ error: 'File too large. Maximum file size is 20MB' });\n            }\n\n            // Extract form fields with default values\n            // Properly handle the MultipartFields type\n            let isForm = false;\n            let enableContent = false;\n            let enableScalar = false;\n\n           //  console.log(\"Data fields\", data.fields);\n            if (data.fields.isForm) {\n                // Handle form fields correctly based on the actual API\n                const isFormField: any = data.fields.isForm;\n\n                // If it's a single field\n                isForm = isFormField.value === 'true';\n\n            }\n\n            // Same for enableContent\n            if (data.fields.enableContent) {\n                const enableContentField: any = data.fields.enableContent;\n\n                enableContent = enableContentField.value === 'true';\n            }\n            // Same for enableContent\n            if (data.fields.enableScalar) {\n\n                const enableScalarField: any = data.fields.enableScalar;\n\n                enableScalar = enableScalarField.value === 'true';\n            }\n\n           //  console.log(\"All data: \", data)\n\n            // Convert file stream to base64 string\n            const fileBuffer = await streamToBuffer(data.file);\n            // const base64Content = fileBuffer.toString('base64');\n            // const utf8Content = fileBuffer.toString('utf-8');\n\n            let fileContent = fileBuffer.toString('utf-8');\n\n           //  console.log(`utf8Content ${fileContent}`)\n           //  console.log(`data.filename ${data.filename}`)\n            let fileObject: FileObject = {\n                fileContent: fileContent,\n                fileName: data.filename,\n                path: \"./\",\n            }\n\n            let res = await aquafier.createGenesisRevision(\n                fileObject,\n                isForm,\n                enableContent,\n                enableScalar\n            )\n\n            if (res.isErr()) {\n\n                res.data.push({\n                    log: `Error creating genesis revision`,\n                    logType: LogType.ERROR\n                })\n                return reply.code(500).send({\n                    logs: res.data\n                })\n\n            }\n\n            let resData: AquaTree = res.data.aquaTree!!;\n\n            // Return success response\n            return reply.code(200).send({\n                aquaTree: resData,\n            });\n        } catch (error) {\n            request.log.error(error);\n            return reply.code(500).send({ error: 'File upload failed' });\n        }\n\n\n    });\n}"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/explorer.ts": {
      "lineLengths": [
        48,
        40,
        77,
        24,
        26,
        36,
        24,
        34,
        25,
        133,
        54,
        38,
        21,
        38,
        59,
        66,
        36,
        79,
        47,
        73,
        98,
        9,
        61,
        28,
        11,
        23,
        91,
        9,
        38,
        44,
        50,
        27,
        83,
        9,
        13,
        41,
        46,
        63,
        75,
        13,
        65,
        50,
        52,
        101,
        13,
        34,
        39,
        54,
        68,
        63,
        54,
        30,
        50,
        35,
        13,
        53,
        32,
        36,
        60,
        51,
        46,
        57,
        63,
        100,
        59,
        67,
        72,
        77,
        69,
        72,
        147,
        25,
        76,
        68,
        70,
        36,
        56,
        29,
        27,
        72,
        55,
        57,
        72,
        175,
        62,
        59,
        33,
        38,
        29,
        25,
        81,
        71,
        49,
        64,
        117,
        72,
        112,
        101,
        83,
        79,
        79,
        44,
        50,
        57,
        53,
        51,
        30,
        98,
        67,
        46,
        31,
        25,
        30,
        54,
        40,
        57,
        34,
        39,
        83,
        33,
        31,
        25,
        49,
        118,
        25,
        45,
        82,
        64,
        27,
        48,
        97,
        59,
        56,
        40,
        60,
        33,
        31,
        25,
        30,
        59,
        39,
        56,
        59,
        61,
        55,
        54,
        33,
        31,
        25,
        21,
        26,
        17,
        13,
        51,
        59,
        53,
        21,
        58,
        67,
        94,
        63,
        46,
        70,
        21,
        55,
        41,
        74,
        21,
        26,
        72,
        21,
        17,
        27,
        84,
        17,
        13,
        63,
        37,
        55,
        24,
        41,
        17,
        15,
        37,
        58,
        13,
        52,
        77,
        47,
        57,
        37,
        48,
        69,
        63,
        9,
        23,
        37,
        73,
        9,
        7,
        74,
        36,
        79,
        47,
        73,
        98,
        9,
        61,
        28,
        11,
        23,
        91,
        9,
        38,
        44,
        50,
        27,
        83,
        9,
        13,
        41,
        49,
        66,
        78,
        16,
        68,
        53,
        55,
        104,
        16,
        66,
        62,
        77,
        37,
        74,
        17,
        50,
        46,
        31,
        39,
        37,
        39,
        58,
        49,
        47,
        56,
        81,
        66,
        68,
        117,
        29,
        73,
        25,
        62,
        74,
        67,
        58,
        25,
        21,
        53,
        61,
        61,
        25,
        64,
        77,
        55,
        69,
        62,
        118,
        29,
        25,
        21,
        17,
        34,
        79,
        17,
        63,
        55,
        82,
        70,
        39,
        67,
        74,
        17,
        68,
        48,
        46,
        99,
        62,
        76,
        103,
        89,
        94,
        50,
        67,
        68,
        63,
        67,
        102,
        21,
        77,
        74,
        64,
        45,
        49,
        91,
        46,
        53,
        21,
        67,
        69,
        36,
        76,
        71,
        75,
        65,
        31,
        49,
        48,
        46,
        102,
        25,
        23,
        70,
        68,
        51,
        31,
        50,
        51,
        48,
        42,
        108,
        25,
        23,
        60,
        17,
        37,
        62,
        59,
        73,
        41,
        59,
        28,
        45,
        21,
        19,
        41,
        124,
        62,
        17,
        56,
        81,
        51,
        61,
        41,
        52,
        73,
        45,
        34,
        60,
        38,
        19,
        13,
        27,
        88,
        41,
        73,
        13,
        9,
        23,
        37,
        73,
        9,
        7,
        31,
        62,
        71,
        60,
        31,
        27,
        36,
        79,
        47,
        73,
        98,
        9,
        61,
        28,
        11,
        23,
        91,
        9,
        33,
        51,
        20,
        37,
        13,
        11,
        33,
        54,
        9,
        48,
        73,
        43,
        53,
        33,
        44,
        65,
        59,
        7,
        63,
        36,
        79,
        47,
        73,
        98,
        9,
        61,
        28,
        11,
        23,
        91,
        9,
        38,
        44,
        50,
        27,
        83,
        9,
        13,
        41,
        46,
        63,
        75,
        13,
        63,
        49,
        52,
        100,
        13,
        54,
        55,
        31,
        38,
        36,
        37,
        71,
        55,
        41,
        54,
        13,
        37,
        44,
        69,
        68,
        13,
        37,
        43,
        67,
        66,
        13,
        63,
        56,
        58,
        62,
        54,
        67,
        33,
        40,
        40,
        27,
        41,
        14,
        52,
        77,
        47,
        57,
        111,
        30,
        31,
        59,
        42,
        19,
        45,
        34,
        19,
        13,
        51,
        44,
        54,
        31,
        91,
        13,
        72,
        46,
        48,
        62,
        166,
        53,
        49,
        24,
        28,
        20,
        16,
        62,
        71,
        28,
        99,
        13,
        49,
        37,
        62,
        30,
        53,
        40,
        27,
        41,
        14,
        17,
        70,
        51,
        32,
        88,
        104,
        87,
        89,
        91,
        91,
        24,
        21,
        73,
        44,
        27,
        45,
        46,
        21,
        19,
        56,
        46,
        27,
        52,
        112,
        61,
        35,
        80,
        91,
        36,
        80,
        40,
        70,
        66,
        71,
        22,
        19,
        52,
        29,
        65,
        56,
        59,
        59,
        39,
        57,
        50,
        66,
        71,
        33,
        31,
        25,
        21,
        17,
        63,
        64,
        51,
        19,
        74,
        51,
        19,
        40,
        94,
        86,
        51,
        48,
        32,
        52,
        25,
        23,
        17,
        22,
        64,
        45,
        72,
        69,
        36,
        76,
        70,
        65,
        31,
        49,
        48,
        46,
        47,
        25,
        23,
        74,
        84,
        51,
        31,
        50,
        51,
        48,
        47,
        46,
        25,
        23,
        57,
        17,
        13,
        27,
        73,
        49,
        30,
        27,
        57,
        42,
        19,
        45,
        34,
        19,
        13,
        38,
        41,
        34,
        38,
        15,
        9,
        23,
        37,
        73,
        9,
        7,
        69,
        36,
        79,
        47,
        73,
        98,
        9,
        61,
        28,
        11,
        23,
        89,
        9,
        45,
        44,
        98,
        9,
        82,
        34,
        30,
        33,
        64,
        20,
        43,
        13,
        11,
        39,
        143,
        9,
        44,
        13,
        86,
        78,
        98,
        94,
        55,
        13,
        79,
        9,
        19,
        128,
        9,
        13,
        72,
        53,
        76,
        86,
        87,
        98,
        105,
        47,
        72,
        28,
        31,
        52,
        25,
        21,
        19,
        83,
        95,
        93,
        61,
        28,
        31,
        52,
        25,
        21,
        19,
        95,
        121,
        70,
        28,
        31,
        52,
        25,
        21,
        19,
        81,
        70,
        45,
        50,
        71,
        32,
        53,
        25,
        23,
        51,
        54,
        36,
        57,
        29,
        27,
        47,
        21,
        17,
        84,
        42,
        63,
        28,
        31,
        52,
        25,
        21,
        19,
        74,
        47,
        73,
        28,
        31,
        52,
        25,
        21,
        19,
        84,
        60,
        75,
        96,
        57,
        74,
        28,
        31,
        57,
        25,
        22,
        29,
        33,
        40,
        46,
        34,
        21,
        19,
        106,
        80,
        116,
        74,
        65,
        108,
        68,
        96,
        37,
        62,
        83,
        112,
        59,
        76,
        48,
        46,
        68,
        87,
        33,
        71,
        30,
        25,
        30,
        95,
        59,
        76,
        48,
        46,
        68,
        87,
        33,
        30,
        25,
        72,
        52,
        52,
        126,
        69,
        25,
        21,
        17,
        106,
        73,
        47,
        47,
        53,
        53,
        71,
        63,
        63,
        61,
        79,
        63,
        50,
        72,
        25,
        21,
        45,
        70,
        63,
        50,
        72,
        25,
        107,
        48,
        70,
        57,
        79,
        32,
        28,
        21,
        17,
        142,
        131,
        87,
        53,
        65,
        78,
        32,
        33,
        55,
        29,
        26,
        31,
        46,
        44,
        29,
        25,
        23,
        89,
        64,
        54,
        71,
        36,
        44,
        70,
        33,
        30,
        35,
        50,
        48,
        33,
        29,
        27,
        82,
        21,
        17,
        73,
        53,
        78,
        32,
        33,
        55,
        29,
        25,
        23,
        89,
        53,
        54,
        96,
        89,
        90,
        70,
        36,
        44,
        56,
        33,
        29,
        27,
        54,
        59,
        47,
        37,
        64,
        97,
        33,
        44,
        108,
        75,
        33,
        29,
        25,
        54,
        71,
        36,
        44,
        56,
        33,
        29,
        27,
        82,
        21,
        17,
        86,
        71,
        28,
        35,
        52,
        25,
        22,
        27,
        38,
        21,
        19,
        113,
        97,
        66,
        28,
        31,
        52,
        25,
        21,
        19,
        77,
        56,
        45,
        48,
        46,
        32,
        57,
        25,
        23,
        43,
        17,
        80,
        78,
        34,
        56,
        45,
        55,
        45,
        21,
        26,
        44,
        21,
        19,
        128,
        33,
        70,
        28,
        29,
        29,
        41,
        48,
        34,
        30,
        29,
        47,
        48,
        33,
        29,
        26,
        30,
        29,
        55,
        29,
        25,
        21,
        19,
        81,
        15,
        111,
        9,
        23,
        63,
        41,
        31,
        65,
        30,
        15,
        9,
        7,
        1,
        112628
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/explorer.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/explorer.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "import Aquafier, { AquaTree, FileObject, getHashSum, LogData, LogType, OrderRevisionInAquaTree, Revision } from 'aqua-js-sdk';\nimport { FastifyInstance } from 'fastify';\nimport { prisma } from '../database/db';\nimport { BusboyFileStream } from '@fastify/busboy';\nimport { getFileUploadDirectory, isTextFile, isTextFileProbability, streamToBuffer } from '../utils/file_utils';\nimport path from 'path';\nimport JSZip from \"jszip\";\nimport { randomUUID } from 'crypto';\nimport util from 'util';\nimport { pipeline } from 'stream';\nimport * as fs from \"fs\"\nimport { error } from 'console';\nimport { createAquaTreeFromRevisions, fetchAquatreeFoUser, FetchRevisionInfo, findAquaTreeRevision, getGenesisHash, saveAquaTree, validateAquaTree } from '../utils/revisions_utils';\nimport { fileURLToPath } from 'url';\nimport { AquaForms, FileIndex, Signature, Witness, WitnessEvent } from '@prisma/client';\nimport { getHost, getPort } from '../utils/api_utils';\nimport { AquaJsonInZip, DeleteRevision, SaveAquaTree } from '../models/request_models';\n// import getStream from 'get-stream';\n// Promisify pipeline\nconst pump = util.promisify(pipeline);\n\nexport default async function explorerController(fastify: FastifyInstance) {\n\n\n\n    fastify.post('/explorer_aqua_zip', async (request, reply) => {\n\n        // Read `nonce` from headers\n        const nonce = request.headers['nonce']; // Headers are case-insensitive\n\n        // Check if `nonce` is missing or empty\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce }\n        });\n\n        if (!session) {\n            return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n        }\n\n\n        let aquafier = new Aquafier();\n\n\n        // Check if the request is multipart\n        const isMultipart = request.isMultipart();\n\n        if (!isMultipart) {\n            return reply.code(400).send({ error: 'Expected multipart form data' });\n        }\n\n        try {\n            // Process the multipart data\n            const data = await request.file();\n\n            if (data == undefined || data.file === undefined) {\n                return reply.code(400).send({ error: 'No file uploaded' });\n            }\n            // Verify file size (200MB = 200 * 1024 * 1024 bytes)\n            const maxFileSize = 200 * 1024 * 1024;\n            if (data.file.bytesRead > maxFileSize) {\n                return reply.code(413).send({ error: 'File too large. Maximum file size is 200MB' });\n            }\n\n            let genesis_name = \"\";\n            // const zip = new JSZip();\n            // **Convert the file stream to a Buffer**\n            // const fileBuffer = await getStream.buffer(data.file);\n            // const zipData = await zip.loadAsync(fileBuffer);\n            // Convert the stream to a Buffer manually\n            const chunks = [];\n            for await (const chunk of data.file) {\n                chunks.push(chunk);\n            }\n            const fileBuffer = Buffer.concat(chunks);\n\n            // Load ZIP contents\n            const zip = new JSZip();\n            const zipData = await zip.loadAsync(fileBuffer);\n\n\n\n\n\n            for (const fileName in zipData.files) {\n                if (fileName == 'aqua.json') {\n                    const file = zipData.files[fileName];\n\n                    let fileContent = await file.async('text');\n                    //  console.log(`aqua.json => File name: ${fileName}, Content: ${fileContent}`);\n\n                    let aquaData: AquaJsonInZip = JSON.parse(fileContent)\n\n\n                    for (let nameHash of aquaData.name_with_hash) {\n\n                        let aquaFileName = `${nameHash.name}.aqua.json`;\n                        //  console.log(`name ${aquaFileName} ............ `)\n                        const aquaFile = zipData.files[aquaFileName];\n                        if (aquaFile == null || aquaFile == undefined) {\n                            return reply.code(500).send({ error: `Expected to find ${aquaFileName} as defined in aqua.json but file not found ` });\n                        }\n\n                        let aquaFileDataText = await aquaFile.async('text');\n\n                        let aquaData: AquaTree = JSON.parse(aquaFileDataText)\n\n\n                        let fileResult = await prisma.file.findFirst({\n                            where: {\n                                file_hash: nameHash.hash\n                            }\n                        })\n\n                        let allHashes = Object.keys(aquaData.revisions);\n                        let genesisHash = allHashes[0];\n                        for (let hashItem of allHashes) {\n                            let revision = aquaData.revisions[hashItem];\n                            if (revision.previous_verification_hash == null || revision.previous_verification_hash == undefined || revision.previous_verification_hash == \"\") {\n                                if (genesisHash != hashItem) {\n                                    genesisHash = hashItem\n                                }\n                                break\n                            }\n                        }\n\n                        let filepubkeyhash = `${session.address}_${genesisHash}`\n\n\n                        const fileAsset = zipData.files[nameHash.name];\n\n                        if (fileResult == null) {\n\n\n                            // Save the asset to the file system\n                            const fileContent = await fileAsset.async('nodebuffer'); // Correctly handle binary files\n\n                            const UPLOAD_DIR = getFileUploadDirectory();\n                            await fs.promises.mkdir(UPLOAD_DIR, { recursive: true }); // Ensure directory exists\n\n                            const uniqueFileName = `${randomUUID()}-${path.basename(nameHash.name)}`;\n                            const filePath = path.join(UPLOAD_DIR, uniqueFileName);\n\n                            await fs.promises.writeFile(filePath, fileContent);\n                            //  console.log(`------> Saved file: ${filePath}`);\n\n\n                            let fileData = {\n\n                                content: filePath,\n                                file_hash: nameHash.hash,\n                                hash: filepubkeyhash,\n                                reference_count: 1,\n                            }\n                            //  console.log(`--> File Data ${JSON.stringify(fileData, null, 4)} `)\n                            fileResult = await prisma.file.create({\n\n                                data: fileData\n                            })\n\n                        } else {\n\n                            await prisma.file.update({\n                                where: {\n                                    hash: fileResult.hash\n                                },\n                                data: {\n                                    reference_count: fileResult.reference_count! + 1\n                                }\n                            })\n                        }\n\n\n                        if (fileResult == null) {\n                            return reply.code(500).send({ success: false, message: `File index should not be null` });\n                        }\n\n                        // update  file index\n\n                        let existingFileIndex = await prisma.fileIndex.findFirst({\n                            where: { file_hash: nameHash.hash },\n                        });\n\n                        if (existingFileIndex) {\n                            existingFileIndex.hash = [...existingFileIndex.hash, filepubkeyhash]\n                            await prisma.fileIndex.update({\n                                data: existingFileIndex,\n                                where: {\n                                    id: existingFileIndex.id\n                                }\n                            })\n                        } else {\n                            await prisma.fileIndex.create({\n\n                                data: {\n                                    id: fileResult.hash,\n                                    hash: [filepubkeyhash],\n                                    file_hash: nameHash.hash,\n                                    uri: nameHash.name,\n                                    reference_count: 1\n\n                                }\n                            })\n\n                        }\n                    }\n                    break;\n                }\n\n            }\n\n            for (const fileName in zipData.files) {\n                //  console.log(`=> file name ${fileName}`)\n                const file = zipData.files[fileName];\n\n                try {\n                    if (fileName.endsWith(\".aqua.json\")) {\n                        let fileContent = await file.async('text');\n                        //  console.log(`=> File name: ${fileName}, Content: ${fileContent}`);\n\n                        let aquaTree: AquaTree = JSON.parse(fileContent);\n\n                        // save the aqua tree \n                        await saveAquaTree(aquaTree, session.address)\n\n\n\n                    } else if (fileName == 'aqua.json') {\n                        //ignored for now\n                        //  console.log(`ignore aqua.json in second loop`)\n                    } else {\n                        //  console.log(`ignore the asset  ${fileName}`)\n\n                    }\n                } catch (e) {\n                    return reply.code(500).send({ error: `An error occured ${e}` });\n                }\n            }\n\n            // fetch all explorer files belonging to this user.\n\n\n            // fetch all from latetst\n\n            let latest = await prisma.latest.findMany({\n                where: {\n                    user: session.address\n                }\n            });\n\n            if (latest.length == 0) {\n                return reply.code(200).send({ data: [] });\n            }\n\n\n            // Get the host from the request headers\n            const host = request.headers.host || `${getHost()}:${getPort()}`;\n\n            // Get the protocol (http or https)\n            const protocol = request.protocol || 'https'\n\n            // Construct the full URL\n            const url = `${protocol}://${host}`;\n\n            let displayData = await fetchAquatreeFoUser(url, latest)\n\n            return reply.code(200).send({ data: displayData });\n        } catch (error) {\n            request.log.error(error);\n            return reply.code(500).send({ error: 'File upload failed' });\n        }\n\n    });\n\n    fastify.post('/explorer_aqua_file_upload', async (request, reply) => {\n\n        // Read `nonce` from headers\n        const nonce = request.headers['nonce']; // Headers are case-insensitive\n\n        // Check if `nonce` is missing or empty\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce }\n        });\n\n        if (!session) {\n            return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n        }\n\n\n        let aquafier = new Aquafier();\n\n\n        // Check if the request is multipart\n        const isMultipart = request.isMultipart();\n\n        if (!isMultipart) {\n            return reply.code(400).send({ error: 'Expected multipart form data' });\n        }\n\n        try {\n\n\n\n\n            // Process the multipart data\n            // const data = await request.file();\n\n            // if (data == undefined || data.file === undefined) {\n            //     return reply.code(400).send({ error: 'No file uploaded' });\n            // }\n            // // Verify file size (200MB = 200 * 1024 * 1024 bytes)\n            // const maxFileSize = 200 * 1024 * 1024;\n            // if (data.file.bytesRead > maxFileSize) {\n            //     return reply.code(413).send({ error: 'File too large. Maximum file size is 200MB' });\n            // }\n\n            // const fileBuffer = await streamToBuffer(data.file);\n            // let fileContent = fileBuffer.toString('utf-8');\n\n            // let aquaTreeWithFileObject: AquaTree = JSON.parse(fileContent)\n\n            // // save the aqua tree \n            // await saveAquaTree(aquaTreeWithFileObject, session.address)\n\n\n\n            try {\n                // Process the multipart form data\n                const parts = request.parts();\n\n                let fileBuffer;\n                let assetBuffer = null;\n                let hasAsset = false;\n                let assetFilename = \"\";\n\n                // Process each part of the multipart form\n                for await (const part of parts) {\n                    if (part.type === 'file') {\n                        if (part.fieldname === 'file') {\n                            // Verify file size (200MB = 200 * 1024 * 1024 bytes)\n                            const maxFileSize = 200 * 1024 * 1024;\n                            if (part.file.bytesRead > maxFileSize) {\n                                return reply.code(413).send({ error: 'File too large. Maximum file size is 200MB' });\n                            }\n                            fileBuffer = await streamToBuffer(part.file);\n                        } else if (part.fieldname === 'asset') {\n                            assetBuffer = await streamToBuffer(part.file);\n                            // Extract filename from the asset file\n                            assetFilename = part.filename;\n                        }\n                    } else if (part.type === 'field') {\n                        if (part.fieldname === 'has_asset') {\n                            hasAsset = part.value === 'true';\n                        } else if (part.fieldname === 'account') {\n                            // Store account if needed for further processing\n                            const account = part.value;\n                            // Verify account matches session address\n                            if (account !== session.address) {\n                                return reply.code(403).send({ error: 'Account mismatch with authenticated session' });\n                            }\n                        }\n                    }\n                }\n\n                if (!fileBuffer) {\n                    return reply.code(400).send({ error: 'No file uploaded' });\n                }\n\n                let fileContent = fileBuffer.toString('utf-8');\n                let aquaTree: AquaTree = JSON.parse(fileContent);\n\n\n                let [isValidAquaTree, failureReason] = validateAquaTree(aquaTree)\n                console.log(`is aqua tree valid ${isValidAquaTree} `);\n                if (!isValidAquaTree) {\n                    console.log(`failure reason ${failureReason}`)\n                    return reply.code(412).send({ error: failureReason });\n                }\n\n\n\n                console.log(`\\n has asset save file ${hasAsset}  `)\n                // Handle the asset if it exists\n                if (hasAsset && assetBuffer) {\n                    console.log(`---------------------------------------------------------------`)\n                    console.log(`\\n has asset save file \\n `)\n                    // Process the asset - this depends on your requirements\n                    // For example, you might want to store it separately or attach it to the aqua tree\n                    // aquaTreeWithFileObject.assetData = assetBuffer.toString('base64');\n                    // Or handle the asset in some other way based on your application's needs\n\n                    let aquafier = new Aquafier()\n\n                    const uint8Array = new Uint8Array(assetBuffer);\n                    let fileHash = aquafier.getFileHash(uint8Array);\n\n                    let genesisHash = getGenesisHash(aquaTree);\n                    if (genesisHash == null || genesisHash == \"\") {\n                        return reply.code(500).send({ error: 'Genesis hash not found in aqua tree' });\n                    }\n                    let filepubkeyhash = `${session.address}_${genesisHash}`\n\n                    console.log(`\\n ## filepubkeyhash ${filepubkeyhash}`)\n                    const UPLOAD_DIR = getFileUploadDirectory();\n\n                    // Create unique filename\n                    let fileName = assetFilename;\n                    let aquaTreeName = await aquafier.getFileByHash(aquaTree, genesisHash);\n                    if (aquaTreeName.isOk()) {\n                        fileName = aquaTreeName.data\n                    }\n                    const filename = `${randomUUID()}-${fileName}`;\n                    const filePath = path.join(UPLOAD_DIR, filename);\n\n                    // Save the file\n                    // await pump(data.file, fs.createWriteStream(filePath))\n                    await fs.promises.writeFile(filePath, assetBuffer);\n\n                    console.log('About to create file record in database');\n                    let fileCreation = await prisma.file.create({\n                        data: {\n                            hash: filepubkeyhash,\n                            file_hash: fileHash,\n                            content: filePath,\n                            reference_count: 0, // we use 0 because  saveAquaTree increases file  by 1\n                        }\n                    })\n                    console.log('File record created:', fileCreation);\n\n                    console.log('About to create fileIndex record');\n\n                    await prisma.fileIndex.create({\n                        data: {\n                            id: fileCreation.hash,\n                            hash: [filepubkeyhash],\n                            file_hash: fileHash,\n                            uri: fileName,\n                            reference_count: 0 // we use 0 because  saveAquaTree increases file  undex  by 1\n                        }\n                    })\n\n                    console.log('FileIndex record created');\n\n                }\n\n                // Save the aqua tree\n                await saveAquaTree(aquaTree, session.address);\n\n                // Get all user files to return in response\n                // const userFiles = await getUserFiles(session.address);\n\n\n                // fetch all from latetst\n\n                let latest = await prisma.latest.findMany({\n                    where: {\n                        user: session.address\n                    }\n                });\n\n                if (latest.length == 0) {\n                    console.log(\"This should never happen , the uploaded aqua tree  &  file was not inserted succesfully \")\n                    return reply.code(200).send({ data: [] });\n                }\n\n\n                // Get the host from the request headers\n                const host = request.headers.host || `${getHost()}:${getPort()}`;\n\n                // Get the protocol (http or https)\n                const protocol = request.protocol || 'https'\n\n                // Construct the full URL\n                const url = `${protocol}://${host}`;\n\n                let displayData = await fetchAquatreeFoUser(url, latest)\n\n                return reply.code(200).send({\n                    success: true,\n                    message: 'Aqua tree saved successfully',\n                    files: displayData\n\n                });\n            } catch (error) {\n                console.error('\\n\\n Specific error in file/fileIndex creation:', error);\n                request.log.error(error);\n                return reply.code(500).send({ error: `Error ${error}` });\n            }\n\n\n\n        } catch (error) {\n            request.log.error(error);\n            return reply.code(500).send({ error: 'File upload failed' });\n        }\n\n    });\n\n    // get file using file hash\n    fastify.get('/explorer_files', async (request, reply) => {\n        // const { fileHash } = request.params as { fileHash: string };\n        ////  console.log(`Received fileHash: ${fileHash}`);\n        // file content from db\n        // return as a blob\n\n        // Read `nonce` from headers\n        const nonce = request.headers['nonce']; // Headers are case-insensitive\n\n        // Check if `nonce` is missing or empty\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce }\n        });\n\n        if (!session) {\n            return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n        }\n\n\n        // fetch all from latetst\n\n        let latest = await prisma.latest.findMany({\n            where: {\n                user: session.address\n            }\n        });\n\n        if (latest.length == 0) {\n            return reply.code(200).send({ data: [] });\n        }\n\n\n        // Get the host from the request headers\n        const host = request.headers.host || `${getHost()}:${getPort()}`;\n\n        // Get the protocol (http or https)\n        const protocol = request.protocol || 'https'\n\n        // Construct the full URL\n        const url = `${protocol}://${host}`;\n\n        let displayData = await fetchAquatreeFoUser(url, latest)\n\n\n        return reply.code(200).send({ data: displayData })\n    });\n\n\n    fastify.post('/explorer_files', async (request, reply) => {\n\n        // Read `nonce` from headers\n        const nonce = request.headers['nonce']; // Headers are case-insensitive\n\n        // Check if `nonce` is missing or empty\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce }\n        });\n\n        if (!session) {\n            return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n        }\n\n\n        let aquafier = new Aquafier();\n\n\n\n        // Check if the request is multipart\n        const isMultipart = request.isMultipart();\n\n        if (!isMultipart) {\n            return reply.code(400).send({ error: 'Expected multipart form data' });\n        }\n\n        try {\n            // Process the multipart data\n            const data = await request.file();\n\n            if (data == undefined || data.file === undefined) {\n                return reply.code(400).send({ error: 'No file uploaded' });\n            }\n            // Verify file size (20MB = 20 * 1024 * 1024 bytes)\n            const maxFileSize = 20 * 1024 * 1024;\n            if (data.file.bytesRead > maxFileSize) {\n                return reply.code(413).send({ error: 'File too large. Maximum file size is 20MB' });\n            }\n\n            // Extract form fields with default values\n            // Properly handle the MultipartFields type\n            let isForm = false;\n            let enableContent = false;\n            let enableScalar = true;\n\n            if (data.fields.isForm) {\n                // Handle form fields correctly based on the actual API\n                const isFormField: any = data.fields.isForm;\n\n                // If it's a single field\n                isForm = isFormField.value === 'true';\n\n            }\n\n            // Same for enableContent\n            if (data.fields.enableContent) {\n                const enableContentField: any = data.fields.enableContent;\n\n                enableContent = enableContentField.value === 'true';\n            }\n\n            // Same for enableContent\n            if (data.fields.enableScalar) {\n                const enableScalarField: any = data.fields.enableScalar;\n\n                enableScalar = enableScalarField.value === 'true';\n            }\n\n\n\n            const fileBuffer: Buffer<ArrayBufferLike> = await streamToBuffer(data.file);\n            // const buffer = Buffer.from([1, 2, 3, 4]);\n            const uint8Array = new Uint8Array(fileBuffer);\n            // let fileContent = fileBuffer.toString('utf-8');\n            const fileSizeInBytes = fileBuffer.length;\n            //  console.log(`File size: ${fileSizeInBytes} bytes`);\n\n\n            let fileObjectPar: FileObject = {\n                fileContent: uint8Array,\n                fileName: data.filename,\n                path: \"./\",\n                fileSize: fileSizeInBytes\n            }\n\n            // Get the host from the request headers\n            const host = request.headers.host || `${getHost()}:${getPort()}`;\n\n            // Get the protocol (http or https)\n            const protocol = request.protocol || 'https'\n\n\n            let res = await aquafier.createGenesisRevision(\n                fileObjectPar,\n                isForm,\n                enableContent,\n                enableScalar\n            )\n\n            if (res.isErr()) {\n\n                res.data.push({\n                    log: `Error creating genesis revision`,\n                    logType: LogType.ERROR\n                })\n                return reply.code(500).send({\n                    logs: res.data\n                })\n\n            }\n\n\n\n            // let fileHash = getHashSum(data.file)\n            let resData: AquaTree = res.data.aquaTree!!;\n\n            let genesisHash = getGenesisHash(resData);\n\n            if (!genesisHash) {\n                return reply.code(500).send({ error: 'Genesis revision cannot be found' });\n            }\n            // let allHashes: string[] = Object.keys(resData.revisions);\n            // let genesisHash = allHashes[0];\n            // for (let hashItem of allHashes) {\n            //     let revision = resData.revisions[hashItem];\n            //     if (revision.previous_verification_hash == null || revision.previous_verification_hash == undefined || revision.previous_verification_hash == \"\") {\n            //         if (genesisHash != hashItem) {\n            //             genesisHash = hashItem\n            //         }\n            //         break\n            //     }\n            // }\n\n\n            let revisionData: Revision = resData.revisions[genesisHash];\n            let fileHash = revisionData.file_hash; // Extract file hash\n\n\n            if (!fileHash) {\n                return reply.code(500).send({ error: \"File hash missing from AquaTree response\" });\n            }\n\n            const urlPath = `/files/${fileHash}`;\n            // Construct the full URL\n            const fullUrl = `${protocol}://${host}${urlPath}`;\n            let fileObject: FileObject = {\n                fileContent: fullUrl, // fileContent,\n                fileName: data.filename,\n                path: \"./\",\n                fileSize: fileSizeInBytes\n            }\n\n            try {\n\n                // Parse the timestamp string into a valid Date object\n                // const localTimestamp = new Date(\n                //     Date.UTC(\n                //         parseInt(revisionData.local_timestamp.slice(0, 4)),   // Year\n                //         parseInt(revisionData.local_timestamp.slice(4, 6)) - 1,  // Month (0-indexed)\n                //         parseInt(revisionData.local_timestamp.slice(6, 8)),   // Day\n                //         parseInt(revisionData.local_timestamp.slice(8, 10)),  // Hours\n                //         parseInt(revisionData.local_timestamp.slice(10, 12)), // Minutes\n                //         parseInt(revisionData.local_timestamp.slice(12, 14))  // Seconds\n                //     )\n                // );\n\n                let filepubkeyhash = `${session.address}_${genesisHash}`\n\n                await prisma.latest.create({\n                    data: {\n                        hash: filepubkeyhash,\n                        user: session.address,\n                    }\n                });\n\n                // Insert new revision into the database\n                await prisma.revision.create({\n                    data: {\n                        pubkey_hash: filepubkeyhash,\n                        // user: session.address, // Replace with actual user identifier (e.g., request.user.id)\n                        nonce: revisionData.file_nonce || \"\",\n                        shared: [],\n                        // contract: revisionData.witness_smart_contract_address\n                        //     ? [{ address: revisionData.witness_smart_contract_address }]\n                        //     : [],\n                        previous: revisionData.previous_verification_hash || \"\",\n                        // children: {},\n                        local_timestamp: revisionData.local_timestamp,\n                        revision_type: revisionData.revision_type,\n                        verification_leaves: revisionData.leaves || [],\n\n                    },\n                });\n\n                // if is form add the form elements \n                if (isForm) {\n                    let revisioValue = Object.keys(revisionData);\n                    for (let formItem in revisioValue) {\n                        if (formItem.startsWith(\"form_\")) {\n                            await prisma.aquaForms.create({\n                                data: {\n                                    hash: filepubkeyhash,\n                                    key: formItem,\n                                    value: revisioValue[formItem],\n                                    type: typeof revisioValue[formItem]\n                                }\n                            });\n                        }\n                    }\n                }\n\n\n                // Check if file already exists in the database\n                let existingFile = await prisma.file.findFirst({\n                    where: { file_hash: fileHash },\n                });\n\n\n\n                let existingFileIndex = await prisma.fileIndex.findFirst({\n                    where: { file_hash: fileHash },\n                });\n\n                if (existingFileIndex) {\n                    existingFileIndex.reference_count = existingFileIndex.reference_count! + 1;\n                    existingFileIndex.hash = [...existingFileIndex.hash, genesisHash]\n                    await prisma.fileIndex.update({\n                        data: existingFileIndex,\n                        where: {\n                            id: existingFileIndex.id\n                        }\n                    })\n                } else {\n\n\n                    const UPLOAD_DIR = getFileUploadDirectory();\n                    // Create unique filename\n                    const filename = `${randomUUID()}-${data.filename}`;\n                    const filePath = path.join(UPLOAD_DIR, filename);\n\n                    // Save the file\n                    // await pump(data.file, fs.createWriteStream(filePath))\n                    await fs.promises.writeFile(filePath, fileBuffer);\n\n                    let fileCreation = await prisma.file.create({\n                        data: {\n                            hash: filepubkeyhash,\n                            file_hash: fileHash,\n                            content: filePath,\n                            reference_count: 1,\n                        }\n                    })\n\n                    //  console.log(JSON.stringify(fileCreation, null, 4))\n                    // console.error(\"====We are through here: \", fileCreation.hash)\n\n                    await prisma.fileIndex.create({\n                        data: {\n                            id: fileCreation.hash,\n                            hash: [filepubkeyhash],\n                            file_hash: fileHash,\n                            uri: data.filename,\n                            reference_count: 1\n                        }\n                    })\n                    //  console.log(\"Saved successfully\")\n                }\n\n            } catch (error) {\n                //  console.log(\"======================================\")\n                //  console.log(`error ${error}`)\n                let logs: LogData[] = []\n                logs.push({\n                    log: `Error saving genesis revision`,\n                    logType: LogType.ERROR\n                })\n\n                return reply.code(500).send({\n                    data: res.data\n                })\n\n            }\n\n            // Return success response\n            return reply.code(200).send({\n                aquaTree: resData,\n                fileObject: fileObject\n            });\n        } catch (error) {\n            request.log.error(error);\n            return reply.code(500).send({ error: 'File upload failed' });\n        }\n\n    });\n\n\n    fastify.post('/explorer_delete_file', async (request, reply) => {\n        // Read `nonce` from headers\n        const nonce = request.headers['nonce']; // Headers are case-insensitive\n\n        // Check if `nonce` is missing or empty\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce }\n        });\n\n        if (!session) {\n            return reply.code(403).send({ success: false, message: \"Nonce is invalid\" });\n        }\n\n        const revisionDataPar = request.body as DeleteRevision;\n\n        if (!revisionDataPar.revisionHash) {\n            return reply.code(400).send({ success: false, message: \"revision hash is required\" });\n        }\n\n        let filepubkeyhash = `${session.address}_${revisionDataPar.revisionHash}`;\n\n        //fetch all the revisions \n        let revisionData = [];\n        // fetch latest revision \n        let latestRevionData = await prisma.revision.findFirst({\n            where: {\n                pubkey_hash: filepubkeyhash\n            }\n        });\n\n        if (latestRevionData == null) {\n            return reply.code(500).send({ success: false, message: `revision with hash ${revisionDataPar.revisionHash} not found in system` });\n        }\n        revisionData.push(latestRevionData);\n\n        try {\n            console.log(`Processing revision chain starting with: ${filepubkeyhash}`);\n            //if previous verification hash is not empty find the previous one\n            if (latestRevionData?.previous !== null && latestRevionData?.previous?.length !== 0) {\n                let aquaTreerevision = await findAquaTreeRevision(latestRevionData?.previous!!);\n                revisionData.push(...aquaTreerevision);\n            }\n            console.log(`Found ${revisionData.length} revisions in the chain`);\n        } catch (e: any) {\n            return reply.code(500).send({ success: false, message: `Error fetching a revision ${JSON.stringify(e, null, 4)}` });\n        }\n\n        try {\n            // Use Prisma transaction to ensure all or nothing execution\n            await prisma.$transaction(async (tx) => {\n                console.log('Starting revision chain deletion transaction');\n                const revisionPubkeyHashes = revisionData.map(rev => rev.pubkey_hash);\n                console.log(`Revisions to delete: ${revisionPubkeyHashes.join(', ')}`);\n\n                // Step 1: First delete all entries in related tables that reference our revisions\n                // We need to delete child records before parent records to avoid foreign key constraints\n\n                // 1a. Delete AquaForms entries\n                const deletedAquaForms = await tx.aquaForms.deleteMany({\n                    where: {\n                        hash: {\n                            in: revisionPubkeyHashes\n                        }\n                    }\n                });\n                console.log(`Deleted ${deletedAquaForms.count} AquaForms entries`);\n\n                // 1b. Delete Witness entries (note: we need to handle WitnessEvent separately)\n                // We need to handle this first because Witness has a foreign key to Revision\n                const witnesses = await tx.witness.findMany({\n                    where: {\n                        hash: {\n                            in: revisionPubkeyHashes\n                        }\n                    }\n                });\n\n                const witnessRoots = witnesses.map(w => w.Witness_merkle_root).filter(Boolean) as string[];\n                console.log(`Found ${witnesses.length} Witness entries with ${witnessRoots.length} unique merkle roots`);\n\n                const deletedWitnesses = await tx.witness.deleteMany({\n                    where: {\n                        hash: {\n                            in: revisionPubkeyHashes\n                        }\n                    }\n                });\n                console.log(`Deleted ${deletedWitnesses.count} Witness entries`);\n\n                // Check if any WitnessEvents are no longer referenced\n                let deletedWitnessEvents = 0;\n                for (const root of witnessRoots) {\n                    const remainingWitnesses = await tx.witness.count({\n                        where: {\n                            Witness_merkle_root: root\n                        }\n                    });\n\n                    if (remainingWitnesses === 0) {\n                        await tx.witnessEvent.delete({\n                            where: {\n                                Witness_merkle_root: root\n                            }\n                        });\n                        deletedWitnessEvents++;\n                    }\n                }\n                console.log(`Deleted ${deletedWitnessEvents} WitnessEvent entries`);\n\n                // 1c. Delete Link entries\n                const deletedLinks = await tx.link.deleteMany({\n                    where: {\n                        hash: {\n                            in: revisionPubkeyHashes\n                        }\n                    }\n                });\n                console.log(`Deleted ${deletedLinks.count} Link entries`);\n\n                // 1d. Delete Signature entries\n                const deletedSignatures = await tx.signature.deleteMany({\n                    where: {\n                        hash: {\n                            in: revisionPubkeyHashes\n                        }\n                    }\n                });\n                console.log(`Deleted ${deletedSignatures.count} Signature entries`);\n\n                // Step 2: Handle File and FileIndex entries\n                // First, find all fileIndexes that reference our revisions\n                console.log('Finding FileIndex entries that reference the revisions to delete');\n\n                // Start with exact matches using hasSome\n                const fileIndexesToProcess = await tx.fileIndex.findMany({\n                    where: {\n                        hash: {\n                            hasSome: revisionPubkeyHashes\n                        }\n                    },\n                    select: {\n                        id: true,\n                        file_hash: true,\n                        reference_count: true,\n                        hash: true\n                    }\n                });\n\n                // If few or no matches, try a more flexible search with case-insensitive partial matching\n                if (fileIndexesToProcess.length < revisionPubkeyHashes.length) {\n                    console.log(`Found only ${fileIndexesToProcess.length} exact matches, trying partial matching`);\n\n                    // For each revision hash, try to find partial matches\n                    for (const revHash of revisionPubkeyHashes) {\n                        // This is a complex query to find any FileIndex where any element in the hash array\n                        // contains the revision hash as a substring\n                        // Build the SQL query differently based on whether we have existing IDs\n                        let rawQuery;\n                        if (fileIndexesToProcess.length > 0) {\n                            // If we have existing IDs, exclude them from the query\n                            const existingIdsFormatted = fileIndexesToProcess.map(fi => `'${fi.id}'`).join(',');\n                            rawQuery = await tx.$queryRaw`\n                                SELECT id, file_hash, reference_count, hash \n                                FROM file_index \n                                WHERE EXISTS (\n                                    SELECT 1 FROM unnest(hash) AS h \n                                    WHERE LOWER(h) LIKE LOWER('%' || ${revHash} || '%')\n                                )\n                                AND id NOT IN (${existingIdsFormatted})\n                            `;\n                        } else {\n                            // If no existing IDs, just run the query without the NOT IN clause\n                            rawQuery = await tx.$queryRaw`\n                                SELECT id, file_hash, reference_count, hash \n                                FROM file_index \n                                WHERE EXISTS (\n                                    SELECT 1 FROM unnest(hash) AS h \n                                    WHERE LOWER(h) LIKE LOWER('%' || ${revHash} || '%')\n                                )\n                            `;\n                        }\n\n                        // Convert raw query results and add to our list\n                        const rawResults = rawQuery as { id: string, file_hash: string, reference_count: number | null, hash: string[] }[];\n                        if (rawResults.length > 0) {\n                            console.log(`Found ${rawResults.length} additional matches with partial matching for ${revHash}`);\n                            fileIndexesToProcess.push(...rawResults);\n                        }\n                    }\n                }\n\n                console.log(`Found total of ${fileIndexesToProcess.length} FileIndex entries to process`);\n\n                // Track which file indexes to delete and which to update\n                const fileIndexesToDelete = [];\n                const fileIndexesToUpdate = [];\n                const fileHashesToUpdate = new Set<string>();\n                const fileHashesToDelete = new Set<string>();\n\n                // Process each file index based on its reference count\n                for (const fileIndex of fileIndexesToProcess) {\n                    const refCount = fileIndex.reference_count;\n\n                    if (refCount === null || refCount <= 1) {\n                        // If reference count is null or ≤ 1, mark for deletion\n                        fileIndexesToDelete.push(fileIndex.id);\n                        if (fileIndex.file_hash) {\n                            fileHashesToDelete.add(fileIndex.file_hash);\n                        }\n                    } else if (refCount >= 2) {\n                        // If reference count is >= 2, mark for update\n                        fileIndexesToUpdate.push(fileIndex.id);\n                        if (fileIndex.file_hash) {\n                            fileHashesToUpdate.add(fileIndex.file_hash);\n                        }\n\n                        // If it's exactly 2, it will become 1 after decrementing, so mark for deletion too\n                        // if (refCount === 2) {\n                        //     fileIndexesToDelete.push(fileIndex.id);\n                        //     if (fileIndex.file_hash) {\n                        //         fileHashesToDelete.add(fileIndex.file_hash);\n                        //     }\n                        // }\n                    }\n                }\n\n                console.log(`FileIndex operations planned: ${fileIndexesToUpdate.length} to update, ${fileIndexesToDelete.length} to delete`);\n                console.log(`File operations planned: ${fileHashesToUpdate.size} to update, ${fileHashesToDelete.size} to delete`);\n\n                // Step 2a: Update reference counts for file indexes that need updating\n                if (fileIndexesToUpdate.length > 0) {\n                    // Decrement reference count for file indexes\n                    const updatedFileIndexes = await tx.fileIndex.updateMany({\n                        where: {\n                            id: {\n                                in: fileIndexesToUpdate\n                            }\n                        },\n                        data: {\n                            reference_count: {\n                                decrement: 1\n                            }\n                        }\n                    });\n                    console.log(`Updated ${updatedFileIndexes.count} FileIndex entries`);\n\n                    // Update files linked to these file indexes\n                    if (fileHashesToUpdate.size > 0) {\n                        const updatedFiles = await tx.file.updateMany({\n                            where: {\n                                file_hash: {\n                                    in: Array.from(fileHashesToUpdate) as string[]\n                                }\n                            },\n                            data: {\n                                reference_count: {\n                                    decrement: 1\n                                }\n                            }\n                        });\n                        console.log(`Updated ${updatedFiles.count} File entries`);\n                    }\n                }\n\n                // Step 2b: Delete file indexes with reference count <= 1\n                if (fileIndexesToDelete.length > 0) {\n                    const deletedFileIndexes = await tx.fileIndex.deleteMany({\n                        where: {\n                            id: {\n                                in: fileIndexesToDelete\n                            }\n                        }\n                    });\n                    console.log(`Deleted ${deletedFileIndexes.count} FileIndex entries`);\n\n                    // Delete the files if they exist\n                    if (fileHashesToDelete.size > 0) {\n                        const uniqueFileHashes = Array.from(fileHashesToDelete).filter(Boolean) as string[];\n                        console.log(`File hashes to delete: ${uniqueFileHashes.length}`);\n\n                        // First get the files to delete so we can handle filesystem files\n                        const filesToDelete = await tx.file.findMany({\n                            where: {\n                                file_hash: {\n                                    in: uniqueFileHashes\n                                }\n                            }\n                        });\n\n                        // Delete any filesystem files\n                        for (const file of filesToDelete) {\n                            if (file.content) {\n                                try {\n                                    fs.unlinkSync(file.content);\n                                    console.log(`Deleted file from filesystem: ${file.content}`);\n                                } catch (er) {\n                                    console.log(`Error deleting file from filesystem: ${file.content}`, er);\n                                    // Continue even if file deletion fails\n                                }\n                            }\n                        }\n\n                        // Delete the database records\n                        const deletedFiles = await tx.file.deleteMany({\n                            where: {\n                                file_hash: {\n                                    in: uniqueFileHashes\n                                }\n                            }\n                        });\n                        console.log(`Deleted ${deletedFiles.count} File entries`);\n                    }\n                }\n\n                // Step 3: Remove any references to our revisions from other revisions\n                const updatedRevisions = await tx.revision.updateMany({\n                    where: {\n                        previous: {\n                            in: revisionPubkeyHashes\n                        }\n                    },\n                    data: {\n                        previous: null\n                    }\n                });\n                console.log(`Updated ${updatedRevisions.count} revisions that referenced the deleted revisions`);\n\n                // Step 4: Delete the latest entry - we need to do this before deleting revisions\n                const deletedLatest = await tx.latest.deleteMany({\n                    where: {\n                        hash: {\n                            in: revisionPubkeyHashes\n                        }\n                    }\n                });\n                console.log(`Deleted ${deletedLatest.count} Latest entries`);\n\n                // Step 5: Finally, delete all revisions\n                let deletedRevisionCount = 0;\n                for (let item of revisionData) {\n                    await tx.revision.delete({\n                        where: {\n                            pubkey_hash: item.pubkey_hash\n                        }\n                    });\n                    deletedRevisionCount++;\n                }\n                console.log(`Deleted ${deletedRevisionCount} Revision entries`);\n                console.log('Revision chain deletion completed successfully');\n\n                let hashOnly: string[] = []\n\n                revisionPubkeyHashes.forEach((data) => {\n                    if (data.includes(\"_\")) {\n                        let data2 = data.split(\"_\")[1]\n                        hashOnly.push(data2)\n                    } else {\n                        hashOnly.push(data)\n                    }\n                })\n                console.log(`B4 revisionPubkeyHashes ${revisionPubkeyHashes} \\n After hashOnly -- ${JSON.stringify(hashOnly)}`);\n\n                //delete contract\n                const deletedContract = await tx.contract.deleteMany({\n                    where: {\n                        OR: [\n                            {\n                                latest: {\n                                    in: hashOnly\n                                },\n                            },\n                            {\n                                genesis_hash: {\n                                    in: hashOnly\n                                }\n                            }\n                        ],\n                        AND: [\n                            {\n                                sender: session.address\n                            }\n                        ]\n                    }\n                });\n                console.log(`Deleted ${deletedContract.count} contract entries`);\n\n            });\n\n            return reply.code(200).send({ success: true, message: \"File and revisions deleted successfully\" });\n        } catch (error: any) {\n            console.error(\"Error in delete operation:\", error);\n            return reply.code(500).send({\n                success: false,\n                message: `Error deleting file: ${error.message}`,\n                details: error\n            });\n        }\n    });\n\n} \n\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/verify.ts": {
      "lineLengths": [
        53,
        35,
        57,
        78,
        55,
        13,
        38,
        44,
        43,
        43,
        52,
        33,
        35,
        47,
        13,
        44,
        107,
        29,
        45,
        34,
        19,
        13,
        18,
        45,
        34,
        19,
        13,
        9,
        23,
        37,
        41,
        51,
        81,
        15,
        9,
        7,
        60,
        38,
        13,
        42,
        39,
        27,
        45,
        43,
        67,
        57,
        67,
        21,
        26,
        44,
        36,
        54,
        52,
        42,
        27,
        21,
        17,
        13,
        35,
        85,
        13,
        37,
        114,
        13,
        56,
        59,
        40,
        26,
        16,
        57,
        95,
        45,
        45,
        54,
        43,
        19,
        13,
        18,
        45,
        54,
        43,
        19,
        13,
        9,
        23,
        37,
        97,
        9,
        7,
        78,
        60,
        13,
        38,
        44,
        43,
        33,
        35,
        47,
        13,
        40,
        28,
        45,
        70,
        19,
        13,
        44,
        86,
        45,
        73,
        19,
        13,
        39,
        45,
        65,
        19,
        13,
        56,
        45,
        72,
        19,
        13,
        40,
        45,
        66,
        19,
        13,
        35,
        70,
        59,
        75,
        44,
        84,
        78,
        75,
        29,
        45,
        34,
        19,
        13,
        18,
        45,
        34,
        19,
        13,
        9,
        23,
        37,
        41,
        51,
        81,
        15,
        9,
        7,
        1,
        15876
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/verify.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/verify.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "\n\nimport { streamToBuffer } from \"../utils/file_utils\";\nimport Aquafier, { AquaTree, FileObject, LogData, LogType, Revision } from \"aqua-js-sdk\";\nimport { FastifyInstance } from \"fastify\";\n\nexport default async function verifyController(fastify: FastifyInstance) {\n\n    //Creates a new revision, validated against aqua-verifier-js-lib verifier.\n    fastify.post('/verify', async (request, reply) => {\n\n        try {\n            const data: any = request.body\n\n            // Type assertion and validation\n            const aquaTree = data.aquaTree as AquaTree;\n            const revision = data.revision as Revision;\n            const revisionHash = data.revision_hash as string;\n            let fileObjects: Array<FileObject> = []\n\n            if (data.fileObjects) {\n                fileObjects = data.fileObjects as Array<FileObject>\n            }\n\n            const aquafier = new Aquafier();\n\n            let res = await aquafier.verifyAquaTreeRevision(aquaTree, revision, revisionHash, fileObjects)\n\n            if (res.isOk()) {\n                return reply.code(200).send({\n                    data: res.data\n                });\n\n            } else {\n\n                return reply.code(417).send({\n                    data: res.data\n                });\n            }\n\n\n        } catch (error) {\n            request.log.error(error);\n            return reply.code(500).send({\n                error: 'Error processing AquaTree',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            });\n        }\n\n\n    });\n\n    fastify.post('/verify/file', async (request, reply) => {\n        let aquafier = new Aquafier();\n\n        try {\n            const parts = request.parts();\n            let aquaFileContent = null;\n            let files = [];\n\n            for await (const part of parts) {\n                if (part.type === 'file') {\n                    const buffer = await streamToBuffer(part.file);\n\n                    if (part.fieldname === 'aqua_file') {\n                        aquaFileContent = buffer.toString('utf-8');\n                    } else {\n                        // Store other files\n                        files.push({\n                            fieldname: part.fieldname,\n                            filename: part.filename,\n                            buffer: buffer\n                        });\n                    }\n                }\n            }\n\n            if (!aquaFileContent) {\n                return reply.code(400).send({ error: 'No Aqua Json file uploaded' });\n            }\n\n            if (files.length === 0) {\n                return reply.code(400).send({ error: 'No files uploaded, please upload file next to aqua file' });\n            }\n\n            const aquaFileObjects: FileObject[] = files.map(file => ({\n                fileContent: file.buffer.toString('utf-8'),\n                fileName: file.filename,\n                path: \"./\"\n            }))\n\n            const aquaTree = JSON.parse(aquaFileContent);\n\n            let verificationResults = await aquafier.verifyAquaTree(aquaTree, aquaFileObjects)\n\n            if (verificationResults.isOk()) {\n                return reply.code(200).send({\n                    results: verificationResults.data,\n                    fileCount: files.length\n                });\n            } else {\n                return reply.code(417).send({\n                    results: verificationResults.data,\n                    fileCount: files.length\n                });\n            }\n        } catch (error: any) {\n            request.log.error(error);\n            return reply.code(500).send({ error: 'File upload failed', details: error.message });\n        }\n    });\n\n\n\n    //Creates a new revision, validated against aqua-verifier-js-lib verifier.\n    fastify.post('/verify/tree', async (request, reply) => {\n\n        try {\n            const data: any = request.body\n            // Type assertion and validation\n            const aquaTree = data.aquaTree as AquaTree;\n\n            let fileObjects: Array<FileObject> = []\n\n            if (data.fileObjects) {\n                fileObjects = data.fileObjects as Array<FileObject>\n            }\n            // Validate mandatory fields\n            if (!aquaTree) {\n                return reply.code(400).send({\n                    error: 'Invalid AquaTree: Missing aquaTree object'\n                });\n            }\n\n            // Check mandatory nested fields\n            if (!aquaTree.revisions || Object.keys(aquaTree.revisions).length === 0) {\n                return reply.code(400).send({\n                    error: 'Invalid AquaTree: Missing or empty revisions'\n                });\n            }\n\n            if (!aquaTree.file_index) {\n                return reply.code(400).send({\n                    error: 'Invalid AquaTree: Missing file_index'\n                });\n            }\n\n            if (!aquaTree.tree || !aquaTree.tree.hash) {\n                return reply.code(400).send({\n                    error: 'Invalid AquaTree: Missing tree or tree hash'\n                });\n            }\n\n            if (!aquaTree.treeMapping) {\n                return reply.code(400).send({\n                    error: 'Invalid AquaTree: Missing treeMapping'\n                });\n            }\n\n            // Process the AquaTree\n            // const revisionHashes = Object.keys(aquaTree.revisions);\n            // const firstRevisionHash = revisionHashes[0];\n            // const firstRevision = aquaTree.revisions[firstRevisionHash];\n\n            const aquafier = new Aquafier();\n\n            ////  console.log(`fileObjects ${JSON.stringify(fileObjects, null, 4)}`)\n            ////  console.log(`aquaTree ${JSON.stringify(aquaTree, null, 4)}`)\n            let res = await aquafier.verifyAquaTree(aquaTree, fileObjects)\n\n            if (res.isOk()) {\n                return reply.code(200).send({\n                    data: res.data\n                });\n\n            } else {\n\n                return reply.code(417).send({\n                    data: res.data\n                });\n            }\n\n        } catch (error) {\n            request.log.error(error);\n            return reply.code(500).send({\n                error: 'Error processing AquaTree',\n                details: error instanceof Error ? error.message : 'Unknown error'\n            });\n        }\n    });\n}"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/file_utils.ts": {
      "lineLengths": [
        24,
        36,
        38,
        52,
        54,
        47,
        73,
        2,
        42,
        22,
        45,
        57,
        63,
        35,
        7,
        2,
        26,
        12,
        21,
        50,
        28,
        74,
        77,
        71,
        74,
        74,
        71,
        68,
        26,
        75,
        75,
        36,
        27,
        70,
        39,
        30,
        67,
        70,
        74,
        23,
        24,
        45,
        15,
        25,
        6,
        2,
        67,
        34,
        53,
        38,
        2,
        59,
        31,
        40,
        53,
        27,
        39,
        20,
        5,
        81,
        71,
        61,
        30,
        62,
        9,
        5,
        79,
        27,
        53,
        42,
        31,
        86,
        29,
        9,
        5,
        50,
        84,
        2,
        85,
        9824
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/file_utils.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/file_utils.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "import path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst getFileUploadDirectory =(): string =>{\n  // Get the equivalent of __dirname in ES modules\n  const __filename = fileURLToPath(import.meta.url);\n  const __dirname = path.dirname(__filename);\n  \n  return process.env.UPLOAD_DIR || path.join(__dirname, '../../media');\n   \n}\nconst streamToBuffer = async (stream: NodeJS.ReadableStream): Promise<Buffer> => {\n    const chunks: Uint8Array[] = [];\n    return new Promise((resolve, reject) => {\n        stream.on('data', (chunk) => chunks.push(chunk));\n        stream.on('end', () => resolve(Buffer.concat(chunks)));\n        stream.on('error', reject);\n    });\n};\n\n\nconst extensions= (): string[] =>{\n    return     [\n        // Plain text\n        '.txt', '.text', '.log', '.me', '.readme',\n\n        // Source code files\n        '.js', '.jsx', '.ts', '.tsx', '.java', '.c', '.cpp', '.h', '.hpp',\n        '.cs', '.py', '.rb', '.php', '.go', '.rs', '.swift', '.kt', '.scala',\n        '.groovy', '.pl', '.pm', '.t', '.sh', '.bash', '.zsh', '.fish',\n        '.ps1', '.psm1', '.bat', '.cmd', '.asm', '.s', '.lua', '.r', '.d',\n        '.dart', '.m', '.mm', '.f', '.f90', '.f95', '.for', '.tcl', '.vb',\n        '.vbs', '.elm', '.ex', '.exs', '.erl', '.hrl', '.clj', '.cljs',\n        '.lisp', '.lsp', '.ml', '.mli', '.fs', '.fsx', '.v', '.zig',\n\n        // Web development\n        '.html', '.htm', '.css', '.scss', '.sass', '.less', '.svg', '.xml',\n        '.xsl', '.xslt', '.json', '.yaml', '.yml', '.toml', '.ini', '.env',\n        '.htaccess', '.jsx', '.tsx',\n\n        // Document formats\n        '.md', '.markdown', '.rst', '.rtf', '.tex', '.latex', '.wiki',\n        '.csv', '.tsv', '.ics', '.vcf',\n\n        // Configuration files\n        '.conf', '.config', '.cfg', '.properties', '.plist', '.rc',\n        '.gitignore', '.gitconfig', '.gitattributes', '.editorconfig',\n        '.dockerignore', '.npmrc', '.babelrc', '.eslintrc', '.prettierrc',\n        '.stylelintrc',\n\n        // Data exchange\n        '.sql', '.graphql', '.gql', '.proto',\n\n        // Misc\n        '.diff', '.patch'\n    ];\n}\n// Determine if the file is a text file based on filename extension\nconst isTextFile = (filename: string): boolean => {\n \n    const ext = path.extname(filename).toLowerCase();\n    return extensions().includes(ext);\n};\n\nconst isTextFileProbability = async (buffer: Buffer, filename: string): Promise<boolean> => {\n    // First check by extension\n    const textExtensions = extensions();\n    const ext = path.extname(filename).toLowerCase();\n    \n    // Known text extension\n    if (textExtensions.includes(ext)) {\n      return true;\n    }\n    \n    // For unknown extensions, try to detect if it's text by examining the buffer\n    // Check if buffer contains any null bytes (common in binary files)\n    for (let i = 0; i < Math.min(buffer.length, 1024); i++) {\n      if (buffer[i] === 0) {\n        return false; // Contains null byte, likely binary\n      }\n    }\n    \n    // Additional check: high ratio of printable ASCII characters suggests text\n    let printableChars = 0;\n    const sampleSize = Math.min(buffer.length, 1024);\n    for (let i = 0; i < sampleSize; i++) {\n      const byte = buffer[i];\n      if ((byte >= 32 && byte <= 126) || byte === 9 || byte === 10 || byte === 13) {\n        printableChars++;\n      }\n    }\n    \n    const textRatio = printableChars / sampleSize;\n    return textRatio > 0.9; // If more than 90% is printable ASCII, consider it text\n  };\nexport { streamToBuffer, isTextFile, isTextFileProbability , getFileUploadDirectory};"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/revisions.ts": {
      "lineLengths": [
        40,
        54,
        71,
        57,
        104,
        54,
        25,
        60,
        43,
        58,
        52,
        33,
        60,
        20,
        40,
        40,
        13,
        11,
        37,
        104,
        9,
        59,
        78,
        29,
        48,
        73,
        43,
        53,
        25,
        33,
        44,
        78,
        47,
        53,
        43,
        57,
        80,
        57,
        80,
        36,
        46,
        36,
        47,
        13,
        104,
        77,
        69,
        30,
        41,
        38,
        15,
        9,
        19,
        83,
        9,
        59,
        7,
        21,
        53,
        13,
        40,
        83,
        51,
        77,
        102,
        13,
        65,
        32,
        15,
        27,
        95,
        13,
        46,
        41,
        102,
        13,
        45,
        102,
        13,
        55,
        102,
        13,
        57,
        107,
        13,
        68,
        112,
        13,
        109,
        59,
        24,
        43,
        17,
        15,
        36,
        123,
        13,
        83,
        44,
        24,
        25,
        52,
        25,
        35,
        60,
        51,
        29,
        25,
        21,
        18,
        23,
        40,
        17,
        15,
        71,
        24,
        47,
        17,
        15,
        35,
        68,
        70,
        115,
        13,
        52,
        42,
        23,
        48,
        66,
        31,
        76,
        87,
        32,
        103,
        36,
        117,
        71,
        76,
        18,
        15,
        64,
        61,
        52,
        55,
        55,
        35,
        53,
        46,
        62,
        67,
        29,
        27,
        21,
        17,
        13,
        69,
        35,
        73,
        64,
        17,
        22,
        80,
        17,
        97,
        35,
        47,
        28,
        44,
        22,
        29,
        42,
        40,
        25,
        22,
        29,
        45,
        52,
        97,
        77,
        89,
        42,
        21,
        19,
        13,
        67,
        55,
        50,
        28,
        86,
        22,
        29,
        87,
        94,
        79,
        109,
        97,
        108,
        22,
        29,
        87,
        94,
        79,
        109,
        97,
        108,
        21,
        19,
        45,
        28,
        44,
        22,
        29,
        42,
        40,
        25,
        22,
        29,
        45,
        87,
        95,
        21,
        19,
        13,
        64,
        42,
        27,
        45,
        42,
        65,
        97,
        81,
        42,
        21,
        19,
        13,
        64,
        45,
        47,
        19,
        13,
        41,
        30,
        57,
        15,
        9,
        23,
        37,
        82,
        9,
        7,
        55,
        36,
        79,
        47,
        73,
        98,
        9,
        61,
        28,
        11,
        23,
        89,
        9,
        45,
        44,
        98,
        9,
        26,
        37,
        29,
        37,
        79,
        65,
        56,
        65,
        68,
        39,
        68,
        24,
        43,
        17,
        15,
        43,
        130,
        13,
        14,
        64,
        43,
        15,
        38,
        56,
        48,
        32,
        44,
        26,
        31,
        59,
        25,
        23,
        17,
        13,
        17,
        76,
        57,
        93,
        62,
        102,
        109,
        47,
        51,
        32,
        35,
        56,
        29,
        25,
        23,
        47,
        51,
        32,
        35,
        56,
        29,
        25,
        23,
        95,
        65,
        32,
        35,
        56,
        29,
        25,
        23,
        99,
        49,
        32,
        35,
        56,
        29,
        25,
        23,
        74,
        54,
        75,
        36,
        57,
        29,
        27,
        63,
        58,
        40,
        61,
        33,
        31,
        25,
        21,
        42,
        46,
        32,
        35,
        56,
        29,
        25,
        23,
        42,
        69,
        58,
        32,
        35,
        56,
        29,
        25,
        23,
        79,
        47,
        74,
        78,
        36,
        39,
        50,
        33,
        29,
        27,
        67,
        72,
        92,
        59,
        44,
        56,
        37,
        35,
        29,
        34,
        90,
        59,
        44,
        56,
        38,
        43,
        90,
        93,
        37,
        35,
        29,
        25,
        67,
        63,
        77,
        47,
        37,
        64,
        33,
        44,
        96,
        75,
        33,
        29,
        50,
        40,
        51,
        33,
        31,
        25,
        30,
        71,
        50,
        40,
        51,
        34,
        39,
        84,
        33,
        31,
        25,
        21,
        90,
        50,
        32,
        39,
        56,
        29,
        26,
        31,
        42,
        25,
        23,
        60,
        46,
        32,
        51,
        25,
        23,
        19,
        115,
        13,
        27,
        67,
        45,
        35,
        69,
        34,
        19,
        13,
        9,
        7,
        1,
        49052
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/revisions.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/revisions.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "import { prisma } from '../database/db';\nimport { DeleteRevision, FetchAquaTreeRequest, SaveRevision } from '../models/request_models';\nimport { getHost, getPort } from '../utils/api_utils';\nimport { createAquaTreeFromRevisions, FetchRevisionInfo, findAquaTreeRevision } from '../utils/revisions_utils';\n// import { formatTimestamp } from '../utils/time_utils';\n// import { AquaForms, FileIndex, Signature, WitnessEvent, Revision as RevisonDB } from 'prisma/client';\nimport { AquaTree, FileObject, OrderRevisionInAquaTree, Revision } from 'aqua-js-sdk';\nimport { FastifyInstance } from 'fastify';\nimport * as fs from \"fs\"\nimport path from 'path';\n\nexport default async function revisionsController(fastify: FastifyInstance) {\n    // fetch aqua tree from a revision hash\n    fastify.post('/tree/data', async (request, reply) => {\n\n        const { latestRevisionHash } = request.body as FetchAquaTreeRequest;\n        // fetch all from latetst\n\n        let latestHashInDb = await prisma.latest.findFirst({\n            where: {\n                hash: latestRevisionHash\n                // user: session.address\n            }\n        });\n\n        if (latestHashInDb == null) {\n            return reply.code(403).send({ message: \"hash does not exist in latet revision\", data: [] });\n        }\n\n        // traverse from the latest to the genesis of each \n        //  console.log(`data ${JSON.stringify(latestRevisionHash, null, 4)}`)\n\n\n        let displayData: Array<{\n            aquaTree: AquaTree,\n            fileObject: FileObject[]\n        }> = []\n\n\n        // Get the host from the request headers\n        const host = request.headers.host || `${getHost()}:${getPort()}`;\n\n        // Get the protocol (http or https)\n        const protocol = request.protocol || 'https'\n        // if(backendurl)\n        // Construct the full URL\n        const url = `${protocol}://${host}`;\n\n        // // Get the host from the request headers, with more robust fallback\n        // const host = request.headers.host ||\n        //     request.headers['x-forwarded-host'] ||\n        //     `${getHost()}:${getPort()}`;\n\n        // // Get the protocol with more robust detection\n        // const protocol = Array.isArray(request.headers['x-forwarded-proto']) \n        //     ? request.headers['x-forwarded-proto'][0] \n        //     : (request.headers['x-forwarded-proto'] as string | undefined) ||\n        //       request.protocol ||\n        //       'https';  // Default to https\n\n        // // Construct the full URL\n        // const url = `${protocol}://${host}`;\n\n        try {\n\n            const [anAquaTree, fileObject] = await createAquaTreeFromRevisions(latestRevisionHash, url)\n\n            ////  console.log(`----> ${JSON.stringify(anAquaTree, null, 4)}`)\n            let sortedAquaTree = OrderRevisionInAquaTree(anAquaTree)\n            displayData.push({\n                aquaTree: sortedAquaTree,\n                fileObject: fileObject\n            })\n        } catch (e) {\n            return reply.code(500).send({ success: false, message: `Error ${e}` });\n\n        }\n\n        return reply.code(200).send({ data: displayData })\n\n    });\n\n    // save revision \n    fastify.post('/tree', async (request, reply) => {\n        try {\n            // Read `nonce` from headers\n            const nonce = request.headers['nonce']; // Headers are case-insensitive\n\n            // Check if `nonce` is missing or empty\n            if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n                return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n            }\n\n            const session = await prisma.siweSession.findUnique({\n                where: { nonce }\n            });\n\n            if (!session) {\n                return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n            }\n\n            const revisionData = request.body as SaveRevision\n\n            if (!revisionData.revision) {\n                return reply.code(400).send({ success: false, message: \"revision Data is required\" });\n            }\n            if (!revisionData.revisionHash) {\n                return reply.code(400).send({ success: false, message: \"revision hash is required\" });\n            }\n\n            if (!revisionData.revision.revision_type) {\n                return reply.code(400).send({ success: false, message: \"revision type is required\" });\n            }\n\n            if (!revisionData.revision.local_timestamp) {\n                return reply.code(400).send({ success: false, message: \"revision timestamp is required\" });\n            }\n\n            if (!revisionData.revision.previous_verification_hash) {\n                return reply.code(400).send({ success: false, message: \"previous revision hash  is required\" });\n            }\n\n\n\n\n            let oldFilePubKeyHash = `${session.address}_${revisionData.revision.previous_verification_hash}`\n\n\n            let existData = await prisma.latest.findFirst({\n                where: {\n                    hash: oldFilePubKeyHash\n                }\n            });\n\n            if (existData == null) {\n                return reply.code(401).send({ success: false, message: `previous  hash  not found ${oldFilePubKeyHash}` });\n\n            }\n\n            let filePubKeyHash = `${session.address}_${revisionData.revisionHash}`\n\n\n            await prisma.latest.updateMany({\n                where: {\n                    OR: [\n                        { hash: oldFilePubKeyHash },\n                        {\n                            hash: {\n                                contains: oldFilePubKeyHash,\n                                mode: 'insensitive'\n                            }\n                        }\n                    ]\n                },\n                data: {\n                    hash: filePubKeyHash\n                }\n            });\n\n            const existingRevision = await prisma.revision.findUnique({\n                where: {\n                    pubkey_hash: filePubKeyHash\n                }\n            });\n\n            if (existingRevision) {\n                // Handle the case where the revision already exists\n                // Maybe return an error or update the existing record\n                return reply.code(409).send({ success: false, message: \"Revision with this hash already exists\" });\n            }\n\n            // Insert new revision into the database\n            await prisma.revision.create({\n                data: {\n                    pubkey_hash: filePubKeyHash,\n                    nonce: revisionData.revision.file_nonce || \"\",\n                    shared: [],\n                    // contract: revisionData.witness_smart_contract_address\n                    //     ? [{ address: revisionData.witness_smart_contract_address }]\n                    //     : [],\n                    previous: `${session.address}_${revisionData.revision.previous_verification_hash}`,\n                    // children: {},\n                    local_timestamp: revisionData.revision.local_timestamp, // revisionData.revision.local_timestamp,\n                    revision_type: revisionData.revision.revision_type,\n                    verification_leaves: revisionData.revision.leaves || [],\n\n                },\n            });\n\n            if (revisionData.revision.revision_type == \"form\") {\n                let revisioValue = Object.keys(revisionData);\n                for (let formItem in revisioValue) {\n                    if (formItem.startsWith(\"form_\")) {\n                        await prisma.aquaForms.create({\n                            data: {\n                                hash: filePubKeyHash,\n                                key: formItem,\n                                value: revisioValue[formItem],\n                                type: typeof revisioValue[formItem]\n                            }\n                        });\n                    }\n                }\n            }\n\n            if (revisionData.revision.revision_type == \"signature\") {\n                let signature = \"\";\n                if (typeof revisionData.revision.signature == \"string\") {\n                    signature = revisionData.revision.signature\n                } else {\n                    signature = JSON.stringify(revisionData.revision.signature)\n                }\n\n\n                console.log(`Data stringify  ${JSON.stringify(revisionData.revision, null, 4)}`)\n                // process.exit(1);\n                await prisma.signature.upsert({\n                    where: {\n                        hash: filePubKeyHash\n                    },\n                    update: {\n                        reference_count: {\n                            increment: 1\n                        }\n                    },\n                    create: {\n                        hash: filePubKeyHash,\n                        signature_digest: signature,\n                        signature_wallet_address: revisionData.revision.signature_wallet_address,\n                        signature_type: revisionData.revision.signature_type,\n                        signature_public_key: revisionData.revision.signature_public_key,\n                        reference_count: 1\n                    }\n                });\n\n            }\n\n\n            if (revisionData.revision.revision_type == \"witness\") {\n\n\n\n                // const witnessTimestamp = new Date();\n                await prisma.witnessEvent.upsert({\n                    where: {\n                        Witness_merkle_root: revisionData.revision.witness_merkle_root!\n                    },\n                    update: {\n                        Witness_merkle_root: revisionData.revision.witness_merkle_root!,\n                        Witness_timestamp: revisionData.revision.witness_timestamp!.toString(),\n                        Witness_network: revisionData.revision.witness_network,\n                        Witness_smart_contract_address: revisionData.revision.witness_smart_contract_address,\n                        Witness_transaction_hash: revisionData.revision.witness_transaction_hash,\n                        Witness_sender_account_address: revisionData.revision.witness_sender_account_address\n                    },\n                    create: {\n                        Witness_merkle_root: revisionData.revision.witness_merkle_root!,\n                        Witness_timestamp: revisionData.revision.witness_timestamp!.toString(),\n                        Witness_network: revisionData.revision.witness_network,\n                        Witness_smart_contract_address: revisionData.revision.witness_smart_contract_address,\n                        Witness_transaction_hash: revisionData.revision.witness_transaction_hash,\n                        Witness_sender_account_address: revisionData.revision.witness_sender_account_address\n\n                    }\n                });\n\n\n                await prisma.witness.upsert({\n                    where: {\n                        hash: filePubKeyHash\n                    },\n                    update: {\n                        reference_count: {\n                            increment: 1\n                        }\n                    },\n                    create: {\n                        hash: filePubKeyHash,\n                        Witness_merkle_root: revisionData.revision.witness_merkle_root,\n                        reference_count: 1  // Starting with 1 since this is the first reference\n                    }\n                });\n            }\n\n\n            if (revisionData.revision.revision_type == \"link\") {\n                await prisma.link.create({\n                    data: {\n                        hash: filePubKeyHash,\n                        link_type: \"aqua\",\n                        link_require_indepth_verification: false,\n                        link_verification_hashes: revisionData.revision.link_verification_hashes,\n                        link_file_hashes: revisionData.revision.link_file_hashes,\n                        reference_count: 0\n                    }\n                })\n            }\n\n            if (revisionData.revision.revision_type == \"file\") {\n\n                return reply.code(500).send({\n                    message: \"not implemented\",\n                });\n            }\n\n            return reply.code(200).send({\n                success: true,\n                message: \"Revisions stored successfully\",\n\n            });\n\n        } catch (error) {\n            request.log.error(error);\n            return reply.code(500).send({ error: \"Failed to process revisions\" });\n        }\n    });\n\n    fastify.delete('/tree', async (request, reply) => {\n        // Read `nonce` from headers\n        const nonce = request.headers['nonce']; // Headers are case-insensitive\n\n        // Check if `nonce` is missing or empty\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce }\n        });\n\n        if (!session) {\n            return reply.code(403).send({ success: false, message: \"Nonce is invalid\" });\n        }\n\n        const revisionDataPar = request.body as DeleteRevision;\n\n        if (!revisionDataPar.revisionHash) {\n            return reply.code(400).send({ success: false, message: \"revision hash is required\" });\n        }\n\n        //fetch aqua tree \n        // filterthe revsion to delet\n        // organise aqua trre\n        // make sure to updat latest \n\n\n\n        const revisionHashestoDelete: Array<String> = revisionDataPar.revisionHash.split(\",\")\n\n        for (let i = 0; i < revisionHashestoDelete.length; i++) {\n\n\n            let currentHash = revisionHashestoDelete[i]\n            let pubkeyhash = `${session.address}_${currentHash}`;\n            console.log(`Public_key_hash_to_delete: ${pubkeyhash}`)\n\n\n\n\n\n            // fetch specific revision \n            let latestRevionData = await prisma.revision.findFirst({\n                where: {\n                    pubkey_hash: pubkeyhash\n                }\n            });\n\n            if (latestRevionData == null) {\n                return reply.code(500).send({ success: false, message: `revision with hash ${currentHash} not found in system` });\n            }\n\n\n            //\n            const latestExist = await prisma.latest.findUnique({\n                where: { hash: pubkeyhash }\n            });\n\n            if (latestExist != null) {\n\n                if (latestRevionData.previous != null) {\n                    await prisma.latest.update({\n                        where: {\n                            hash: pubkeyhash\n                        },\n                        data: {\n                            hash: latestRevionData.previous\n                        }\n                    })\n                }\n            }\n\n            try {\n                // Use Prisma transaction to ensure all or nothing execution\n                await prisma.$transaction(async (tx) => {\n                    // const revisionPubkeyHashes = revisionData.map(rev => rev.pubkey_hash);\n                    const revisionPubkeyHashes = [pubkeyhash]\n\n                    // Step 1: First delete all entries in related tables that reference our revisions\n                    // We need to delete child records before parent records to avoid foreign key constraints\n\n                    // Delete AquaForms entries\n                    await tx.aquaForms.deleteMany({\n                        where: {\n                            hash: {\n                                in: revisionPubkeyHashes\n                            }\n                        }\n                    });\n\n                    // Delete Signature entries\n                    await tx.signature.deleteMany({\n                        where: {\n                            hash: {\n                                in: revisionPubkeyHashes\n                            }\n                        }\n                    });\n\n                    // Delete Witness entries (note: we need to handle WitnessEvent separately)\n                    const witnesses = await tx.witness.findMany({\n                        where: {\n                            hash: {\n                                in: revisionPubkeyHashes\n                            }\n                        }\n                    });\n\n                    const witnessRoots = witnesses.map(w => w.Witness_merkle_root).filter(Boolean);\n\n                    await tx.witness.deleteMany({\n                        where: {\n                            hash: {\n                                in: revisionPubkeyHashes\n                            }\n                        }\n                    });\n\n                    // Check if any WitnessEvents are no longer referenced\n                    for (const root of witnessRoots) {\n                        const remainingWitnesses = await tx.witness.count({\n                            where: {\n                                Witness_merkle_root: root\n                            }\n                        });\n\n                        if (remainingWitnesses === 0 && root) {\n                            await tx.witnessEvent.delete({\n                                where: {\n                                    Witness_merkle_root: root\n                                }\n                            });\n                        }\n                    }\n\n                    // Delete Link entries\n                    await tx.link.deleteMany({\n                        where: {\n                            hash: {\n                                in: revisionPubkeyHashes\n                            }\n                        }\n                    });\n\n                    // Handle File entries\n                    // First, find all files related to our revisions\n                    const files = await tx.file.findMany({\n                        where: {\n                            hash: {\n                                in: revisionPubkeyHashes\n                            }\n                        }\n                    });\n\n                    // Handle FileIndex entries first (as they reference files)\n                    for (const file of files) {\n                        // Find FileIndex entries that reference this file\n                        const fileIndexEntries = await tx.fileIndex.findMany({\n                            where: {\n                                hash: {\n                                    has: file.hash\n                                }\n                            }\n                        });\n\n                        for (const fileIndex of fileIndexEntries) {\n                            if ((fileIndex.reference_count || 0) <= 1) {\n                                // If this is the last reference, delete the FileIndex entry\n                                await tx.fileIndex.delete({\n                                    where: {\n                                        id: fileIndex.id\n                                    }\n                                });\n                            } else {\n                                // Otherwise, remove the reference and decrement the count\n                                await tx.fileIndex.update({\n                                    where: {\n                                        id: fileIndex.id\n                                    },\n                                    data: {\n                                        hash: fileIndex.hash.filter(h => h !== file.hash),\n                                        reference_count: (fileIndex.reference_count || 0) - 1\n                                    }\n                                });\n                            }\n                        }\n\n                        // Now we can safely handle the file itself\n                        if ((file.reference_count || 0) <= 1) {\n                            // If this is the last reference, delete the file\n                            if (file.content) {\n                                try {\n                                    fs.unlinkSync(file.content);\n                                } catch (er) {\n                                    //  console.log(\"Error deleting file from filesystem:\", er);\n                                    // Continue even if file deletion fails\n                                }\n                            }\n\n                            await tx.file.delete({\n                                where: {\n                                    hash: file.hash\n                                }\n                            });\n                        } else {\n                            // Otherwise, decrement the reference count\n                            await tx.file.update({\n                                where: {\n                                    hash: file.hash\n                                },\n                                data: {\n                                    reference_count: (file.reference_count || 0) - 1\n                                }\n                            });\n                        }\n                    }\n\n                    // Step 2: Remove any references to our revisions from other revisions\n                    await tx.revision.updateMany({\n                        where: {\n                            previous: {\n                                in: revisionPubkeyHashes\n                            }\n                        },\n                        data: {\n                            previous: null\n                        }\n                    });\n\n\n\n                    // Step 4: Finally, delete all revisions\n                    await tx.revision.delete({\n                        where: {\n                            pubkey_hash: pubkeyhash\n                        }\n                    });\n                });\n\n                return reply.code(200).send({ success: true, message: \"File and revisions deleted successfully\" });\n            } catch (error: any) {\n                console.error(\"Error in delete operation:\", error);\n                return reply.code(500).send({\n                    success: false,\n                    message: `Error deleting file: ${error.message}`,\n                    details: error\n                });\n            }\n        }\n\n    });\n\n}\n"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/share.ts": {
      "lineLengths": [
        40,
        59,
        54,
        54,
        106,
        56,
        26,
        43,
        64,
        50,
        40,
        62,
        94,
        9,
        47,
        73,
        98,
        9,
        13,
        65,
        32,
        15,
        27,
        94,
        13,
        42,
        64,
        92,
        13,
        95,
        64,
        24,
        30,
        17,
        15,
        39,
        120,
        13,
        149,
        113,
        13,
        67,
        94,
        52,
        77,
        47,
        57,
        37,
        48,
        33,
        27,
        27,
        87,
        81,
        50,
        110,
        13,
        18,
        104,
        13,
        69,
        75,
        30,
        41,
        38,
        15,
        31,
        31,
        9,
        23,
        60,
        94,
        9,
        7,
        59,
        79,
        36,
        79,
        47,
        73,
        98,
        9,
        61,
        35,
        11,
        30,
        91,
        9,
        51,
        100,
        9,
        60,
        20,
        59,
        13,
        11,
        35,
        103,
        9,
        55,
        72,
        126,
        9,
        30,
        38,
        19,
        40,
        43,
        36,
        40,
        31,
        31,
        34,
        13,
        11,
        104,
        7,
        63,
        50,
        40,
        59,
        62,
        94,
        9,
        47,
        73,
        98,
        9,
        13,
        65,
        39,
        15,
        34,
        95,
        13,
        50,
        45,
        99,
        13,
        34,
        42,
        24,
        30,
        18,
        23,
        35,
        35,
        39,
        17,
        15,
        108,
        9,
        23,
        61,
        94,
        9,
        7,
        71,
        48,
        28,
        47,
        73,
        98,
        9,
        61,
        35,
        11,
        30,
        91,
        9,
        60,
        58,
        20,
        43,
        25,
        45,
        39,
        17,
        13,
        11,
        66,
        7,
        66,
        50,
        40,
        62,
        94,
        9,
        47,
        73,
        98,
        9,
        13,
        65,
        39,
        15,
        34,
        95,
        13,
        50,
        45,
        99,
        13,
        79,
        62,
        24,
        30,
        17,
        15,
        35,
        95,
        13,
        54,
        129,
        13,
        34,
        42,
        24,
        30,
        17,
        15,
        108,
        9,
        23,
        61,
        94,
        9,
        7,
        91,
        57,
        57,
        44,
        100,
        9,
        47,
        73,
        98,
        9,
        61,
        35,
        11,
        30,
        91,
        9,
        58,
        20,
        25,
        35,
        39,
        18,
        27,
        37,
        39,
        18,
        26,
        13,
        11,
        66,
        7,
        1,
        31952
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/share.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/controllers/share.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "import { FastifyInstance, FastifyRequest } from 'fastify';\nimport { SiweMessage } from 'siwe';\nimport { prisma } from '../database/db';\nimport { Settings } from '@prisma/client';\nimport { SessionQuery, ShareRequest, SiweRequest } from '../models/request_models';\n// import { verifySiweMessage } from '../utils/auth_utils';\nimport { AquaTree, FileObject, OrderRevisionInAquaTree } from 'aqua-js-sdk';\nimport { getHost, getPort } from '../utils/api_utils';\nimport { createAquaTreeFromRevisions, fetchAquaTreeWithForwardRevisions, saveAquaTree } from '../utils/revisions_utils';\n\nexport default async function shareController(fastify: FastifyInstance) {\n    // get current session\n    // Can session be used as a middleware?\n\n    fastify.get('/share_data/:hash', async (request, reply) => {\n\n        // Extract the hash parameter from the URL\n        const { hash } = request.params as { hash: string };\n        if (hash == null || hash == undefined || hash == \"\") {\n            return reply.code(406).send({ success: false, message: \"hash not found in url\" });\n\n        }\n        const nonce = request.headers['nonce'];\n\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        try {\n            const session = await prisma.siweSession.findUnique({\n                where: { nonce }\n            });\n\n            if (!session) {\n                return reply.code(401).send({ success: false, message: \"Session not found\" });\n            }\n\n            // Check if session is expired\n            if (new Date(session.expirationTime!!) < new Date()) {\n                return reply.code(401).send({ success: false, message: \"Session expired\" });\n            }\n\n            // check in contracts table if the current user has been granted access to the tree\n            let contractData = await prisma.contract.findFirst({\n                where: {\n                    hash: hash\n                }\n            })\n\n            if (contractData == null) {\n                return reply.code(412).send({ success: false, message: \"The aqua tree share contract does not exist\" });\n\n            }\n\n            if (contractData?.receiver?.toLowerCase() != \"0xfabacc150f2a0000000000000000000000000000\" && contractData?.receiver != session.address) {\n                return reply.code(401).send({ success: false, message: \"The aqua tree is not shared with you\" });\n            }\n\n            // user has permission hence  fetch the enire aqua tree\n            // if option is latest traverse tree into the future from the latest to the latest\n\n            // Get the host from the request headers\n            const host = request.headers.host || `${getHost()}:${getPort()}`;\n\n            // Get the protocol (http or https)\n            const protocol = request.protocol || 'https'\n\n            // Construct the full URL\n            const url = `${protocol}://${host}`;\n\n            let displayData: Array<{\n                aquaTree: AquaTree,\n                fileObject: FileObject[]\n            }> = []\n\n            let anAquaTree: AquaTree\n            let fileObject: FileObject[]\n            let revision_pubkey_hash = `${contractData.sender}_${contractData.latest}`\n            //  console.log(`revision_pubkey_hash == > ${revision_pubkey_hash}`);\n\n            if (contractData.option == \"latest\") {\n                [anAquaTree, fileObject] = await fetchAquaTreeWithForwardRevisions(revision_pubkey_hash, url)\n            } else {\n                [anAquaTree, fileObject] = await createAquaTreeFromRevisions(revision_pubkey_hash, url)\n\n            }\n            let sortedAquaTree = OrderRevisionInAquaTree(anAquaTree)\n\n            //  console.log(`Aqua tree ${JSON.stringify(sortedAquaTree)}`);\n\n            displayData.push({\n                aquaTree: sortedAquaTree,\n                fileObject: fileObject\n            })\n\n            // return aqua tree\n            return displayData\n\n\n        } catch (error) {\n            console.error(\"Error fetching session:\", error);\n            return reply.code(500).send({ success: false, message: \"Internal server error\" });\n        }\n    });\n\n    fastify.post('/share_data', async (request, reply) => {\n\n\n        const { hash, recipient, latest, option, genesis_hash } = request.body as ShareRequest;\n\n        // Read `nonce` from headers\n        const nonce = request.headers['nonce']; // Headers are case-insensitive\n\n        // Check if `nonce` is missing or empty\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce: nonce }\n        });\n\n        if (session == null) {\n            return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n        }\n\n        if (recipient == null || recipient == \"\") {\n            return reply.code(403).send({ success: false, message: \"Recipient need to specified\" });\n        }\n\n\n        let findRevision = await prisma.revision.findFirst({\n            where: {\n                pubkey_hash: `${session.address}_${latest}`\n            }\n        })\n        if (findRevision == null) {\n            return reply.code(406).send({ success: false, message: \"revision with hash  is invalid\" });\n        }\n\n        //validation to check owner is the one sharings\n        if (findRevision.pubkey_hash.split(\"_\")[0] != session.address) {\n            return reply.code(406).send({ success: false, message: `latest ${latest}  does not belong ${session.address} ` });\n        }\n\n        //insert into contract\n        await prisma.contract.create({\n            data: {\n                hash: hash, //identifier\n                genesis_hash: genesis_hash,\n                receiver: recipient,\n                sender: session.address,\n                latest: latest,\n                option: option,\n                reference_count: 1\n            }\n        });\n\n        return reply.code(200).send({ success: true, message: \"share contract created successfully.\" });\n\n    });\n\n    fastify.put('/contracts/:hash', async (request, reply) => {\n        // Extract the hash parameter from the URL\n        const { hash } = request.params as { hash: string };\n        const { recipient, latest, option } = request.body as ShareRequest;\n        if (hash == null || hash == undefined || hash == \"\") {\n            return reply.code(406).send({ success: false, message: \"hash not found in url\" });\n        }\n        const nonce = request.headers['nonce'];\n\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        try {\n            const session = await prisma.siweSession.findUnique({\n                where: { nonce: nonce }\n            });\n\n            if (session == null) {\n                return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n            }\n\n            // Check if `hash` is missing or empty\n            if (hash == null || hash == \"\") {\n                return reply.code(403).send({ success: false, message: \"Hash need to specified\" });\n            }\n\n            // Update the contract\n            await prisma.contract.update({\n                where: {\n                    hash: hash\n                },\n                data: {\n                    latest: latest,\n                    option: option,\n                    receiver: recipient\n                }\n            });\n\n            return reply.code(200).send({ success: true, message: \"Share contract updated successfully.\" });\n        } catch (error) {\n            console.error(\"Error updating contract:\", error);\n            return reply.code(500).send({ success: false, message: \"Internal server error\" });\n        }\n    });\n\n    fastify.get('/contracts/:genesis_hash', async (request, reply) => {\n        const { genesis_hash } = request.params as { genesis_hash: string };\n        // Add authorization\n        const nonce = request.headers['nonce'];\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce: nonce }\n        });\n        if (session == null) {\n            return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n        }\n        // Get all contracts with the specified genesis hash\n        const contracts = await prisma.contract.findMany({\n            where: {\n                genesis_hash: genesis_hash,\n                sender: {\n                    equals: session?.address,\n                    mode: 'insensitive'\n                }\n            }\n        });\n        return reply.code(200).send({ success: true, contracts });\n    })\n\n\n    fastify.delete('/contracts/:hash', async (request, reply) => {\n\n        // Extract the hash parameter from the URL\n        const { hash } = request.params as { hash: string };\n        if (hash == null || hash == undefined || hash == \"\") {\n            return reply.code(406).send({ success: false, message: \"hash not found in url\" });\n        }\n        const nonce = request.headers['nonce'];\n\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        try {\n            const session = await prisma.siweSession.findUnique({\n                where: { nonce: nonce }\n            });\n\n            if (session == null) {\n                return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n            }\n\n            // Check if `hash` is missing or empty\n            if (hash == null || hash == \"\") {\n                return reply.code(403).send({ success: false, message: \"Hash need to specified\" });\n            }\n            // Query the contract first, if contract.sender === session.address\n            const contract = await prisma.contract.findFirst({\n                where: {\n                    hash: hash\n                }\n            });\n            if (contract == null) {\n                return reply.code(404).send({ success: false, message: \"Contract not found\" });\n            }\n            if (contract.sender !== session.address) {\n                return reply.code(403).send({ success: false, message: \"Unauthorized: You are not the owner of this contract\" });\n            }\n\n            // Delete the contract\n            await prisma.contract.delete({\n                where: {\n                    hash: hash\n                }\n            });\n\n            return reply.code(200).send({ success: true, message: \"Share contract deleted successfully.\" });\n        } catch (error) {\n            console.error(\"Error deleting contract:\", error);\n            return reply.code(500).send({ success: false, message: \"Internal server error\" });\n        }\n    });\n\n    // Create an endpoint for filtering contracts, ie filter by sender, receiver, hash, etc\n\n    fastify.get('/contracts', async (request, reply) => {\n        const { sender, receiver, hash } = request.query as { sender?: string, receiver?: string, hash?: string };\n\n        if (!sender && !receiver && !hash) {\n            return reply.code(400).send({ success: false, message: \"Missing required parameters\" });\n        }\n\n        const nonce = request.headers['nonce'];\n\n        if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n            return reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n        }\n\n        const session = await prisma.siweSession.findUnique({\n            where: { nonce: nonce }\n        });\n\n        if (session == null) {\n            return reply.code(403).send({ success: false, message: \"Nounce  is invalid\" });\n        }\n\n        const contracts = await prisma.contract.findMany({\n            where: {\n                sender: {\n                    equals: sender,\n                    mode: 'insensitive'\n                },\n                receiver: {\n                    equals: receiver,\n                    mode: 'insensitive'\n                },\n                hash: hash\n            }\n        });\n        return reply.code(200).send({ success: true, contracts });\n    });\n\n\n}"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/test_routes/fetch-chain.ts": {
      "lineLengths": [
        40,
        66,
        51,
        48,
        83,
        59,
        42,
        106,
        9,
        13,
        49,
        92,
        56,
        48,
        133,
        32,
        96,
        96,
        120,
        116,
        75,
        74,
        19,
        50,
        155,
        17,
        22,
        131,
        182,
        17,
        13,
        43,
        47,
        9,
        23,
        94,
        112,
        9,
        7,
        27,
        1,
        6552
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/test_routes/fetch-chain.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/test_routes/fetch-chain.ts"
        ],
        "names": [],
        "mappings": "AACA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,0BAA0B,EAAE,MAAM,sBAAsB,CAAC;AAGlE,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,UAAU,CAAC,OAAwB;IAE7D,4CAA4C;IAC5C,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,KAAK,EAAE,OAAgF,EAAE,KAAmB,EAAE,EAAE;QAChK,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;QAEnD,IAAI,CAAC,WAAW,IAAI,CAAC,UAAU,EAAE,CAAC;YAC9B,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qDAAqD,EAAE,CAAC,CAAC;QAClG,CAAC;QAED,IAAI,CAAC;YACD,qCAAqC;YACrC,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,gBAAgB,CAAC,CAAC,yBAAyB;YAChF,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,MAAM,CAAC;YAC5C,MAAM,GAAG,GAAG,GAAG,QAAQ,MAAM,IAAI,EAAE,CAAC;YAEpC,OAAO,CAAC,GAAG,CAAC,wDAAwD,WAAW,gBAAgB,UAAU,SAAS,GAAG,EAAE,CAAC,CAAC;YAEzH,oBAAoB;YACpB,MAAM,YAAY,GAAG,MAAM,0BAA0B,CAAC,UAAU,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;YAEpF,oFAAoF;YACpF,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvG,oGAAoG;gBACpG,MAAM,qBAAqB,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;oBACtD,KAAK,EAAE,EAAE,WAAW,EAAE,GAAG,WAAW,IAAI,UAAU,EAAE,EAAE;iBACzD,CAAC,CAAC;gBACH,IAAI,qBAAqB,KAAK,CAAC,EAAE,CAAC;oBAC/B,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,yBAAyB,UAAU,uBAAuB,WAAW,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;gBAC1I,CAAC;qBAAM,CAAC;oBACL,+GAA+G;oBAC9G,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,mGAAmG,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;gBACtK,CAAC;YACN,CAAC;YAED,+BAA+B;YAC/B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEvC,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YAClB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,4BAA4B,WAAW,IAAI,UAAU,EAAE,CAAC,CAAC;YAClF,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,0CAA0C,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACxG,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,uBAAuB;AAC3B,CAAC",
        "sourcesContent": [
          "\nimport { prisma } from \"../database/db\";\nimport { fetchCompleteRevisionChain } from \"../utils/quick_utils\";\nimport { FastifyInstance, FastifyRequest, FastifyReply } from \"fastify\";\n\nexport default async function testRoutes(fastify: FastifyInstance) {\n\n    // Test route for fetchCompleteRevisionChain\n    fastify.get('/test/chain/:userAddress/:latestHash', async (request: FastifyRequest<{ Params: { userAddress: string; latestHash: string } }>, reply: FastifyReply) => {\n        const { userAddress, latestHash } = request.params;\n\n        if (!userAddress || !latestHash) {\n            return reply.code(400).send({ error: 'userAddress and latestHash parameters are required.' });\n        }\n\n        try {\n            // Construct the base URL dynamically\n            const host = request.headers.host || 'localhost:3000'; // Provide a default host\n            const protocol = request.protocol || 'http';\n            const url = `${protocol}://${host}`;\n\n            console.log(`Testing fetchCompleteRevisionChain with: userAddress=${userAddress}, latestHash=${latestHash}, url=${url}`);\n\n            // Call the function\n            const completeTree = await fetchCompleteRevisionChain(latestHash, userAddress, url);\n\n            // Check if the tree is empty (which might indicate the hash wasn't found initially)\n            if (Object.keys(completeTree.revisions).length === 0 && Object.keys(completeTree.file_index).length === 0) {\n                 // You might want to check if the initial hash actually exists in the DB for a more specific message\n                 const initialRevisionExists = await prisma.revision.count({\n                     where: { pubkey_hash: `${userAddress}_${latestHash}` }\n                 });\n                 if (initialRevisionExists === 0) {\n                    return reply.code(404).send({ message: `Initial revision hash ${latestHash} not found for user ${userAddress}.`, tree: completeTree });\n                 } else {\n                    // Hash exists, but chain building resulted in empty tree (e.g., maybe only links leading to processed hashes?)\n                     return reply.code(200).send({ message: \"Chain processed, resulting tree is empty (check logs for potential warnings like circular links).\", tree: completeTree });\n                 }\n            }\n\n            // Send the successful response\n            reply.code(200).send(completeTree);\n\n        } catch (error: any) {\n            request.log.error(error, `Error fetching chain for ${userAddress}_${latestHash}`);\n            reply.code(500).send({ error: 'Failed to fetch complete revision chain.', details: error.message });\n        }\n    });\n\n    // ... other routes ...\n}"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/database/db.ts": {
      "lineLengths": [
        46,
        34,
        18,
        716
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/database/db.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/database/db.ts"
        ],
        "names": [],
        "mappings": "AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE9C,MAAM,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;AAMlC,OAAO,EACH,MAAM,EACT,CAAA",
        "sourcesContent": [
          "import { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\n\n\n\n\nexport {\n    prisma\n}"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/api_utils.ts": {
      "lineLengths": [
        32,
        23,
        43,
        2,
        23,
        44,
        2,
        58,
        21,
        9,
        38,
        107,
        43,
        68,
        5,
        19,
        57,
        50,
        5,
        19,
        2,
        42,
        2476
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/api_utils.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/api_utils.ts"
        ],
        "names": [],
        "mappings": "AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAA;AAI/B,MAAM,OAAO,GAAE,GAAW,EAAE;IAC1B,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,WAAW,CAAA;AACxC,CAAC,CAAA;AAGD,MAAM,OAAO,GAAG,GAAY,EAAE;IAE1B,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAA;AAC3C,CAAC,CAAA;AAED,MAAM,YAAY,GAAG,KAAK,EAAE,aAAsB,EAAG,SAAkB,EAAkB,EAAE;IACzF,IAAI,OAAO,GAAC,EAAE,CAAC;IACf,IAAI,CAAC;QACH,8BAA8B;QAC9B,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,eAAe,CACnD,gCAAgC,SAAS,EAAE,CAC5C,CAAC;QAEF,mCAAmC;QAClC,OAAO,GAAG,MAAM,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAG/D,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;QAEjD,0CAA0C;IAC5C,CAAC;IAED,OAAO,OAAO,CAAA;AAChB,CAAC,CAAA;AAKD,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAC,CAAA",
        "sourcesContent": [
          "import { ethers } from \"ethers\"\n\n\n\nconst getHost =(): string =>{\n  return process.env.HOST || '127.0.0.1'\n}\n\n\nconst getPort = () : number =>{\n\n    return Number(process.env.PORT) || 3000\n}\n\nconst fetchEnsName = async (walletAddress : string,  infuraKey : string): Promise<string>=>{\n  let ensName=\"\";\n  try {\n    // Create an Ethereum provider\n    const provider = new ethers.providers.JsonRpcProvider(\n      `https://mainnet.infura.io/v3/${infuraKey}`\n    );\n    \n    // Look up ENS name for the address\n     ensName = await provider.lookupAddress(walletAddress) ?? \"\";\n    \n   \n  } catch (error) {\n    console.error('Error fetching ENS name:', error);\n    \n    // Continue with creation without ENS name\n  }\n\n  return ensName\n}\n\n\n\n\nexport { getHost, getPort, fetchEnsName}"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/middleware/auth_middleware.ts": {
      "lineLengths": [
        40,
        52,
        43,
        69,
        87,
        21,
        5,
        57,
        31,
        7,
        26,
        78,
        21,
        5,
        67,
        20,
        32,
        6,
        16,
        1,
        31,
        55,
        51,
        62,
        42,
        57,
        85,
        63,
        56,
        10,
        1,
        3860
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/middleware/auth_middleware.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/middleware/auth_middleware.ts"
        ],
        "names": [],
        "mappings": "AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAUxC,MAAM,CAAC,KAAK,UAAU,YAAY,CAC9B,OAA6B,EAC7B,KAAmB;IAEnB,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAEvC,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;QAC/D,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,6CAA6C,EAAE,CAAC,CAAC;QAC/E,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC;QAClD,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;KACxB,CAAC,CAAC;IAEH,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;QACpB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC,CAAC;QACtE,OAAO,KAAK,CAAC;IACf,CAAC;IAED,+DAA+D;IAC/D,OAAO,CAAC,IAAI,GAAG;QACb,OAAO,EAAE,OAAO,CAAC,OAAO;KACzB,CAAC;IAEF,OAAO,IAAI,CAAC;AACd,CAAC;AAED,+BAA+B;AAC/B,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,cAAc,CAAC,OAAa;IACxD,OAAO,CAAC,QAAQ,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IAE/C,0DAA0D;IAC1D,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAEtC,qDAAqD;IACrD,iFAAiF;IAC/E,2DAA2D;IAC3D,oDAAoD;IACtD,MAAM;AACR,CAAC",
        "sourcesContent": [
          "import { prisma } from \"../database/db\";\nimport { FastifyReply, FastifyRequest } from \"fastify\";\n\nexport interface AuthenticatedRequest extends FastifyRequest {\n\n  user?: {\n    address: string;\n  };\n}\n\nexport async function authenticate(\n    request: AuthenticatedRequest,\n    reply: FastifyReply\n  ): Promise<boolean> {\n    const nonce = request.headers['nonce'];\n    \n    if (!nonce || typeof nonce !== 'string' || nonce.trim() === '') {\n      reply.code(401).send({ error: 'Unauthorized: Missing or empty nonce header' });\n      return false;\n    }\n    \n    const session = await prisma.siweSession.findUnique({\n      where: { nonce: nonce }\n    });\n    \n    if (session == null) {\n      reply.code(403).send({ success: false, message: \"Nonce is invalid\" });\n      return false;\n    }\n    \n    // Optionally attach the user info to the request for later use\n    request.user = {\n      address: session.address\n    };\n    \n    return true;\n  }\n  \n  // Register as a Fastify plugin\n  export default async function authMiddleware(fastify : any) {\n    fastify.decorate('authenticate', authenticate);\n    \n    // Create a preHandler hook that can be used across routes\n    fastify.decorateRequest('user', null);\n    \n    // onRequest hook that runs before all route handlers\n    // fastify.addHook('onRequest', async (request: AuthenticatedRequest, reply) => {\n      // This would apply to ALL routes, which you might not want\n      // Use this only if you want authentication globally\n    // });\n  }"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/auth_utils.ts": {
      "lineLengths": [
        35,
        61,
        9,
        33,
        53,
        36,
        44,
        58,
        40,
        42,
        46,
        44,
        51,
        22,
        27,
        24,
        11,
        31,
        55,
        20,
        30,
        24,
        31,
        22,
        50,
        14,
        9,
        14,
        66,
        9,
        5,
        19,
        56,
        5,
        1,
        3068
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/auth_utils.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/auth_utils.ts"
        ],
        "names": [],
        "mappings": "AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,MAAM,CAAC;AAGnC,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,OAAe,EAAE,SAAiB;IACtE,IAAI,CAAC;QACH,yBAAyB;QACzB,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;QAE7C,4BAA4B;QAC5B,MAAM,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC;QACpC,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;QAClD,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;QAChC,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;QAClC,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QAEtC,oCAAoC;QACpC,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,MAAM,CAAC;YACxC,SAAS;YACT,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QAEH,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC;YACrB,2CAA2C;YAC3C,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,OAAO;gBACP,cAAc;gBACd,KAAK;gBACL,kCAAkC;aACnC,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,mBAAmB,EAAE,CAAC;QACxD,CAAC;IACH,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;IAClD,CAAC;AACH,CAAC",
        "sourcesContent": [
          "import { SiweMessage } from \"siwe\";\n\n\nexport async function verifySiweMessage(message: string, signature: string) {\n    try {\n      // Parse the SIWE message\n      const siweMessage = new SiweMessage(message);\n      \n      // Extract the data you need\n      const address = siweMessage.address;\n      const expirationTime = siweMessage.expirationTime;\n      const nonce = siweMessage.nonce;\n      const domain = siweMessage.domain;\n      const issuedAt = siweMessage.issuedAt;\n      \n      // You can also verify the signature\n      const verified = await siweMessage.verify({\n        signature,\n        domain: domain,\n        nonce: nonce\n      });\n      \n      if (verified.success) {\n        // The message is valid and properly signed\n        return {\n          isValid: true,\n          address,\n          expirationTime,\n          nonce,\n          // Other properties you might need\n        };\n      } else {\n        return { isValid: false, error: 'Invalid signature' };\n      }\n    } catch (error: any) {\n      return { isValid: false, error: error.message };\n    }\n  }"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/revisions_utils.ts": {
      "lineLengths": [
        54,
        40,
        25,
        24,
        56,
        55,
        62,
        25,
        43,
        102,
        71,
        65,
        26,
        37,
        34,
        11,
        5,
        23,
        1,
        59,
        50,
        49,
        56,
        32,
        16,
        32,
        10,
        17,
        33,
        30,
        10,
        17,
        33,
        30,
        9,
        7,
        27,
        40,
        59,
        57,
        32,
        65,
        89,
        9,
        85,
        142,
        48,
        38,
        20,
        39,
        14,
        21,
        40,
        104,
        53,
        27,
        41,
        62,
        58,
        63,
        14,
        21,
        40,
        104,
        53,
        27,
        41,
        62,
        58,
        63,
        14,
        11,
        51,
        57,
        48,
        51,
        51,
        32,
        44,
        26,
        33,
        45,
        42,
        58,
        63,
        26,
        33,
        45,
        42,
        58,
        63,
        25,
        23,
        17,
        13,
        9,
        56,
        31,
        60,
        51,
        13,
        18,
        67,
        13,
        75,
        43,
        24,
        36,
        18,
        25,
        38,
        36,
        21,
        18,
        25,
        37,
        48,
        84,
        64,
        76,
        38,
        17,
        15,
        9,
        54,
        41,
        24,
        36,
        18,
        25,
        38,
        36,
        21,
        18,
        25,
        37,
        74,
        91,
        17,
        15,
        52,
        46,
        24,
        74,
        18,
        25,
        74,
        82,
        66,
        96,
        84,
        95,
        18,
        25,
        74,
        82,
        66,
        96,
        84,
        95,
        17,
        15,
        9,
        51,
        88,
        114,
        13,
        58,
        24,
        27,
        46,
        72,
        21,
        17,
        15,
        37,
        106,
        81,
        13,
        42,
        24,
        25,
        50,
        84,
        21,
        18,
        23,
        67,
        17,
        15,
        33,
        70,
        47,
        15,
        36,
        83,
        47,
        27,
        70,
        78,
        22,
        28,
        48,
        21,
        19,
        13,
        18,
        87,
        13,
        9,
        51,
        63,
        38,
        24,
        37,
        18,
        25,
        37,
        38,
        61,
        84,
        68,
        38,
        18,
        25,
        37,
        38,
        61,
        84,
        68,
        38,
        17,
        15,
        9,
        111,
        50,
        35,
        120,
        13,
        36,
        59,
        60,
        47,
        15,
        70,
        47,
        15,
        36,
        81,
        47,
        44,
        28,
        48,
        21,
        19,
        13,
        9,
        5,
        1,
        82,
        32,
        26,
        39,
        18,
        33,
        64,
        20,
        36,
        13,
        11,
        39,
        18,
        9,
        44,
        49,
        5,
        48,
        34,
        27,
        79,
        5,
        10,
        86,
        5,
        96,
        36,
        1,
        3,
        76,
        84,
        47,
        35,
        3,
        45,
        13,
        17,
        48,
        40,
        32,
        35,
        48,
        57,
        49,
        23,
        27,
        24,
        27,
        25,
        27,
        23,
        10,
        1,
        76,
        32,
        22,
        22,
        22,
        6,
        76,
        26,
        29,
        60,
        16,
        71,
        9,
        7,
        35,
        72,
        82,
        5,
        40,
        9,
        138,
        57,
        60,
        101,
        74,
        94,
        82,
        51,
        9,
        5,
        15,
        79,
        5,
        19,
        61,
        66,
        13,
        42,
        19,
        45,
        12,
        9,
        44,
        16,
        19,
        43,
        64,
        13,
        9,
        7,
        24,
        25,
        24,
        49,
        37,
        80,
        75,
        69,
        56,
        47,
        67,
        75,
        101,
        108,
        69,
        62,
        24,
        49,
        17,
        15,
        54,
        36,
        82,
        13,
        40,
        51,
        121,
        13,
        35,
        59,
        37,
        47,
        29,
        63,
        40,
        25,
        41,
        15,
        9,
        5,
        106,
        44,
        62,
        173,
        97,
        32,
        54,
        57,
        76,
        94,
        10,
        39,
        81,
        88,
        54,
        9,
        51,
        58,
        24,
        27,
        43,
        72,
        21,
        17,
        15,
        37,
        61,
        13,
        79,
        80,
        9,
        14,
        99,
        43,
        86,
        55,
        13,
        55,
        52,
        52,
        68,
        17,
        13,
        63,
        51,
        87,
        100,
        79,
        109,
        97,
        109,
        83,
        13,
        65,
        53,
        57,
        21,
        72,
        73,
        21,
        17,
        31,
        77,
        61,
        17,
        49,
        91,
        99,
        79,
        13,
        60,
        59,
        48,
        70,
        94,
        78,
        74,
        77,
        66,
        28,
        29,
        53,
        76,
        25,
        21,
        19,
        40,
        96,
        17,
        22,
        91,
        114,
        90,
        37,
        52,
        54,
        33,
        97,
        23,
        57,
        17,
        13,
        18,
        98,
        13,
        9,
        50,
        71,
        95,
        109,
        51,
        133,
        64,
        67,
        32,
        17,
        76,
        81,
        15,
        80,
        72,
        75,
        9,
        58,
        5,
        79,
        36,
        1,
        58,
        23,
        29,
        60,
        16,
        37,
        9,
        7,
        35,
        76,
        5,
        37,
        37,
        48,
        60,
        56,
        75,
        9,
        78,
        44,
        5,
        21,
        1,
        57,
        48,
        54,
        49,
        20,
        26,
        13,
        11,
        5,
        51,
        50,
        20,
        26,
        13,
        11,
        26,
        73,
        9,
        52,
        20,
        60,
        13,
        11,
        5,
        48,
        48,
        20,
        26,
        13,
        11,
        5,
        48,
        44,
        20,
        26,
        13,
        11,
        5,
        10,
        75,
        20,
        69,
        5,
        1,
        48,
        27,
        44,
        42,
        5,
        10,
        39,
        58,
        54,
        35,
        5,
        2,
        63,
        37,
        62,
        20,
        33,
        42,
        24,
        54,
        180,
        24,
        9,
        30,
        64,
        24,
        9,
        5,
        42,
        28,
        32,
        95,
        92,
        93,
        64,
        23,
        84,
        89,
        59,
        24,
        66,
        23,
        52,
        6,
        77,
        2,
        42,
        35,
        61,
        42,
        52,
        167,
        81,
        18,
        9,
        5,
        31,
        1,
        3,
        85,
        46,
        56,
        3,
        40,
        41,
        16,
        44,
        5,
        51,
        46,
        77,
        5,
        43,
        78,
        62,
        5,
        44,
        80,
        62,
        5,
        29,
        40,
        46,
        64,
        50,
        112,
        81,
        9,
        90,
        71,
        9,
        89,
        69,
        9,
        62,
        84,
        67,
        78,
        9,
        46,
        46,
        41,
        24,
        86,
        75,
        17,
        88,
        76,
        17,
        22,
        27,
        106,
        88,
        17,
        102,
        86,
        17,
        98,
        84,
        17,
        128,
        99,
        17,
        116,
        93,
        17,
        128,
        99,
        17,
        22,
        29,
        86,
        80,
        17,
        108,
        91,
        17,
        96,
        85,
        17,
        22,
        24,
        86,
        75,
        17,
        116,
        90,
        17,
        72,
        96,
        17,
        69,
        97,
        17,
        22,
        9,
        5,
        58,
        52,
        46,
        5,
        38,
        37,
        1,
        3,
        30,
        38,
        66,
        3,
        38,
        45,
        40,
        36,
        39,
        45,
        13,
        18,
        65,
        13,
        10,
        37,
        26,
        10,
        32,
        7,
        1,
        3,
        37,
        38,
        71,
        3,
        45,
        45,
        40,
        36,
        39,
        45,
        13,
        18,
        65,
        13,
        10,
        37,
        26,
        10,
        39,
        7,
        1,
        83736
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/revisions_utils.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/revisions_utils.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "import { AquaTree, FileObject, Revision as AquaRevision, OrderRevisionInAquaTree } from 'aqua-js-sdk';\nimport { prisma } from '../database/db';\n// For specific model types\nimport { Latest, Signature, Revision, Witness, AquaForms, WitnessEvent, FileIndex, Link } from '@prisma/client';\nimport * as fs from \"fs\"\nimport path from 'path';\n\nexport async function fetchAquatreeFoUser(url: string, latest: Array<{\n    hash: string;\n    user: string;\n}>): Promise<Array<{\n    aquaTree: AquaTree,\n    fileObject: FileObject[]\n}>> {\n    // traverse from the latest to the genesis of each \n    //  console.log(`data ${JSON.stringify(latest, null, 4)}`)\n\n\n    let displayData: Array<{\n        aquaTree: AquaTree,\n        fileObject: FileObject[]\n    }> = []\n\n\n\n    for (let revisonLatetsItem of latest) {\n\n        let [anAquaTree, fileObject] = await createAquaTreeFromRevisions(revisonLatetsItem.hash, url)\n\n        //  console.log(`----> ${JSON.stringify(anAquaTree, null, 4)}`)\n        let sortedAquaTree = OrderRevisionInAquaTree(anAquaTree)\n        displayData.push({\n\n            aquaTree: sortedAquaTree,\n            fileObject: fileObject\n        })\n\n\n    }\n\n    return displayData\n\n}\nexport async function saveAquaTree(aquaTree: AquaTree, userAddress: string,) {\n\n    let allHash = Object.keys(aquaTree.revisions)\n    let latestHash = allHash[allHash.length - 1]\n    let lastPubKeyHash = `${userAddress}_${latestHash}`\n\n    await prisma.latest.upsert({\n        where: {\n            hash: lastPubKeyHash\n        },\n        create: {\n            hash: lastPubKeyHash,\n            user: userAddress,\n        },\n        update: {\n            hash: lastPubKeyHash,\n            user: userAddress,\n        }\n    });\n\n    // insert the revisions\n    for (const revisinHash of allHash) {\n        let revisionData = aquaTree.revisions[revisinHash];\n        let pubKeyHash = `${userAddress}_${revisinHash}`\n        let pubKeyPrevious = \"\"\n        if (revisionData.previous_verification_hash.length > 0) {\n            pubKeyPrevious = `${userAddress}_${revisionData.previous_verification_hash}`\n        }\n        // console.log(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\n        // console.log(`revisinHash ${revisinHash} \\n pubKeyPrevious ${pubKeyPrevious} --- \\n Revision item ${JSON.stringify(revisionData)} `)\n        // Insert new revision into the database\n        await prisma.revision.upsert({\n            where: {\n                pubkey_hash: pubKeyHash\n            },\n            create: {\n                pubkey_hash: pubKeyHash,\n                // user: session.address, // Replace with actual user identifier (e.g., request.user.id)\n                nonce: revisionData.file_nonce ?? \"\",\n                shared: [],\n                previous: pubKeyPrevious,\n                local_timestamp: revisionData.local_timestamp,\n                revision_type: revisionData.revision_type,\n                verification_leaves: revisionData.leaves ?? [],\n\n            },\n            update: {\n                pubkey_hash: pubKeyHash,\n                // user: session.address, // Replace with actual user identifier (e.g., request.user.id)\n                nonce: revisionData.file_nonce ?? \"\",\n                shared: [],\n                previous: pubKeyPrevious,\n                local_timestamp: revisionData.local_timestamp,\n                revision_type: revisionData.revision_type,\n                verification_leaves: revisionData.leaves ?? [],\n\n            },\n        });\n\n\n        if (revisionData.revision_type == \"form\") {\n            let revisioValue = Object.keys(revisionData);\n            for (let formItem in revisioValue) {\n                if (formItem.startsWith(\"form_\")) {\n                    await prisma.aquaForms.upsert({\n                        where: {\n                            hash: pubKeyHash\n                        },\n                        create: {\n                            hash: pubKeyHash,\n                            key: formItem,\n                            value: revisioValue[formItem],\n                            type: typeof revisioValue[formItem]\n                        },\n                        update: {\n                            hash: pubKeyHash,\n                            key: formItem,\n                            value: revisioValue[formItem],\n                            type: typeof revisioValue[formItem]\n                        }\n                    });\n                }\n            }\n        }\n\n        if (revisionData.revision_type == \"signature\") {\n            let signature = \"\";\n            if (typeof revisionData.signature == \"string\") {\n                signature = revisionData.signature\n            } else {\n                signature = JSON.stringify(revisionData.signature)\n            }\n\n\n            //todo consult dalmas if signature_public_key needs tobe stored\n            await prisma.signature.upsert({\n                where: {\n                    hash: pubKeyHash\n                },\n                update: {\n                    reference_count: {\n                        increment: 1\n                    }\n                },\n                create: {\n                    hash: pubKeyHash,\n                    signature_digest: signature,\n                    signature_wallet_address: revisionData.signature_wallet_address,\n                    signature_type: revisionData.signature_type,\n                    signature_public_key: revisionData.signature_public_key,\n                    reference_count: 1\n                }\n            });\n\n        }\n\n\n        if (revisionData.revision_type == \"witness\") {\n\n            await prisma.witness.upsert({\n                where: {\n                    hash: pubKeyHash\n                },\n                update: {\n                    reference_count: {\n                        increment: 1\n                    }\n                },\n                create: {\n                    hash: pubKeyHash,\n                    Witness_merkle_root: revisionData.witness_merkle_root,\n                    reference_count: 1  // Starting with 1 since this is the first reference\n                }\n            });\n\n            // const witnessTimestamp = new Date(!);\n            await prisma.witnessEvent.upsert({\n                where: {\n                    Witness_merkle_root: revisionData.witness_merkle_root!,\n                },\n                update: {\n                    Witness_merkle_root: revisionData.witness_merkle_root!,\n                    Witness_timestamp: revisionData.witness_timestamp?.toString(),\n                    Witness_network: revisionData.witness_network,\n                    Witness_smart_contract_address: revisionData.witness_smart_contract_address,\n                    Witness_transaction_hash: revisionData.witness_transaction_hash,\n                    Witness_sender_account_address: revisionData.witness_sender_account_address\n\n                },\n                create: {\n                    Witness_merkle_root: revisionData.witness_merkle_root!,\n                    Witness_timestamp: revisionData.witness_timestamp?.toString(),\n                    Witness_network: revisionData.witness_network,\n                    Witness_smart_contract_address: revisionData.witness_smart_contract_address,\n                    Witness_transaction_hash: revisionData.witness_transaction_hash,\n                    Witness_sender_account_address: revisionData.witness_sender_account_address\n\n                }\n            });\n        }\n\n\n\n        if (revisionData.revision_type == \"file\") {\n            if (revisionData.file_hash == null || revisionData.file_hash == undefined) {\n                throw Error(`revision with hash ${revisinHash} is detected to be a file but file_hash is mising`);\n            }\n\n            let fileResult = await prisma.file.findFirst({\n                where: {\n                    hash: {\n                        contains: revisinHash,\n                        mode: 'insensitive' // Case-insensitive matching\n                    }\n                }\n            })\n\n            if (fileResult == null) {\n                console.log(`-- > file data should be in database but is not found.hash  ${revisinHash}`);\n                throw Error(`file data should be in database but is not found.`);\n            }\n\n            await prisma.file.updateMany({\n                where: {\n\n                    OR: [\n                        { hash: fileResult.hash },\n                        { hash: { contains: fileResult.hash, mode: 'insensitive' } }\n                    ]\n\n                },\n                data: {\n                    reference_count: fileResult.reference_count! + 1\n                }\n            })\n\n\n            // update  file index\n            let existingFileIndex = await prisma.fileIndex.findFirst({\n                where: { id: fileResult.hash },\n            });\n\n            if (existingFileIndex) {\n                // existingFileIndex.hash = [...existingFileIndex.hash, pubKeyHash]\n                await prisma.fileIndex.update({\n                    data: {\n                        hash: [...existingFileIndex.hash, pubKeyHash],\n                        reference_count: existingFileIndex.reference_count! + 1\n                    },\n                    where: {\n                        id: existingFileIndex.id\n                    }\n                })\n            } else {\n                throw Error(`file index data should be in database but is not found.`);\n            }\n        }\n\n        if (revisionData.revision_type == \"link\") {\n\n            //  console.log(`Revsion data ${JSON.stringify()}`)\n            await prisma.link.upsert({\n                where: {\n                    hash: pubKeyHash,\n                },\n                update: {\n                    hash: pubKeyHash,\n                    link_type: \"aqua\",\n                    link_require_indepth_verification: false,\n                    link_verification_hashes: revisionData.link_verification_hashes,\n                    link_file_hashes: revisionData.link_file_hashes,\n                    reference_count: 0\n                },\n                create: {\n                    hash: pubKeyHash,\n                    link_type: \"aqua\",\n                    link_require_indepth_verification: false,\n                    link_verification_hashes: revisionData.link_verification_hashes,\n                    link_file_hashes: revisionData.link_file_hashes,\n                    reference_count: 0\n                }\n            })\n        }\n\n\n\n\n        if (revisionData.previous_verification_hash == null || revisionData.previous_verification_hash == \"\") {\n\n            let fileHash = revisionData.file_hash;\n\n            if (fileHash == null) {\n                throw Error(`revision with hash ${revisinHash} is detected to be a genesis but the file hash is null.`)\n            }\n            // file and file indexes\n            // Check if file already exists in the database\n            let existingFile = await prisma.file.findFirst({ //todo\n                where: { file_hash: fileHash },\n            });\n\n            let existingFileIndex = await prisma.fileIndex.findFirst({\n                where: { file_hash: fileHash },\n            });\n\n            if (existingFileIndex) {\n                existingFileIndex.hash = [...existingFileIndex.hash, allHash[0]]\n                await prisma.fileIndex.update({\n                    data: existingFileIndex,\n                    where: {\n                        id: existingFileIndex.id\n                    }\n                })\n            }\n        }\n\n\n\n    }\n}\n\nexport async function fetchAquaTreeWithForwardRevisions(latestRevisionHash: string, url: string): Promise<[AquaTree, FileObject[]]> {\n\n    // now fetch forwad revision\n    let revisionData = [];\n    let queryHash = latestRevisionHash\n    while (true) {\n        // fetch latest revision \n        let latestRevionData = await prisma.revision.findFirst({\n            where: {\n                previous: queryHash,\n            }\n        });\n\n        if (latestRevionData == null) {\n            break\n        }\n\n        revisionData.push(latestRevionData)\n        queryHash = latestRevionData.pubkey_hash\n    }\n\n    let createAquaTreeFrom = latestRevisionHash;\n    if (revisionData.length > 0) {\n        //find latest hash \n        createAquaTreeFrom = revisionData[revisionData.length - 1].pubkey_hash\n    } else {\n        console.log(`The aqua tree has no new revision  from ${latestRevisionHash} `)\n    }\n\n    const [anAquaTree, fileObject] = await createAquaTreeFromRevisions(createAquaTreeFrom, url)\n\n    return [anAquaTree, fileObject];\n\n}\n\n/**\n * Estimates the size in bytes that a string would occupy if saved to a file\n * Uses UTF-8 encoding rules where ASCII chars take 1 byte and others take 2-4 bytes\n * @param str Input string to estimate size for\n * @returns Estimated size in bytes\n */\nexport function estimateStringFileSize(str: string): number {\n    if (!str) return 0;\n\n    return str.split('').reduce((acc, char) => {\n        const code = char.charCodeAt(0);\n        // UTF-8 encoding rules:\n        // 1 byte for ASCII (0-127)\n        // 2 bytes for extended ASCII (128-2047)\n        // 3 bytes for most other characters (2048-65535)\n        // 4 bytes for remaining Unicode (65536+)\n        if (code < 128) return acc + 1;\n        if (code < 2048) return acc + 2;\n        if (code < 65536) return acc + 3;\n        return acc + 4;\n    }, 0);\n}\n\nexport async function createAquaTreeFromRevisions(latestRevisionHash: string, url: string): Promise<[AquaTree, FileObject[]]> {\n\n    // construct the return data\n    let anAquaTree: AquaTree = {\n        revisions: {},\n        file_index: {}\n    };\n\n\n    ////  console.log(`Find ${JSON.stringify(revisonLatetsItem, null, 4)}.`)\n    let revisionData = [];\n\n    // fetch latest revision \n    let latestRevionData = await prisma.revision.findFirst({\n        where: {\n            pubkey_hash: latestRevisionHash, //`${session.address}_${}`\n        }\n    });\n\n    if (latestRevionData == null) {\n        // return reply.code(500).send({ success: false, message: `` });\n        throw Error(`revision with hash ${latestRevionData} not found in system`);\n    }\n    revisionData.push(latestRevionData);\n\n    try {\n        console.log(`%%%%%%%%%%%%%%%%%%%%%%%%%%% previous ${latestRevionData?.previous} \\n ${JSON.stringify(latestRevionData, null, 4)}`)\n        // let pubKey = latestRevisionHash.split(\"_\")[0];\n        let previousWithPubKey = latestRevionData?.previous!!;\n\n\n        console.log(`$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  previous ${previousWithPubKey} `)\n        //if previosu verification hash is not empty find the previous one\n        if (latestRevionData?.previous !== null && latestRevionData?.previous?.length !== 0) {\n            let aquaTreerevision = await findAquaTreeRevision(previousWithPubKey);\n            revisionData.push(...aquaTreerevision)\n        }\n    } catch (e: any) {\n        throw Error(`Error fetching a revision ${JSON.stringify(e, null, 4)}`);\n    }\n\n    // file object \n    let lastRevision = revisionData[revisionData.length - 1];\n    let lastRevisionHash = lastRevision.pubkey_hash.split(\"_\")[1];\n\n    // files \n\n    // let  = await prisma.file.findMany({\n    //     where: {\n    //         hash: lastRevision.pubkey_hash\n    //     }\n    // })\n\n    let files = await prisma.file.findMany({\n        where: {\n            hash: {\n                contains: lastRevisionHash,\n                mode: 'insensitive' // Case-insensitive matching\n            }\n        }\n\n    })\n\n    let fileObject: FileObject[] = [];\n    let fileIndexes: FileIndex[] = [];\n    if (files != null) {\n        //  console.log(\"#### file is not null \")\n\n        for (let fileItem of files) {\n            //  console.log(\"=================================================\")\n            //  console.log(`reading ${JSON.stringify(fileItem, null, 4)}`)\n            // let fileContent = fs.readFileSync(fileItem.content!!);\n\n            const stats = fs.statSync(fileItem.content!!);\n            const fileSizeInBytes = stats.size;\n            //  console.log(`File size: ${fileSizeInBytes} bytes`);\n\n            // Extract just the original filename (without the UUID prefix)\n            const fullFilename = path.basename(fileItem.content!!) // Gets filename.ext from full path\n            const originalFilename = fullFilename.substring(fullFilename.indexOf('-') + 1) // Removes UUID-\n            //  console.log(`Original filename: ${originalFilename}`)\n\n\n\n            let fileIndex = await prisma.fileIndex.findFirst({\n                where: {\n                    file_hash: fileItem.file_hash!!\n                }\n            })\n\n            //  console.log(\"File index: \", fileIndex)\n\n\n            if (fileIndex == null) {\n                throw Error(`Error file  ${originalFilename} not found in index`)\n            }\n\n\n            fileIndexes.push(fileIndex)\n\n\n            if (!fs.existsSync(fileItem.content!!)) {\n                // return reply.code(500).send({ success: false, message: `Error file  ${originalFilename} not found` });\n\n            }\n\n\n\n            // Path you want to add\n            const urlPath = `/files/${fileItem.file_hash}`;\n\n            // Construct the full URL\n            const fullUrl = `${url}${urlPath}`;\n            fileObject.push({\n                fileContent: fullUrl,//fileContent.toString(),\n                fileName: fileIndex.uri!!,\n                path: \"\",\n                fileSize: fileSizeInBytes\n            })\n\n        }\n    }\n\n    //  console.log(`File indexes for hash: ${lastRevisionHash}\\n${JSON.stringify(fileIndexes, null, 4)}`)\n\n\n    for (let revisionItem of revisionData) {\n        let hashOnly = revisionItem.pubkey_hash.split(\"_\")[1]\n        let previousHashOnly = revisionItem.previous == null || revisionItem.previous == undefined || revisionItem.previous == \"\" ? \"\" : revisionItem.previous.split(\"_\")[1]\n\n        //  console.log(`previousHashOnly == > ${previousHashOnly} RAW ${revisionItem.previous}`)\n        let revisionWithData: AquaRevision = {\n            revision_type: revisionItem.revision_type!! as \"link\" | \"file\" | \"witness\" | \"signature\" | \"form\",\n            previous_verification_hash: previousHashOnly,\n            local_timestamp: revisionItem.local_timestamp?.toString() ?? \"\",\n            \"version\": \"https://aqua-protocol.org/docs/v3/schema_2 | SHA256 | Method: scalar\",\n        }\n\n        if (revisionItem.has_content) {\n            let fileItem = files.find((e) => e.hash == revisionItem.pubkey_hash)\n            let fileContent = fs.readFileSync(fileItem?.content ?? \"--error--\", 'utf8');\n            revisionWithData[\"content\"] = fileContent\n        }\n\n        if (revisionItem.revision_type == \"file\") {\n            let fileResult = await prisma.file.findFirst({\n                where: {\n                    hash: {\n                        contains: hashOnly,\n                        mode: 'insensitive' // Case-insensitive matching\n                    }\n                }\n\n            })\n            if (fileResult == null) {\n                throw Error(\"Revision file data  not found\")\n            }\n            revisionWithData[\"file_nonce\"] = revisionItem.nonce ?? \"--error--\"\n            revisionWithData[\"file_hash\"] = fileResult.file_hash ?? \"--error--\"\n        } else {\n            let revisionInfoData = await FetchRevisionInfo(revisionItem.pubkey_hash, revisionItem)\n\n            if (revisionInfoData == null) {\n                console.log(`Revision data ${JSON.stringify(revisionItem, null, 4)}`)\n                throw Error(\"Revision info not found\")\n            }\n\n            if (revisionItem.revision_type == \"form\") {\n\n                let fileFormData = revisionInfoData as AquaForms[];\n                for (let formItem of fileFormData) {\n                    revisionWithData[formItem.key!!] = formItem.value\n                }\n\n            } else if (revisionItem.revision_type == \"witness\") {\n                let witnessData = revisionInfoData as WitnessEvent;\n                revisionWithData.witness_merkle_root = witnessData.Witness_merkle_root;\n                revisionWithData.witness_timestamp = Number.parseInt(witnessData.Witness_timestamp!);\n                revisionWithData.witness_network = witnessData.Witness_network!;\n                revisionWithData.witness_smart_contract_address = witnessData.Witness_smart_contract_address!;\n                revisionWithData.witness_transaction_hash = witnessData.Witness_transaction_hash!;\n                revisionWithData.witness_sender_account_address = witnessData.Witness_sender_account_address!;\n                revisionWithData.witness_merkle_proof = [];// todo fix me from db \n\n\n            } else if (revisionItem.revision_type == \"signature\") {\n                let signatureData = revisionInfoData as Signature;\n                let sig: string | Object = signatureData.signature_digest!\n                try {\n                    if (signatureData.signature_type?.includes(\"did\")) {\n                        sig = JSON.parse(signatureData.signature_digest!)\n                    }\n                } catch (error) {\n                    //  console.log(\"======================================\")\n                    //  console.log(`Error fix me ${error} `)\n                }\n                revisionWithData.signature = sig;\n\n                revisionWithData.signature_public_key = signatureData.signature_public_key!;\n                revisionWithData.signature_wallet_address = signatureData.signature_wallet_address!;\n                revisionWithData.signature_type = signatureData.signature_type!;\n\n            } else if (revisionItem.revision_type == \"link\") {\n                //  console.log(\"link revision goes here \")\n                let linkData = revisionInfoData as Link;\n\n                revisionWithData.link_type = linkData.link_type ?? \"\"\n                revisionWithData.link_verification_hashes = linkData.link_verification_hashes\n                revisionWithData.link_file_hashes = linkData.link_file_hashes\n\n\n                let hashSearchText = linkData.link_verification_hashes[0]\n                //  console.log(`link ....search for ${hashSearchText} --> `)\n                let filesData = await prisma.fileIndex.findFirst({\n                    where: {\n                        id: {\n                            contains: hashSearchText,\n                            mode: 'insensitive' // Case-insensitive matching\n                        }\n                    }\n                })\n\n                if (filesData == null) {\n                    console.log(` 💣💣💣💣  File index with hash ${hashSearchText} not found `)\n                } else {\n                    anAquaTree.file_index[hashSearchText] = filesData?.uri ?? \"--error--.\"\n\n\n                    let [aquaTreeLinked, fileObjectLinked] = await createAquaTreeFromRevisions(filesData.id, url);\n\n                    let name = Object.values(aquaTreeLinked.file_index)[0] ?? \"--error--\"\n                    fileObject.push({\n                        fileContent: aquaTreeLinked,\n                        fileName: `${name}.aqua.json`,\n                        path: \"\",\n                        fileSize: estimateStringFileSize(JSON.stringify(aquaTreeLinked, null, 4))\n                    })\n\n\n                    fileObject.push(...fileObjectLinked)\n                }\n\n            } else {\n                console.log(`💣💣💣💣 Revision of type ${revisionItem.revision_type} is unknown`)\n            }\n        }\n\n\n        // update file index for genesis revision \n        if (previousHashOnly == null || previousHashOnly.length == 0) {\n            //  console.log(\"****************************************************************\")\n            //  console.log(`fileIndexes ${JSON.stringify(fileIndexes)} -- hash ${revisionItem.pubkey_hash}`)\n            let name = fileIndexes.find((item) => {\n                // return item.hash.includes(revisionItem.pubkey_hash) || item.hash.map((item) => item.includes(hashOnly)).length > 0\n\n                // Check if the full pubkey_hash is in the array\n                if (item.hash.includes(revisionItem.pubkey_hash)) {\n                    return true;\n                }\n\n                // Check if any hash in the array contains the hashOnly part\n                return item.hash.some((hashItem: string) => hashItem.includes(hashOnly));\n            })\n            //  console.log(`----------  name ${JSON.stringify(name, null, 4)}`)\n            anAquaTree.file_index[hashOnly] = name?.uri ?? \"--error--.\"\n            revisionWithData[\"file_hash\"] = name?.file_hash ?? \"--error--\"\n\n        }\n        anAquaTree.revisions[hashOnly] = revisionWithData;\n    }\n\n\n    //  console.log(`YOU should see me ${JSON.stringify(anAquaTree, null, 4)}`)\n\n    return [anAquaTree, fileObject]\n}\n\nexport async function findAquaTreeRevision(revisionHash: string): Promise<Array<Revision>> {\n    let revisions: Array<Revision> = [];\n\n    // fetch latest revision \n    let latestRevionData = await prisma.revision.findFirst({\n        where: {\n            pubkey_hash: revisionHash\n        }\n    });\n\n\n\n    if (latestRevionData == null) {\n        throw new Error(`Unable to get revision with hash ${revisionHash}`);\n\n    }\n\n    revisions.push(latestRevionData);\n\n    if (latestRevionData?.previous) {\n\n        let pubKey = revisionHash.split(\"_\")[0];\n        let previousWithPubKey = latestRevionData?.previous!!;\n\n        if (!latestRevionData?.previous!!.includes(\"_\")) {\n            previousWithPubKey = `${pubKey}_${latestRevionData?.previous!!}`\n        }\n        let aquaTreerevision = await findAquaTreeRevision(previousWithPubKey);\n        revisions.push(...aquaTreerevision)\n    }\n\n\n    return revisions;\n}\n\n\nexport async function FetchRevisionInfo(hash: string, revision: Revision): Promise<Signature | WitnessEvent | AquaForms[] | Link | null> {\n\n    if (revision.revision_type == \"signature\") {\n        //  console.log(`signature with hash ${hash}`)\n        return await prisma.signature.findFirst({\n            where: {\n                hash: hash\n            }\n        });\n\n\n\n    } else if (revision.revision_type == \"witness\") {\n        let res = await prisma.witness.findFirst({\n            where: {\n                hash: hash\n            }\n        });\n\n        if (res == null) {\n            throw new Error(`witness is null ${revision.revision_type}`);\n        }\n        return await prisma.witnessEvent.findFirst({\n            where: {\n                Witness_merkle_root: res.Witness_merkle_root!\n            }\n        });\n\n\n    } else if (revision.revision_type == \"form\") {\n\n        return await prisma.aquaForms.findMany({\n            where: {\n                hash: hash\n            }\n        })\n\n    } else if (revision.revision_type == \"link\") {\n\n        return await prisma.link.findFirst({\n            where: {\n                hash: hash\n            }\n        })\n    } else {\n\n        //  console.log(`type ${revision.revision_type} with hash ${hash}`)\n        return null\n        // throw new Error(`implment for ${revision.revision_type}`);\n\n    }\n}\n\n\nexport const readFileContent = async (file: File): Promise<string | Uint8Array> => {\n    if (isTextFile(file)) {\n        // If it's a text file, read as text\n        return await readFileAsText(file);\n    } else {\n        console.log(\"binary data....\")\n        // Otherwise for binary files, read as ArrayBuffer\n        const res = await readFileAsArrayBuffer(file)\n        return new Uint8Array(res);\n\n    }\n};\n\n\n// More comprehensive function to check if a file is text-based\nexport const isTextFile = (file: File): boolean => {\n    // Check by MIME type first (most reliable when available)\n    if (file.type) {\n        // Common text MIME types\n        if (file.type.startsWith('text/')) return true;\n\n        // Text-based formats with application/ prefix\n        if (/^application\\/(json|xml|javascript|x-javascript|ecmascript|x-ecmascript|typescript|x-typescript|ld\\+json|graphql|yaml|x-yaml|x-www-form-urlencoded)/.test(file.type)) {\n            return true;\n        }\n\n        // Some markdown types\n        if (/^text\\/(markdown|x-markdown|md)/.test(file.type)) {\n            return true;\n        }\n    }\n\n    // Check by file extension as fallback\n    const textExtensions = [\n        // Programming languages\n        '.txt', '.csv', '.json', '.xml', '.html', '.htm', '.css', '.js', '.jsx', '.ts', '.tsx',\n        '.md', '.markdown', '.rs', '.py', '.rb', '.c', '.cpp', '.h', '.hpp', '.cs', '.java',\n        '.kt', '.kts', '.swift', '.php', '.go', '.pl', '.pm', '.lua', '.sh', '.bash', '.zsh',\n        '.sql', '.r', '.dart', '.scala', '.groovy', '.m', '.mm',\n\n        // Config files\n        '.yml', '.yaml', '.toml', '.ini', '.cfg', '.conf', '.config', '.properties',\n        '.env', '.gitignore', '.gitattributes', '.editorconfig', '.babelrc', '.eslintrc',\n        '.prettierrc', '.stylelintrc', '.npmrc', '.yarnrc',\n\n        // Documentation\n        '.rst', '.adoc', '.tex', '.latex', '.rtf', '.log', '.svg',\n\n        // Data formats\n        '.csv', '.tsv', '.plist', '.graphql', '.gql'\n    ];\n\n    return textExtensions.some(ext => file.name.toLowerCase().endsWith(ext));\n};\n\n\nexport function getGenesisHash(aquaTree: AquaTree): string | null {\n    let aquaTreeGenesisHash: string | null = null;\n    let allAquuaTreeHashes = Object.keys(aquaTree!.revisions);\n\n    for (let hash of allAquuaTreeHashes) {\n        let revisionItem = aquaTree!.revisions[hash];\n        if (revisionItem.previous_verification_hash == \"\" || revisionItem.previous_verification_hash == null || revisionItem.previous_verification_hash == undefined) {\n\n            aquaTreeGenesisHash = hash //revisionItem.previous_verification_hash\n            break;\n\n        }\n    }\n\n    return aquaTreeGenesisHash\n}\n\n/**\n * Validates an AquaTree object to ensure all required properties exist and are valid\n * @param tree The AquaTree object to validate\n * @returns boolean indicating whether the tree is valid\n */\nexport function validateAquaTree(tree: AquaTree): [boolean, string] {\n    // Check if tree is null or undefined\n    if (!tree) {\n        return [false, \"aqua tree is null\"];\n    }\n\n    // Check if required top-level properties exist\n    if (!tree.revisions || !tree.file_index) {\n        return [false, \"revsions and file index must exist in an aqua tree\"];\n    }\n\n    // Check if revisions is a valid object\n    if (typeof tree.revisions !== 'object' || Array.isArray(tree.revisions)) {\n        return [false, \"revision does not contain revisions\"];\n    }\n\n    // Check if file_index is a valid object\n    if (typeof tree.file_index !== 'object' || Array.isArray(tree.file_index)) {\n        return [false, \"file index does not contain values \"];\n    }\n\n    // Validate each revision\n    for (const hash in tree.revisions) {\n        const revision = tree.revisions[hash];\n\n        console.log(`Revision --  ${JSON.stringify(revision)}`)\n        // Check required fields for all revisions\n        if (revision.previous_verification_hash === undefined || revision.previous_verification_hash === null) {\n            return [false, \"A revision must contain previous_verification_hash\"];\n        }\n        if (revision.local_timestamp === undefined || revision.local_timestamp === null) {\n            return [false, \"A revision must contain local_timestamp \"];\n        }\n        if (!revision.revision_type === undefined || revision.local_timestamp === null) {\n            return [false, \"A revision must contain  revision_type\"];\n        }\n\n        // Validate revision_type is one of the allowed values\n        const validRevisionTypes = ['file', 'witness', 'signature', 'form', 'link'];\n        if (!validRevisionTypes.includes(revision.revision_type)) {\n            return [false, `unknown revision type ${revision.revision_type}`];\n        }\n\n        // Check type-specific required fields\n        // Check type-specific required fields\n        switch (revision.revision_type) {\n            case 'file':\n                if (revision.file_hash === undefined || revision.file_hash === null) {\n                    return [false, \"file revision must contain file_hash\"];\n                }\n                if (revision.file_nonce === undefined || revision.file_nonce === null) {\n                    return [false, \"file revision must contain file_nonce\"];\n                }\n                break;\n            case 'witness':\n                if (revision.witness_merkle_root === undefined || revision.witness_merkle_root === null) {\n                    return [false, \"witness revision must contain witness_merkle_root\"];\n                }\n                if (revision.witness_timestamp === undefined || revision.witness_timestamp === null) {\n                    return [false, \"witness revision must contain witness_timestamp\"];\n                }\n                if (revision.witness_network === undefined || revision.witness_network === null) {\n                    return [false, \"witness revision must contain witness_network\"];\n                }\n                if (revision.witness_smart_contract_address === undefined || revision.witness_smart_contract_address === null) {\n                    return [false, \"witness revision must contain witness_smart_contract_address\"];\n                }\n                if (revision.witness_transaction_hash === undefined || revision.witness_transaction_hash === null) {\n                    return [false, \"witness revision must contain witness_transaction_hash\"];\n                }\n                if (revision.witness_sender_account_address === undefined || revision.witness_sender_account_address === null) {\n                    return [false, \"witness revision must contain witness_sender_account_address\"];\n                }\n                break;\n            case 'signature':\n                if (revision.signature === undefined || revision.signature === null) {\n                    return [false, \"signature revision must contain signature\"];\n                }\n                if (revision.signature_public_key === undefined || revision.signature_public_key === null) {\n                    return [false, \"signature revision must contain signature_public_key\"];\n                }\n                if (revision.signature_type === undefined || revision.signature_type === null) {\n                    return [false, \"signature revision must contain signature_type\"];\n                }\n                break;\n            case 'link':\n                if (revision.link_type === undefined || revision.link_type === null) {\n                    return [false, \"link revision must contain link_type\"];\n                }\n                if (revision.link_verification_hashes === undefined || revision.link_verification_hashes === null) {\n                    return [false, \"link revision must contain link_verification_hashes\"];\n                }\n                if (!Array.isArray(revision.link_verification_hashes)) {\n                    return [false, \"link revision's link_verification_hashes must be an array\"];\n                }\n                if (revision.link_verification_hashes.length === 0) {\n                    return [false, \"link revision's link_verification_hashes must not be empty\"];\n                }\n                break;\n        }\n    }\n\n    // Check if the file_index contains at least one entry\n    if (Object.keys(tree.file_index).length === 0) {\n        return [false, \"file_index is empty\"];\n    }\n\n    // If all checks pass, return true\n    return [true, \"valid aqua tree\"];\n}\n\n/**\n * Reads a File object as text\n * @param file The File object to read\n * @returns Promise that resolves with the file contents as string\n */\nexport function readFileAsText(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.onload = (event) => {\n            if (event.target?.result) {\n                resolve(event.target.result as string);\n            } else {\n                reject(new Error(\"Failed to read file content\"));\n            }\n        };\n\n        reader.onerror = (error) => {\n            reject(error);\n        };\n\n        reader.readAsText(file);\n    });\n}\n\n/**\n * Reads a File object as ArrayBuffer\n * @param file The File object to read\n * @returns Promise that resolves with the file contents as ArrayBuffer\n */\nexport function readFileAsArrayBuffer(file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.onload = (event) => {\n            if (event.target?.result) {\n                resolve(event.target.result as ArrayBuffer);\n            } else {\n                reject(new Error(\"Failed to read file content\"));\n            }\n        };\n\n        reader.onerror = (error) => {\n            reject(error);\n        };\n\n        reader.readAsArrayBuffer(file);\n    });\n}"
        ],
        "sourceRoot": ""
      }
    },
    "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/quick_utils.ts": {
      "lineLengths": [
        40,
        39,
        3,
        73,
        82,
        64,
        3,
        52,
        23,
        29,
        60,
        16,
        37,
        9,
        7,
        35,
        65,
        71,
        74,
        84,
        18,
        79,
        5,
        37,
        69,
        37,
        102,
        109,
        48,
        54,
        52,
        78,
        13,
        18,
        136,
        78,
        82,
        63,
        13,
        9,
        47,
        13,
        86,
        49,
        9,
        23,
        102,
        72,
        77,
        59,
        9,
        5,
        21,
        1,
        3,
        68,
        65,
        46,
        93,
        3,
        51,
        37,
        25,
        79,
        23,
        90,
        67,
        100,
        46,
        13,
        124,
        20,
        78,
        20,
        74,
        66,
        24,
        16,
        106,
        24,
        5,
        1,
        3,
        76,
        84,
        47,
        35,
        3,
        39,
        13,
        17,
        71,
        1,
        34,
        3,
        66,
        53,
        2,
        82,
        72,
        124,
        92,
        87,
        3,
        138,
        51,
        3,
        58,
        49,
        47,
        133,
        86,
        5,
        41,
        24,
        22,
        22,
        6,
        59,
        29,
        9,
        61,
        70,
        43,
        83,
        73,
        9,
        5,
        19,
        93,
        61,
        5,
        84,
        79,
        80,
        75,
        25,
        29,
        13,
        102,
        78,
        67,
        59,
        24,
        27,
        113,
        21,
        17,
        15,
        72,
        62,
        27,
        30,
        81,
        25,
        116,
        108,
        25,
        20,
        18,
        9,
        23,
        150,
        75,
        9,
        5,
        49,
        49,
        64,
        24,
        102,
        64,
        9,
        54,
        55,
        17,
        32,
        54,
        57,
        138,
        111,
        43,
        145,
        10,
        51,
        52,
        63,
        103,
        84,
        107,
        38,
        90,
        77,
        119,
        97,
        17,
        13,
        18,
        128,
        66,
        13,
        9,
        14,
        56,
        102,
        104,
        64,
        128,
        71,
        13,
        40,
        53,
        32,
        59,
        51,
        43,
        100,
        29,
        27,
        30,
        35,
        61,
        95,
        141,
        100,
        130,
        118,
        130,
        122,
        30,
        37,
        63,
        29,
        82,
        108,
        25,
        35,
        65,
        94,
        25,
        112,
        120,
        100,
        30,
        32,
        58,
        85,
        102,
        86,
        67,
        112,
        89,
        94,
        117,
        72,
        61,
        75,
        72,
        95,
        179,
        85,
        104,
        41,
        46,
        115,
        96,
        118,
        41,
        106,
        45,
        153,
        106,
        46,
        90,
        102,
        104,
        41,
        59,
        128,
        113,
        64,
        41,
        37,
        42,
        111,
        37,
        33,
        38,
        149,
        33,
        29,
        25,
        30,
        31,
        47,
        37,
        48,
        79,
        82,
        108,
        35,
        90,
        125,
        64,
        96,
        17,
        13,
        18,
        102,
        70,
        82,
        64,
        82,
        17,
        13,
        9,
        89,
        46,
        62,
        9,
        14,
        100,
        109,
        9,
        42,
        36,
        22,
        1,
        36,
        2,
        26,
        9,
        91,
        83,
        76,
        0,
        83,
        95,
        64,
        47,
        59,
        64,
        0,
        21,
        56,
        5,
        1,
        0,
        45,
        2,
        41696
      ],
      "data": {
        "version": 3,
        "file": "/home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/quick_utils.ts",
        "sources": [
          "file:///home/dalmas/E/blockchain/aqua_protocol_v2/aquafier-js-web-api/api/src/utils/quick_utils.ts"
        ],
        "names": [],
        "mappings": "AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAIxC,uCAAuC;AAEvC;;;;GAIG;AACH,KAAK,UAAU,qBAAqB,CAAC,YAAoB;IACrD,IAAI,SAAS,GAAoB,EAAE,CAAC;IAEpC,yBAAyB;IACzB,IAAI,gBAAgB,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;QACnD,KAAK,EAAE;YACH,WAAW,EAAE,YAAY;SAC5B;KACJ,CAAC,CAAC;IAEH,IAAI,gBAAgB,IAAI,IAAI,EAAE,CAAC;QAC3B,yDAAyD;QACzD,+DAA+D;QAC/D,OAAO,CAAC,KAAK,CAAC,oCAAoC,YAAY,EAAE,CAAC,CAAC;QAClE,4EAA4E;QAC5E,OAAO,EAAE,CAAC;QACV,uEAAuE;IAC3E,CAAC;IAED,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAEjC,iEAAiE;IACjE,IAAI,gBAAgB,EAAE,QAAQ,EAAE,CAAC;QAC7B,IAAI,kBAAkB,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC,0CAA0C;QAE9F,qGAAqG;QACrG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YACpC,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAI,MAAM,EAAE,CAAC,CAAC,0BAA0B;gBACpC,kBAAkB,GAAG,GAAG,MAAM,IAAI,gBAAgB,CAAC,QAAQ,EAAE,CAAC;YAClE,CAAC;iBAAM,CAAC;gBACJ,OAAO,CAAC,KAAK,CAAC,iCAAiC,YAAY,gCAAgC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACxH,8DAA8D;gBAC9D,kEAAkE;gBAClE,OAAO,SAAS,CAAC,CAAC,6BAA6B;YACnD,CAAC;QACL,CAAC;QAED,uCAAuC;QACvC,IAAI,CAAC;YACD,MAAM,iBAAiB,GAAG,MAAM,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;YAC1E,SAAS,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,CAAC;QACzC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,8CAA8C,kBAAkB,GAAG,EAAE,KAAK,CAAC,CAAC;YAC1F,4DAA4D;YAC5D,iEAAiE;YACjE,OAAO,SAAS,CAAC,CAAC,6BAA6B;QACnD,CAAC;IACL,CAAC;IAED,OAAO,SAAS,CAAC;AACrB,CAAC;AAED;;;;;GAKG;AACH,KAAK,UAAU,kBAAkB,CAAC,IAAY,EAAE,QAAkB;IAC9D,QAAQ,QAAQ,CAAC,aAAa,EAAE,CAAC;QAC7B,KAAK,WAAW;YACZ,OAAO,MAAM,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvE,KAAK,SAAS;YACV,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;YAC9E,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC;gBACnD,OAAO,CAAC,KAAK,CAAC,8DAA8D,IAAI,EAAE,CAAC,CAAC;gBACpF,OAAO,IAAI,CAAC,CAAC,iBAAiB;YAClC,CAAC;YACD,OAAO,MAAM,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,mBAAmB,EAAE,WAAW,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;QACpH,KAAK,MAAM;YACP,OAAO,MAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACtE,KAAK,MAAM;YACP,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QAClE,KAAK,MAAM,EAAE,6CAA6C;YACrD,OAAO,IAAI,CAAC;QACjB;YACI,OAAO,CAAC,IAAI,CAAC,sCAAsC,QAAQ,CAAC,aAAa,aAAa,IAAI,EAAE,CAAC,CAAC;YAC9F,OAAO,IAAI,CAAC;IACpB,CAAC;AACL,CAAC;AAED;;;;;GAKG;AACH,SAAS,uBAAuB,CAAC,GAAW;IACxC,IAAI,CAAC,GAAG;QAAE,OAAO,CAAC,CAAC;IACnB,OAAO,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,4BAA4B;AACvE,CAAC;AAED,kCAAkC;AAElC;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC5C,UAAkB,EAClB,WAAmB,EACnB,GAAW,EAAE,2DAA2D;AACxE,mBAAgC,IAAI,GAAG,EAAE,CAAC,sBAAsB;;IAEhE,MAAM,cAAc,GAAG,GAAG,WAAW,IAAI,UAAU,EAAE,CAAC;IAEtD,6CAA6C;IAC7C,IAAI,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC;QACvC,OAAO,CAAC,IAAI,CAAC,yDAAyD,cAAc,uCAAuC,CAAC,CAAC;QAC7H,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC,oCAAoC;IAClF,CAAC;IACD,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAErC,MAAM,UAAU,GAAa;QACzB,SAAS,EAAE,EAAE;QACb,UAAU,EAAE,EAAE;KACjB,CAAC;IACF,IAAI,WAAW,GAAiB,EAAE,CAAC,CAAC,iCAAiC;IAErE,IAAI,eAAe,GAAe,EAAE,CAAC;IACrC,IAAI,CAAC;QACD,qDAAqD;QACrD,eAAe,GAAG,MAAM,qBAAqB,CAAC,cAAc,CAAC,CAAC;QAC9D,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/B,OAAO,CAAC,IAAI,CAAC,wCAAwC,cAAc,EAAE,CAAC,CAAC;YACvE,OAAO,UAAU,CAAC,CAAC,0CAA0C;QACjE,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,6CAA6C,cAAc,GAAG,EAAE,KAAK,CAAC,CAAC;QACrF,MAAM,KAAK,CAAC,CAAC,wCAAwC;IACzD,CAAC;IAED,gFAAgF;IAChF,MAAM,sBAAsB,GAAG,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC3E,MAAM,kBAAkB,GAAG,sBAAsB,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5E,uEAAuE;IACvE,IAAI,WAAW,GAAgB,EAAE,CAAC;IAClC,IAAI,kBAAkB,EAAE,CAAC;QACrB,IAAI,CAAC;YACD,0FAA0F;YAC1F,kEAAkE;YAClE,uDAAuD;YACvD,WAAW,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;gBACzC,KAAK,EAAE;oBACH,IAAI,EAAE;wBACF,GAAG,EAAE,sBAAsB,CAAC,WAAW,CAAC,iDAAiD;qBAC5F;iBACJ;aACL,CAAC,CAAC;YACH,4DAA4D;YAC5D,kDAAkD;YAClD,eAAe;YACf,kBAAkB;YAClB,qEAAqE;YACrE,aAAa;YACb,wGAAwG;YACxG,gGAAgG;YAChG,aAAa;YACb,QAAQ;YACR,MAAM;QAEV,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACZ,OAAO,CAAC,KAAK,CAAC,gDAAgD,kBAAkB,WAAW,sBAAsB,CAAC,WAAW,IAAI,EAAE,KAAK,CAAC,CAAC;YAC1I,+DAA+D;QACpE,CAAC;IACL,CAAC;IAGD,6CAA6C;IAC7C,KAAK,MAAM,YAAY,IAAI,eAAe,EAAE,CAAC;QACzC,MAAM,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,OAAO,CAAC,KAAK,CAAC,gDAAgD,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC;YAC1F,SAAS,CAAC,0CAA0C;QACxD,CAAC;QAED,MAAM,gBAAgB,GAAG,YAAY,CAAC,QAAQ;YAC1C,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;YAC3C,CAAC,CAAC,EAAE,CAAC;QAET,IAAI,gBAAgB,GAAiB;YACjC,aAAa,EAAE,YAAY,CAAC,aAA8C;YAC1E,0BAA0B,EAAE,gBAAgB;YAC5C,eAAe,EAAE,YAAY,CAAC,eAAe,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE,kDAAkD;YAC9H,OAAO,EAAE,sEAAsE,EAAE,kBAAkB;YACnG,+BAA+B;YAC/B,GAAG,CAAC,YAAY,CAAC,mBAAmB,IAAI,YAAY,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,YAAY,CAAC,mBAA+B,EAAE,CAAC;SACnJ,CAAC;QAEF,2CAA2C;QAE3C,IAAI,YAAY,CAAC,aAAa,KAAK,MAAM,EAAE,CAAC;YACxC,mDAAmD;YACnD,gBAAgB,CAAC,UAAU,GAAG,YAAY,CAAC,KAAK,IAAI,WAAW,CAAC,CAAC,0BAA0B;YAC1F,wEAAwE;YACxE,MAAM,mBAAmB,GAAG,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC;YAC/F,IAAI,mBAAmB,EAAE,CAAC;gBACtB,gBAAgB,CAAC,SAAS,GAAG,mBAAmB,CAAC,SAAS,IAAI,WAAW,CAAC;gBAC1E,6DAA6D;gBAC7D,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,+DAA+D;oBACnG,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,mBAAmB,CAAC,GAAG,IAAI,eAAe,CAAC;gBACjF,CAAC;YACL,CAAC;iBAAM,CAAC;gBACJ,OAAO,CAAC,IAAI,CAAC,0CAA0C,YAAY,CAAC,WAAW,+BAA+B,CAAC,CAAC;gBAChH,gBAAgB,CAAC,SAAS,GAAG,oBAAoB,CAAC;YACtD,CAAC;QACN,CAAC;aAAM,CAAC;YACJ,4CAA4C;YAC5C,MAAM,gBAAgB,GAAG,MAAM,kBAAkB,CAAC,YAAY,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAE1F,IAAI,CAAC,gBAAgB,IAAI,YAAY,CAAC,aAAa,KAAK,MAAM,EAAE,CAAC,CAAC,0BAA0B;gBACxF,gDAAgD;gBAC/C,OAAO,CAAC,IAAI,CAAC,+BAA+B,YAAY,CAAC,aAAa,cAAc,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC;gBAChH,uDAAuD;YAC5D,CAAC;iBAAM,IAAI,gBAAgB,EAAE,CAAC;gBAC1B,QAAQ,YAAY,CAAC,aAAa,EAAE,CAAC;oBACjC,KAAK,MAAM;wBACP,MAAM,SAAS,GAAG,gBAA+B,CAAC;wBAClD,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;4BACrB,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;gCACX,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,2BAA2B;4BACxE,CAAC;wBACL,CAAC,CAAC,CAAC;wBACH,MAAM;oBACV,KAAK,SAAS;wBACV,MAAM,WAAW,GAAG,gBAAgC,CAAC;wBACrD,gBAAgB,CAAC,mBAAmB,GAAG,WAAW,CAAC,mBAAmB,CAAC;wBACvE,gBAAgB,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACrH,gBAAgB,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,IAAI,SAAS,CAAC;wBAC5E,gBAAgB,CAAC,8BAA8B,GAAG,WAAW,CAAC,8BAA8B,IAAI,SAAS,CAAC;wBAC1G,gBAAgB,CAAC,wBAAwB,GAAG,WAAW,CAAC,wBAAwB,IAAI,SAAS,CAAC;wBAC9F,gBAAgB,CAAC,8BAA8B,GAAG,WAAW,CAAC,8BAA8B,IAAI,SAAS,CAAC;wBAC1G,kGAAkG;wBAClG,MAAM;oBACV,KAAK,WAAW;wBACZ,MAAM,aAAa,GAAG,gBAA6B,CAAC;wBACpD,IAAI,CAAC;4BACD,sDAAsD;4BACtD,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC;wBACpF,CAAC;wBAAC,OAAO,CAAC,EAAE,CAAC;4BACT,qCAAqC;4BACrC,gBAAgB,CAAC,SAAS,GAAG,aAAa,CAAC,gBAAgB,IAAI,EAAE,CAAC;wBACtE,CAAC;wBACD,gBAAgB,CAAC,oBAAoB,GAAG,aAAa,CAAC,oBAAoB,IAAI,SAAS,CAAC;wBACxF,gBAAgB,CAAC,wBAAwB,GAAG,aAAa,CAAC,wBAAwB,IAAI,SAAS,CAAC;wBAChG,gBAAgB,CAAC,cAAc,GAAG,aAAa,CAAC,cAAc,IAAI,SAAS,CAAC;wBAC5E,MAAM;oBACV,KAAK,MAAM;wBACP,MAAM,QAAQ,GAAG,gBAAwB,CAAC;wBAC1C,gBAAgB,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,IAAI,SAAS,CAAC;wBAC7D,gBAAgB,CAAC,wBAAwB,GAAG,QAAQ,CAAC,wBAAoC,CAAC;wBAC1F,gBAAgB,CAAC,gBAAgB,GAAG,QAAQ,CAAC,gBAA4B,CAAC;wBAE1E,2CAA2C;wBAC3C,IAAI,QAAQ,CAAC,wBAAwB,IAAI,QAAQ,CAAC,wBAAwB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;4BACpF,KAAK,MAAM,UAAU,IAAI,QAAQ,CAAC,wBAAwB,EAAE,CAAC;gCACzD,IAAI,OAAO,UAAU,KAAK,QAAQ,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oCAC1D,iFAAiF;oCACjF,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oCACpC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wCACrB,MAAM,iBAAiB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wCACnC,MAAM,cAAc,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wCAE/B,uDAAuD;wCACvD,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC,kDAAkD;wCAC3I,IAAI,eAAe,IAAI,eAAe,CAAC,GAAG,EAAE,CAAC;4CACzC,UAAU,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,eAAe,CAAC,GAAG,CAAC;wCAChE,CAAC;6CAAM,CAAC;4CACJ,OAAO,CAAC,IAAI,CAAC,4CAA4C,UAAU,EAAE,CAAC,CAAC;4CACvE,oDAAoD;4CACpD,0EAA0E;wCAC9E,CAAC;wCAEF,kEAAkE;wCAClE,IAAI,CAAC;4CACA,MAAM,UAAU,GAAG,MAAM,0BAA0B,CAC/C,cAAc,EACd,iBAAiB,EACjB,GAAG,EAAE,iBAAiB;4CACtB,gBAAgB,CAAC,6CAA6C;6CACjE,CAAC;4CAEF,8CAA8C;4CAC9C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;4CAC1D,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC;wCAEjE,CAAC;wCAAC,OAAM,SAAS,EAAE,CAAC;4CAChB,OAAO,CAAC,KAAK,CAAC,4CAA4C,UAAU,GAAG,EAAE,SAAS,CAAC,CAAC;4CACnF,qEAAqE;4CACrE,oBAAoB;wCACzB,CAAC;oCACL,CAAC;yCAAM,CAAC;wCACJ,OAAO,CAAC,KAAK,CAAC,2CAA2C,UAAU,EAAE,CAAC,CAAC;oCAC3E,CAAC;gCACL,CAAC;qCAAM,CAAC;oCACH,OAAO,CAAC,IAAI,CAAC,wEAAwE,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC;gCACtH,CAAC;4BACL,CAAC;wBACL,CAAC;wBACD,MAAM;gBACd,CAAC,CAAC,aAAa;YACnB,CAAC,CAAC,iCAAiC;QACvC,CAAC,CAAC,2BAA2B;QAE7B,wCAAwC;QAExC,uEAAuE;QACvE,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,iDAAiD;YACtE,MAAM,gBAAgB,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC;YAChG,IAAI,gBAAgB,EAAE,CAAC;gBACnB,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,gBAAgB,CAAC,GAAG,IAAI,eAAe,CAAC;gBAC1E,6GAA6G;gBAC5G,IAAI,gBAAgB,CAAC,aAAa,KAAK,MAAM,EAAE,CAAC;oBAC5C,gBAAgB,CAAC,SAAS,GAAG,gBAAgB,CAAC,SAAS,IAAI,gBAAgB,CAAC;gBAChF,CAAC;YACN,CAAC;iBAAM,CAAC;gBACJ,OAAO,CAAC,IAAI,CAAC,6CAA6C,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC;gBACrF,sDAAsD;gBACtD,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,+BAA+B,CAAC;gBAClE,IAAI,gBAAgB,CAAC,aAAa,KAAK,MAAM,EAAE,CAAC;oBAC5C,gBAAgB,CAAC,SAAS,GAAG,gCAAgC,CAAC;gBAClE,CAAC;YACN,CAAC;QACL,CAAC;QAED,iFAAiF;QACjF,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;YACjC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,gBAAgB,CAAC;QACvD,CAAC;aAAM,CAAC;YACJ,wFAAwF;YACxF,iGAAiG;QACrG,CAAC;IACL,CAAC,CAAC,oCAAoC;IAEtC,gCAAgC;IAChC,OAAO,UAAU,CAAC;AACtB,CAAC;AAED,oCAAoC;AACpC;;;;;;;;;;;;;;;;;;;;EAoBE",
        "sourcesContent": [
          "import { prisma } from '../database/db';\nimport { AquaTree, FileObject, Revision as AquaRevision } from 'aqua-js-sdk';\nimport { Revision, Link, Signature, WitnessEvent, AquaForms, FileIndex } from '@prisma/client';\n\n// --- Internal Helper Functions --- //\n\n/**\n * Recursively fetches all ancestor revisions starting from a given hash.\n * @param revisionHash The starting revision hash (including user address prefix).\n * @returns A Promise resolving to an array of Revision objects.\n */\nasync function _findAquaTreeRevision(revisionHash: string): Promise<Array<Revision>> {\n    let revisions: Array<Revision> = [];\n\n    // Fetch latest revision \n    let latestRevionData = await prisma.revision.findFirst({\n        where: {\n            pubkey_hash: revisionHash\n        }\n    });\n\n    if (latestRevionData == null) {\n        // If the initial hash isn't found, log an error or throw\n        // Depending on how you want to handle potentially broken links\n        console.error(`Unable to get revision with hash ${revisionHash}`);\n        // Returning empty array might be safer than throwing if links can be broken\n        return [];\n        // throw new Error(`Unable to get revision with hash ${revisionHash}`);\n    }\n\n    revisions.push(latestRevionData);\n\n    // Recursively fetch previous revisions if a previous hash exists\n    if (latestRevionData?.previous) {\n        let previousWithPubKey = latestRevionData.previous; // Assume previous already includes pubkey\n\n        // Defensive check: add pubKey prefix if somehow missing (though it shouldn't be based on save logic)\n        if (!previousWithPubKey.includes('_')) {\n            const pubKey = revisionHash.split(\"_\")[0];\n            if (pubKey) { // Ensure pubKey was found\n                previousWithPubKey = `${pubKey}_${latestRevionData.previous}`;\n            } else {\n                console.error(`Could not extract pubKey from ${revisionHash} to prepend to previous hash ${latestRevionData.previous}`);\n                // Decide how to proceed: throw error, or stop recursion here?\n                // Stopping recursion might be safer for potentially corrupt data.\n                return revisions; // Return what we have so far\n            }\n        }\n\n        // Fetch the ancestor chain recursively\n        try {\n            const ancestorRevisions = await _findAquaTreeRevision(previousWithPubKey);\n            revisions.push(...ancestorRevisions);\n        } catch (error) {\n            console.error(`Error fetching ancestor revision chain for ${previousWithPubKey}:`, error);\n            // Decide how to proceed: re-throw, or return partial chain?\n            // Returning partial chain might be preferable in some scenarios.\n            return revisions; // Return what we have so far\n        }\n    }\n\n    return revisions;\n}\n\n/**\n * Fetches specific data associated with a non-\"file\" revision type.\n * @param hash The revision hash (including user address prefix).\n * @param revision The Revision object itself.\n * @returns A Promise resolving to the specific data (Signature, WitnessEvent, etc.) or null.\n */\nasync function _FetchRevisionInfo(hash: string, revision: Revision): Promise<Signature | WitnessEvent | AquaForms[] | Link | null> {\n    switch (revision.revision_type) {\n        case \"signature\":\n            return await prisma.signature.findFirst({ where: { hash: hash } });\n        case \"witness\":\n            const witnessLink = await prisma.witness.findFirst({ where: { hash: hash } });\n            if (!witnessLink || !witnessLink.Witness_merkle_root) {\n                console.error(`Witness link or merkle root not found for witness revision ${hash}`);\n                return null; // Or throw error\n            }\n            return await prisma.witnessEvent.findFirst({ where: { Witness_merkle_root: witnessLink.Witness_merkle_root } });\n        case \"form\":\n            return await prisma.aquaForms.findMany({ where: { hash: hash } });\n        case \"link\":\n            return await prisma.link.findFirst({ where: { hash: hash } });\n        case \"file\": // File revisions don't fetch extra info here\n             return null;\n        default:\n            console.warn(`Unknown revision type encountered: ${revision.revision_type} for hash ${hash}`);\n            return null;\n    }\n}\n\n/**\n * Estimates the size in bytes that a string would occupy if saved to a file\n * Uses UTF-8 encoding rules where ASCII chars take 1 byte and others take 2-4 bytes\n * @param str Input string to estimate size for\n * @returns Estimated size in bytes\n */\nfunction _estimateStringFileSize(str: string): number {\n    if (!str) return 0;\n    return Buffer.byteLength(str, 'utf8'); // Use Buffer for efficiency\n}\n\n// --- Main Public Function --- //\n\n/**\n * Fetches the complete revision chain starting from a given hash,\n * including traversing linked revisions recursively.\n *\n * @param latestHash The starting revision hash (without the user address prefix).\n * @param userAddress The address of the user owning the revision chain.\n * @param url The base URL for constructing file links (currently unused in this version but kept for potential future use).\n * @param _processedHashes Internal set to prevent infinite loops in case of circular links.\n * @returns A Promise resolving to the AquaTree containing the complete revision chain.\n */\nexport async function fetchCompleteRevisionChain(\n    latestHash: string,\n    userAddress: string,\n    url: string, // Keep url param for potential future file link generation\n    _processedHashes: Set<string> = new Set() // Add cycle detection\n): Promise<AquaTree> {\n    const fullLatestHash = `${userAddress}_${latestHash}`;\n\n    // Prevent infinite loops with circular links\n    if (_processedHashes.has(fullLatestHash)) {\n        console.warn(`Circular link detected or revision already processed: ${fullLatestHash}. Stopping recursion for this branch.`);\n        return { revisions: {}, file_index: {} }; // Return empty tree for this branch\n    }\n    _processedHashes.add(fullLatestHash);\n\n    const anAquaTree: AquaTree = {\n        revisions: {},\n        file_index: {}\n    };\n    let fileObjects: FileObject[] = []; // Keep track of associated files\n\n    let allRevisionData: Revision[] = [];\n    try {\n        // Fetch the main chain starting from the latest hash\n        allRevisionData = await _findAquaTreeRevision(fullLatestHash);\n        if (allRevisionData.length === 0) {\n            console.warn(`No revisions found for initial hash: ${fullLatestHash}`);\n            return anAquaTree; // Return empty tree if no revisions found\n        }\n    } catch (error) {\n        console.error(`Error fetching initial revision chain for ${fullLatestHash}:`, error);\n        throw error; // Re-throw error if initial fetch fails\n    }\n\n    // Determine the hash of the earliest revision in this chain (potential genesis)\n    const genesisRevisionInChain = allRevisionData[allRevisionData.length - 1];\n    const genesisHashInChain = genesisRevisionInChain.pubkey_hash.split('_')[1];\n\n    // Find associated file indexes based on the genesis hash of this chain\n    let fileIndexes: FileIndex[] = [];\n    if (genesisHashInChain) {\n        try {\n            // Find FileIndex entries where the genesis hash (prefixed) is present in the `hash` array\n            // Note: This logic assumes FileIndex.hash stores prefixed hashes.\n            // Adjust if FileIndex.hash stores non-prefixed hashes.\n            fileIndexes = await prisma.fileIndex.findMany({\n                 where: {\n                     hash: {\n                         has: genesisRevisionInChain.pubkey_hash // Check if the prefixed hash exists in the array\n                     }\n                 }\n            });\n            // Alternative if FileIndex.hash stores non-prefixed hashes:\n            // fileIndexes = await prisma.fileIndex.findMany({\n            //     where: {\n            //         hash: {\n            //             has: genesisHashInChain // Check for non-prefixed hash\n            //         },\n            //          id: { // Assuming FileIndex.id might relate to userAddress indirectly? Or filter differently\n            //             startsWith: userAddress + '_' // Example if ID structure allows filtering by user\n            //          }\n            //     }\n            // });\n\n        } catch (error) {\n             console.error(`Error fetching file indexes for genesis hash ${genesisHashInChain} (full: ${genesisRevisionInChain.pubkey_hash}):`, error);\n             // Decide how to handle: continue without index info, or throw?\n        }\n    }\n\n\n    // Process each revision in the fetched chain\n    for (const revisionItem of allRevisionData) {\n        const hashOnly = revisionItem.pubkey_hash.split('_')[1];\n        if (!hashOnly) {\n            console.error(`Could not extract hashOnly from pubkey_hash: ${revisionItem.pubkey_hash}`);\n            continue; // Skip this revision if hash is malformed\n        }\n\n        const previousHashOnly = revisionItem.previous\n            ? revisionItem.previous.split('_')[1] ?? \"\"\n            : \"\";\n\n        let revisionWithData: AquaRevision = {\n            revision_type: revisionItem.revision_type as AquaRevision['revision_type'],\n            previous_verification_hash: previousHashOnly,\n            local_timestamp: revisionItem.local_timestamp ?? new Date(0).toISOString(), // Use string directly, provide default ISO string\n            version: \"https://aqua-protocol.org/docs/v3/schema_2 | SHA256 | Method: scalar\", // Example version\n            // Include leaves if they exist\n            ...(revisionItem.verification_leaves && revisionItem.verification_leaves.length > 0 && { leaves: revisionItem.verification_leaves as string[] }),\n        };\n\n        // --- Handle different revision types --- \n\n        if (revisionItem.revision_type === \"file\") {\n            // For file revisions, add file_hash and file_nonce\n            revisionWithData.file_nonce = revisionItem.nonce ?? \"--error--\"; // Use nonce from revision\n             // Find the associated FileIndex to get the definitive file_hash and uri\n             const fileIndexForFileRev = fileIndexes.find(fi => fi.hash.includes(revisionItem.pubkey_hash));\n             if (fileIndexForFileRev) {\n                 revisionWithData.file_hash = fileIndexForFileRev.file_hash ?? \"--error--\";\n                 // Optionally add the file index URI to the main tree's index\n                 if (!anAquaTree.file_index[hashOnly]) { // Add only if not already present (genesis might add it later)\n                     anAquaTree.file_index[hashOnly] = fileIndexForFileRev.uri ?? \"--error_uri--\";\n                 }\n             } else {\n                 console.warn(`FileIndex not found for file revision: ${revisionItem.pubkey_hash}. File hash might be missing.`);\n                 revisionWithData.file_hash = \"--error_no_index--\";\n             }\n        } else {\n            // For non-file types, fetch additional info\n            const revisionInfoData = await _FetchRevisionInfo(revisionItem.pubkey_hash, revisionItem);\n\n            if (!revisionInfoData && revisionItem.revision_type !== 'file') { // file type handled above\n                // Log warning if info is expected but not found\n                 console.warn(`Revision info not found for ${revisionItem.revision_type} revision: ${revisionItem.pubkey_hash}`);\n                 // Continue processing the revision with available data\n            } else if (revisionInfoData) {\n                switch (revisionItem.revision_type) {\n                    case \"form\":\n                        const formItems = revisionInfoData as AquaForms[];\n                        formItems.forEach(item => {\n                            if (item.key) {\n                                revisionWithData[item.key] = item.value; // Add form key-value pairs\n                            }\n                        });\n                        break;\n                    case \"witness\":\n                        const witnessData = revisionInfoData as WitnessEvent;\n                        revisionWithData.witness_merkle_root = witnessData.Witness_merkle_root;\n                        revisionWithData.witness_timestamp = witnessData.Witness_timestamp ? parseInt(witnessData.Witness_timestamp, 10) : 0;\n                        revisionWithData.witness_network = witnessData.Witness_network ?? undefined;\n                        revisionWithData.witness_smart_contract_address = witnessData.Witness_smart_contract_address ?? undefined;\n                        revisionWithData.witness_transaction_hash = witnessData.Witness_transaction_hash ?? undefined;\n                        revisionWithData.witness_sender_account_address = witnessData.Witness_sender_account_address ?? undefined;\n                        // revisionWithData.witness_merkle_proof = []; // Merkle proof needs separate handling if required\n                        break;\n                    case \"signature\":\n                        const signatureData = revisionInfoData as Signature;\n                        try {\n                            // Attempt to parse if it's JSON (e.g., DID signature)\n                            revisionWithData.signature = JSON.parse(signatureData.signature_digest ?? '\"\"');\n                        } catch (e) {\n                            // Otherwise, treat as a plain string\n                            revisionWithData.signature = signatureData.signature_digest ?? \"\";\n                        }\n                        revisionWithData.signature_public_key = signatureData.signature_public_key ?? undefined;\n                        revisionWithData.signature_wallet_address = signatureData.signature_wallet_address ?? undefined;\n                        revisionWithData.signature_type = signatureData.signature_type ?? undefined;\n                        break;\n                    case \"link\":\n                        const linkData = revisionInfoData as Link;\n                        revisionWithData.link_type = linkData.link_type ?? undefined;\n                        revisionWithData.link_verification_hashes = linkData.link_verification_hashes as string[];\n                        revisionWithData.link_file_hashes = linkData.link_file_hashes as string[];\n\n                        // --- Recursively fetch linked chains --- \n                        if (linkData.link_verification_hashes && linkData.link_verification_hashes.length > 0) {\n                            for (const linkedHash of linkData.link_verification_hashes) {\n                                if (typeof linkedHash === 'string' && linkedHash.length > 0) {\n                                    // Extract user address and hash from the linked hash (assuming format user_hash)\n                                    const parts = linkedHash.split('_');\n                                    if (parts.length === 2) {\n                                        const linkedUserAddress = parts[0];\n                                        const linkedHashOnly = parts[1];\n\n                                         // Check if we have FileIndex info for this linked hash\n                                         const linkedFileIndex = await prisma.fileIndex.findFirst({ where: { id: linkedHash } }); // Assuming FileIndex.id is the full prefixed hash\n                                         if (linkedFileIndex && linkedFileIndex.uri) {\n                                             anAquaTree.file_index[linkedHashOnly] = linkedFileIndex.uri;\n                                         } else {\n                                             console.warn(`FileIndex URI not found for linked hash: ${linkedHash}`);\n                                             // Optionally provide a default or error placeholder\n                                             // anAquaTree.file_index[linkedHashOnly] = \"--error_missing_linked_uri--\";\n                                         }\n\n                                        // Recursively call fetchCompleteRevisionChain for the linked hash\n                                        try {\n                                             const linkedTree = await fetchCompleteRevisionChain(\n                                                 linkedHashOnly,\n                                                 linkedUserAddress,\n                                                 url, // Pass URL along\n                                                 _processedHashes // Pass the set to detect cycles across links\n                                             );\n\n                                             // Merge the linked tree into the current tree\n                                             Object.assign(anAquaTree.revisions, linkedTree.revisions);\n                                             Object.assign(anAquaTree.file_index, linkedTree.file_index);\n\n                                        } catch(linkError) {\n                                            console.error(`Error fetching linked revision chain for ${linkedHash}:`, linkError);\n                                             // Decide how to handle link errors: skip, add placeholder, re-throw?\n                                             // Skipping for now.\n                                        }\n                                    } else {\n                                        console.error(`Invalid linked hash format encountered: ${linkedHash}`);\n                                    }\n                                } else {\n                                     console.warn(`Invalid or empty hash found in link_verification_hashes for revision ${revisionItem.pubkey_hash}`);\n                                }\n                            }\n                        }\n                        break;\n                } // end switch\n            } // end else if (revisionInfoData)\n        } // end else (non-file type)\n\n        // --- Finalize revision processing --- \n\n        // Add file index for the genesis revision of the current chain segment\n        if (!previousHashOnly) { // Check if it's a genesis revision (no previous)\n            const genesisFileIndex = fileIndexes.find(item => item.hash.includes(revisionItem.pubkey_hash));\n            if (genesisFileIndex) {\n                anAquaTree.file_index[hashOnly] = genesisFileIndex.uri ?? \"--error_uri--\";\n                // Add file_hash to the genesis revision itself if it's a file type (might be redundant but ensures presence)\n                 if (revisionWithData.revision_type === 'file') {\n                     revisionWithData.file_hash = genesisFileIndex.file_hash ?? \"--error_hash--\";\n                 }\n            } else {\n                console.warn(`FileIndex not found for genesis revision: ${revisionItem.pubkey_hash}`);\n                 // Add placeholder URI if index is missing for genesis\n                 anAquaTree.file_index[hashOnly] = \"--error_missing_genesis_uri--\";\n                 if (revisionWithData.revision_type === 'file') {\n                     revisionWithData.file_hash = \"--error_missing_genesis_hash--\";\n                 }\n            }\n        }\n\n        // Add the processed revision to the tree, avoiding duplicates from linked chains\n        if (!anAquaTree.revisions[hashOnly]) {\n             anAquaTree.revisions[hashOnly] = revisionWithData;\n        } else {\n            // If already present (likely from a link), maybe log or decide if merge logic is needed\n            // console.log(`Revision ${hashOnly} already exists in tree, likely from a link. Skipping add.`);\n        }\n    } // end for loop over allRevisionData\n\n    // Return the populated AquaTree\n    return anAquaTree;\n}\n\n// --- Optional Example Usage --- //\n/*\nasync function example() {\n    try {\n        const latestHash = 'your_latest_revision_hash_here'; // Replace with an actual hash\n        const userAddress = 'user_address_here'; // Replace with the user's address\n        const apiUrl = 'http://localhost:3000'; // Replace with your API URL\n\n        console.log(`Fetching complete chain for ${userAddress}_${latestHash}...`);\n        const completeTree = await fetchCompleteRevisionChain(latestHash, userAddress, apiUrl);\n        console.log('----------------------------------------');\n        console.log('Complete Revision Tree:');\n        console.log(JSON.stringify(completeTree, null, 2));\n        console.log('----------------------------------------');\n\n    } catch (error) {\n        console.error('Error in example usage:', error);\n    }\n}\n\n// example(); // Uncomment to run the example\n*/\n\n"
        ],
        "sourceRoot": ""
      }
    }
  }
}
